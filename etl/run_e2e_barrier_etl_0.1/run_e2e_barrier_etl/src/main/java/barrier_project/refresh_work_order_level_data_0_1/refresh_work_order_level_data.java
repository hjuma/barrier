// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package barrier_project.refresh_work_order_level_data_0_1;

import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.Mathematical;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: refresh_work_order_level_data Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.4.1.20170623_1246
 * @status 
 */
public class refresh_work_order_level_data implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(this_level_job_name != null){
				
					this.setProperty("this_level_job_name", this_level_job_name.toString());
				
			}
			
			if(this_level_job_pre != null){
				
					this.setProperty("this_level_job_pre", this_level_job_pre.toString());
				
			}
			
			if(this_level_job_post != null){
				
					this.setProperty("this_level_job_post", this_level_job_post.toString());
				
			}
			
			if(barrier_AdditionalParams != null){
				
					this.setProperty("barrier_AdditionalParams", barrier_AdditionalParams.toString());
				
			}
			
			if(barrier_Login != null){
				
					this.setProperty("barrier_Login", barrier_Login.toString());
				
			}
			
			if(barrier_Server != null){
				
					this.setProperty("barrier_Server", barrier_Server.toString());
				
			}
			
			if(barrier_Database != null){
				
					this.setProperty("barrier_Database", barrier_Database.toString());
				
			}
			
			if(barrier_Password != null){
				
					this.setProperty("barrier_Password", barrier_Password.toString());
				
			}
			
			if(barrier_Port != null){
				
					this.setProperty("barrier_Port", barrier_Port.toString());
				
			}
			
		}

public String this_level_job_name;
public String getThis_level_job_name(){
	return this.this_level_job_name;
}
public String this_level_job_pre;
public String getThis_level_job_pre(){
	return this.this_level_job_pre;
}
public String this_level_job_post;
public String getThis_level_job_post(){
	return this.this_level_job_post;
}
public String barrier_AdditionalParams;
public String getBarrier_AdditionalParams(){
	return this.barrier_AdditionalParams;
}
public String barrier_Login;
public String getBarrier_Login(){
	return this.barrier_Login;
}
public String barrier_Server;
public String getBarrier_Server(){
	return this.barrier_Server;
}
public String barrier_Database;
public String getBarrier_Database(){
	return this.barrier_Database;
}
public java.lang.String barrier_Password;
public java.lang.String getBarrier_Password(){
	return this.barrier_Password;
}
public String barrier_Port;
public String getBarrier_Port(){
	return this.barrier_Port;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "refresh_work_order_level_data";
	private final String projectName = "BARRIER_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				refresh_work_order_level_data.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(refresh_work_order_level_data.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlSCD_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		





public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		
    	class BytesLimit65535_tPostjob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostjob_1().limitLog4jByte();

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tRunJob_2Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";

	
		int tos_count_tRunJob_2 = 0;
		
    	class BytesLimit65535_tRunJob_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_2().limitLog4jByte();


 



/**
 * [tRunJob_2 begin ] stop
 */
	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_2.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_2.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_2.add("--father_node=tRunJob_2");
	      			
	        			paraList_tRunJob_2.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_2 = null;

	
		obj_tRunJob_2 = context.this_level_job_name;
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param Job_name=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param Job_name=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("Job_name", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.this_level_job_post;
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param parent_job_post=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param parent_job_post=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("parent_job_post", obj_tRunJob_2);
	
	
		barrier_project.sendemailjobprocessstatus_0_1.SendEmailJobProcessStatus childJob_tRunJob_2 = new barrier_project.sendemailjobprocessstatus_0_1.SendEmailJobProcessStatus();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_2) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
			        .entrySet()) {
	            dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
	                    talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
	    }
		  
			childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
		  
		
		String[][] childReturn_tRunJob_2 = childJob_tRunJob_2.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));
		
	  	
				errorCode = childJob_tRunJob_2.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_2.getErrorCode() == null){
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
		    }
		    if (childJob_tRunJob_2.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_2.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());




/**
 * [tRunJob_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		
    	class BytesLimit65535_tPrejob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPrejob_1().limitLog4jByte();

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_BARRIER_PROJECT_refresh_work_order_level_data = new byte[0];
    static byte[] commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data.length) {
				if(length < 1024 && commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data.length == 0) {
   					commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data = new byte[1024];
				} else {
   					commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data, 0, length);
			strReturn = new String(commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BARRIER_PROJECT_refresh_work_order_level_data) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.root_pid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",root_pid="+root_pid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_BARRIER_PROJECT_refresh_work_order_level_data = new byte[0];
    static byte[] commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data.length) {
				if(length < 1024 && commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data.length == 0) {
   					commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data = new byte[1024];
				} else {
   					commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data, 0, length);
			strReturn = new String(commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BARRIER_PROJECT_refresh_work_order_level_data) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.root_pid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",root_pid="+root_pid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
row4Struct row3 = row4;





	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSetGlobalVar_1 = 0;
		
    	class BytesLimit65535_tSetGlobalVar_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSetGlobalVar_1().limitLog4jByte();

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */



	
	/**
	 * [tBufferOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_1", false);
		start_Hash.put("tBufferOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tBufferOutput_1 = 0;
		
    	class BytesLimit65535_tBufferOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tBufferOutput_1().limitLog4jByte();

 



/**
 * [tBufferOutput_1 begin ] stop
 */



	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		
    	class BytesLimit65535_tRunJob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_1().limitLog4jByte();


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        			paraList_tRunJob_1.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = context.this_level_job_name;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param Job_name=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param Job_name=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("Job_name", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.this_level_job_pre;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param parent_job_pre=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param parent_job_pre=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("parent_job_pre", obj_tRunJob_1);
	
	
		barrier_project.sendemailjobprocessstatus_0_1.SendEmailJobProcessStatus childJob_tRunJob_1 = new barrier_project.sendemailjobprocessstatus_0_1.SendEmailJobProcessStatus();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
	  	
				errorCode = childJob_tRunJob_1.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_1.getErrorCode() == null){
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
		    }
		    if (childJob_tRunJob_1.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_1.getExceptionStackTrace());
				}
			
	  	
			for (String[] item_tRunJob_1 : childReturn_tRunJob_1) { 
				if(childJob_tRunJob_1.hastBufferOutputComponent() || true){
			    			
						if(0 < item_tRunJob_1.length){				
			           		
				           		row4.moment = ParserUtils.parseTo_Date(item_tRunJob_1[0], "yyyy-MM-dd HH:mm:ss");
			           		
		           		}else{
			           		row4.moment = null;
		           		}
							
						if(1 < item_tRunJob_1.length){				
			           		
				           		row4.root_pid = item_tRunJob_1[1];
			           		
		           		}else{
			           		row4.root_pid = null;
		           		}
					
				}
		
 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */

	
	/**
	 * [tBufferOutput_1 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		



String[] row_tBufferOutput_1=new String[]{"","",};		
	    if(row4.moment != null){
	        
	            row_tBufferOutput_1[0] = FormatterUtils.format_Date(row4.moment, "yyyy-MM-dd HH:mm:ss");
	                        			    
	    }else{
	    	row_tBufferOutput_1[0] = null;
	    }
	    if(row4.root_pid != null){
	        
	            row_tBufferOutput_1[1] = row4.root_pid;
	                        			    
	    }else{
	    	row_tBufferOutput_1[1] = null;
	    }
	globalBuffer.add(row_tBufferOutput_1);	
	
 
     row3 = row4;


	tos_count_tBufferOutput_1++;

/**
 * [tBufferOutput_1 main ] stop
 */

	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

globalMap.put("snapshotdate", row3.moment);
globalMap.put("snapshotpid", row3.root_pid);

 


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */





	
		} // C_01
	
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */

	
	/**
	 * [tBufferOutput_1 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tBufferOutput_1", true);
end_Hash.put("tBufferOutput_1", System.currentTimeMillis());




/**
 * [tBufferOutput_1 end ] stop
 */

	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());




/**
 * [tSetGlobalVar_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */

	
	/**
	 * [tBufferOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

 



/**
 * [tBufferOutput_1 finally ] stop
 */

	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	


public static class fg1Struct implements routines.system.IPersistableRow<fg1Struct> {
    final static byte[] commonByteArrayLock_BARRIER_PROJECT_refresh_work_order_level_data = new byte[0];
    static byte[] commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String work_order_number;

				public String getWork_order_number () {
					return this.work_order_number;
				}
				
			    public String functional_location;

				public String getFunctional_location () {
					return this.functional_location;
				}
				
			    public int facility_id;

				public int getFacility_id () {
					return this.facility_id;
				}
				
			    public Integer barrier_element_id;

				public Integer getBarrier_element_id () {
					return this.barrier_element_id;
				}
				
			    public Integer barrier_type_id;

				public Integer getBarrier_type_id () {
					return this.barrier_type_id;
				}
				
			    public Integer barrier_metric_id;

				public Integer getBarrier_metric_id () {
					return this.barrier_metric_id;
				}
				
			    public String rag_status;

				public String getRag_status () {
					return this.rag_status;
				}
				
			    public Integer planner_group_id;

				public Integer getPlanner_group_id () {
					return this.planner_group_id;
				}
				
			    public Integer abc_indicator_id;

				public Integer getAbc_indicator_id () {
					return this.abc_indicator_id;
				}
				
			    public String work_order_description;

				public String getWork_order_description () {
					return this.work_order_description;
				}
				
			    public String order_type;

				public String getOrder_type () {
					return this.order_type;
				}
				
			    public String user_status;

				public String getUser_status () {
					return this.user_status;
				}
				
			    public String awaiting_deferment;

				public String getAwaiting_deferment () {
					return this.awaiting_deferment;
				}
				
			    public String deferred;

				public String getDeferred () {
					return this.deferred;
				}
				
			    public String work_centre;

				public String getWork_centre () {
					return this.work_centre;
				}
				
			    public java.util.Date latest_allowable_finish_date;

				public java.util.Date getLatest_allowable_finish_date () {
					return this.latest_allowable_finish_date;
				}
				
			    public String maint_activ_type;

				public String getMaint_activ_type () {
					return this.maint_activ_type;
				}
				
			    public java.util.Date snapshot_date;

				public java.util.Date getSnapshot_date () {
					return this.snapshot_date;
				}
				
			    public String snapshot_pid;

				public String getSnapshot_pid () {
					return this.snapshot_pid;
				}
				
			    public java.util.Date created_at;

				public java.util.Date getCreated_at () {
					return this.created_at;
				}
				
			    public java.util.Date updated_at;

				public java.util.Date getUpdated_at () {
					return this.updated_at;
				}
				
			    public int version_no;

				public int getVersion_no () {
					return this.version_no;
				}
				
			    public int current_flag;

				public int getCurrent_flag () {
					return this.current_flag;
				}
				
			    public java.util.Date start_dt;

				public java.util.Date getStart_dt () {
					return this.start_dt;
				}
				
			    public java.util.Date end_dt;

				public java.util.Date getEnd_dt () {
					return this.end_dt;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.work_order_number == null) ? 0 : this.work_order_number.hashCode());
					
							result = prime * result + (int) this.facility_id;
						
							result = prime * result + (int) this.current_flag;
						
						result = prime * result + ((this.start_dt == null) ? 0 : this.start_dt.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final fg1Struct other = (fg1Struct) obj;
		
						if (this.work_order_number == null) {
							if (other.work_order_number != null)
								return false;
						
						} else if (!this.work_order_number.equals(other.work_order_number))
						
							return false;
					
						if (this.facility_id != other.facility_id)
							return false;
					
						if (this.current_flag != other.current_flag)
							return false;
					
						if (this.start_dt == null) {
							if (other.start_dt != null)
								return false;
						
						} else if (!this.start_dt.equals(other.start_dt))
						
							return false;
					

		return true;
    }

	public void copyDataTo(fg1Struct other) {

		other.work_order_number = this.work_order_number;
	            other.functional_location = this.functional_location;
	            other.facility_id = this.facility_id;
	            other.barrier_element_id = this.barrier_element_id;
	            other.barrier_type_id = this.barrier_type_id;
	            other.barrier_metric_id = this.barrier_metric_id;
	            other.rag_status = this.rag_status;
	            other.planner_group_id = this.planner_group_id;
	            other.abc_indicator_id = this.abc_indicator_id;
	            other.work_order_description = this.work_order_description;
	            other.order_type = this.order_type;
	            other.user_status = this.user_status;
	            other.awaiting_deferment = this.awaiting_deferment;
	            other.deferred = this.deferred;
	            other.work_centre = this.work_centre;
	            other.latest_allowable_finish_date = this.latest_allowable_finish_date;
	            other.maint_activ_type = this.maint_activ_type;
	            other.snapshot_date = this.snapshot_date;
	            other.snapshot_pid = this.snapshot_pid;
	            other.created_at = this.created_at;
	            other.updated_at = this.updated_at;
	            other.version_no = this.version_no;
	            other.current_flag = this.current_flag;
	            other.start_dt = this.start_dt;
	            other.end_dt = this.end_dt;
	            
	}

	public void copyKeysDataTo(fg1Struct other) {

		other.work_order_number = this.work_order_number;
	            	other.facility_id = this.facility_id;
	            	other.current_flag = this.current_flag;
	            	other.start_dt = this.start_dt;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data.length) {
				if(length < 1024 && commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data.length == 0) {
   					commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data = new byte[1024];
				} else {
   					commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data, 0, length);
			strReturn = new String(commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BARRIER_PROJECT_refresh_work_order_level_data) {

        	try {

        		int length = 0;
		
					this.work_order_number = readString(dis);
					
					this.functional_location = readString(dis);
					
			        this.facility_id = dis.readInt();
					
						this.barrier_element_id = readInteger(dis);
					
						this.barrier_type_id = readInteger(dis);
					
						this.barrier_metric_id = readInteger(dis);
					
					this.rag_status = readString(dis);
					
						this.planner_group_id = readInteger(dis);
					
						this.abc_indicator_id = readInteger(dis);
					
					this.work_order_description = readString(dis);
					
					this.order_type = readString(dis);
					
					this.user_status = readString(dis);
					
					this.awaiting_deferment = readString(dis);
					
					this.deferred = readString(dis);
					
					this.work_centre = readString(dis);
					
					this.latest_allowable_finish_date = readDate(dis);
					
					this.maint_activ_type = readString(dis);
					
					this.snapshot_date = readDate(dis);
					
					this.snapshot_pid = readString(dis);
					
					this.created_at = readDate(dis);
					
					this.updated_at = readDate(dis);
					
			        this.version_no = dis.readInt();
					
			        this.current_flag = dis.readInt();
					
					this.start_dt = readDate(dis);
					
					this.end_dt = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.work_order_number,dos);
					
					// String
				
						writeString(this.functional_location,dos);
					
					// int
				
		            	dos.writeInt(this.facility_id);
					
					// Integer
				
						writeInteger(this.barrier_element_id,dos);
					
					// Integer
				
						writeInteger(this.barrier_type_id,dos);
					
					// Integer
				
						writeInteger(this.barrier_metric_id,dos);
					
					// String
				
						writeString(this.rag_status,dos);
					
					// Integer
				
						writeInteger(this.planner_group_id,dos);
					
					// Integer
				
						writeInteger(this.abc_indicator_id,dos);
					
					// String
				
						writeString(this.work_order_description,dos);
					
					// String
				
						writeString(this.order_type,dos);
					
					// String
				
						writeString(this.user_status,dos);
					
					// String
				
						writeString(this.awaiting_deferment,dos);
					
					// String
				
						writeString(this.deferred,dos);
					
					// String
				
						writeString(this.work_centre,dos);
					
					// java.util.Date
				
						writeDate(this.latest_allowable_finish_date,dos);
					
					// String
				
						writeString(this.maint_activ_type,dos);
					
					// java.util.Date
				
						writeDate(this.snapshot_date,dos);
					
					// String
				
						writeString(this.snapshot_pid,dos);
					
					// java.util.Date
				
						writeDate(this.created_at,dos);
					
					// java.util.Date
				
						writeDate(this.updated_at,dos);
					
					// int
				
		            	dos.writeInt(this.version_no);
					
					// int
				
		            	dos.writeInt(this.current_flag);
					
					// java.util.Date
				
						writeDate(this.start_dt,dos);
					
					// java.util.Date
				
						writeDate(this.end_dt,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("work_order_number="+work_order_number);
		sb.append(",functional_location="+functional_location);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",barrier_element_id="+String.valueOf(barrier_element_id));
		sb.append(",barrier_type_id="+String.valueOf(barrier_type_id));
		sb.append(",barrier_metric_id="+String.valueOf(barrier_metric_id));
		sb.append(",rag_status="+rag_status);
		sb.append(",planner_group_id="+String.valueOf(planner_group_id));
		sb.append(",abc_indicator_id="+String.valueOf(abc_indicator_id));
		sb.append(",work_order_description="+work_order_description);
		sb.append(",order_type="+order_type);
		sb.append(",user_status="+user_status);
		sb.append(",awaiting_deferment="+awaiting_deferment);
		sb.append(",deferred="+deferred);
		sb.append(",work_centre="+work_centre);
		sb.append(",latest_allowable_finish_date="+String.valueOf(latest_allowable_finish_date));
		sb.append(",maint_activ_type="+maint_activ_type);
		sb.append(",snapshot_date="+String.valueOf(snapshot_date));
		sb.append(",snapshot_pid="+snapshot_pid);
		sb.append(",created_at="+String.valueOf(created_at));
		sb.append(",updated_at="+String.valueOf(updated_at));
		sb.append(",version_no="+String.valueOf(version_no));
		sb.append(",current_flag="+String.valueOf(current_flag));
		sb.append(",start_dt="+String.valueOf(start_dt));
		sb.append(",end_dt="+String.valueOf(end_dt));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(fg1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.work_order_number, other.work_order_number);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.facility_id, other.facility_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.current_flag, other.current_flag);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.start_dt, other.start_dt);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_BARRIER_PROJECT_refresh_work_order_level_data = new byte[0];
    static byte[] commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data = new byte[0];

	
			    public Integer barrier_element_id;

				public Integer getBarrier_element_id () {
					return this.barrier_element_id;
				}
				
			    public String functional_location;

				public String getFunctional_location () {
					return this.functional_location;
				}
				
			    public int facility_id;

				public int getFacility_id () {
					return this.facility_id;
				}
				
			    public int barrier_type_id;

				public int getBarrier_type_id () {
					return this.barrier_type_id;
				}
				
			    public int barrier_metric_id;

				public int getBarrier_metric_id () {
					return this.barrier_metric_id;
				}
				
			    public String rag_status;

				public String getRag_status () {
					return this.rag_status;
				}
				
			    public int planner_group_id;

				public int getPlanner_group_id () {
					return this.planner_group_id;
				}
				
			    public int abc_indicator_id;

				public int getAbc_indicator_id () {
					return this.abc_indicator_id;
				}
				
			    public String work_order_number;

				public String getWork_order_number () {
					return this.work_order_number;
				}
				
			    public String work_order_description;

				public String getWork_order_description () {
					return this.work_order_description;
				}
				
			    public String order_type;

				public String getOrder_type () {
					return this.order_type;
				}
				
			    public String user_status;

				public String getUser_status () {
					return this.user_status;
				}
				
			    public String awaiting_deferrment;

				public String getAwaiting_deferrment () {
					return this.awaiting_deferrment;
				}
				
			    public String deferred;

				public String getDeferred () {
					return this.deferred;
				}
				
			    public String work_centre;

				public String getWork_centre () {
					return this.work_centre;
				}
				
			    public java.util.Date latest_allowable_finish_date;

				public java.util.Date getLatest_allowable_finish_date () {
					return this.latest_allowable_finish_date;
				}
				
			    public String maint_activ_type;

				public String getMaint_activ_type () {
					return this.maint_activ_type;
				}
				
			    public java.util.Date created_at;

				public java.util.Date getCreated_at () {
					return this.created_at;
				}
				
			    public java.util.Date updated_at;

				public java.util.Date getUpdated_at () {
					return this.updated_at;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data.length) {
				if(length < 1024 && commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data.length == 0) {
   					commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data = new byte[1024];
				} else {
   					commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data, 0, length);
			strReturn = new String(commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BARRIER_PROJECT_refresh_work_order_level_data) {

        	try {

        		int length = 0;
		
						this.barrier_element_id = readInteger(dis);
					
					this.functional_location = readString(dis);
					
			        this.facility_id = dis.readInt();
					
			        this.barrier_type_id = dis.readInt();
					
			        this.barrier_metric_id = dis.readInt();
					
					this.rag_status = readString(dis);
					
			        this.planner_group_id = dis.readInt();
					
			        this.abc_indicator_id = dis.readInt();
					
					this.work_order_number = readString(dis);
					
					this.work_order_description = readString(dis);
					
					this.order_type = readString(dis);
					
					this.user_status = readString(dis);
					
					this.awaiting_deferrment = readString(dis);
					
					this.deferred = readString(dis);
					
					this.work_centre = readString(dis);
					
					this.latest_allowable_finish_date = readDate(dis);
					
					this.maint_activ_type = readString(dis);
					
					this.created_at = readDate(dis);
					
					this.updated_at = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.barrier_element_id,dos);
					
					// String
				
						writeString(this.functional_location,dos);
					
					// int
				
		            	dos.writeInt(this.facility_id);
					
					// int
				
		            	dos.writeInt(this.barrier_type_id);
					
					// int
				
		            	dos.writeInt(this.barrier_metric_id);
					
					// String
				
						writeString(this.rag_status,dos);
					
					// int
				
		            	dos.writeInt(this.planner_group_id);
					
					// int
				
		            	dos.writeInt(this.abc_indicator_id);
					
					// String
				
						writeString(this.work_order_number,dos);
					
					// String
				
						writeString(this.work_order_description,dos);
					
					// String
				
						writeString(this.order_type,dos);
					
					// String
				
						writeString(this.user_status,dos);
					
					// String
				
						writeString(this.awaiting_deferrment,dos);
					
					// String
				
						writeString(this.deferred,dos);
					
					// String
				
						writeString(this.work_centre,dos);
					
					// java.util.Date
				
						writeDate(this.latest_allowable_finish_date,dos);
					
					// String
				
						writeString(this.maint_activ_type,dos);
					
					// java.util.Date
				
						writeDate(this.created_at,dos);
					
					// java.util.Date
				
						writeDate(this.updated_at,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("barrier_element_id="+String.valueOf(barrier_element_id));
		sb.append(",functional_location="+functional_location);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",barrier_type_id="+String.valueOf(barrier_type_id));
		sb.append(",barrier_metric_id="+String.valueOf(barrier_metric_id));
		sb.append(",rag_status="+rag_status);
		sb.append(",planner_group_id="+String.valueOf(planner_group_id));
		sb.append(",abc_indicator_id="+String.valueOf(abc_indicator_id));
		sb.append(",work_order_number="+work_order_number);
		sb.append(",work_order_description="+work_order_description);
		sb.append(",order_type="+order_type);
		sb.append(",user_status="+user_status);
		sb.append(",awaiting_deferrment="+awaiting_deferrment);
		sb.append(",deferred="+deferred);
		sb.append(",work_centre="+work_centre);
		sb.append(",latest_allowable_finish_date="+String.valueOf(latest_allowable_finish_date));
		sb.append(",maint_activ_type="+maint_activ_type);
		sb.append(",created_at="+String.valueOf(created_at));
		sb.append(",updated_at="+String.valueOf(updated_at));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
fg1Struct fg1 = new fg1Struct();





	
	/**
	 * [tMysqlSCD_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlSCD_1", false);
		start_Hash.put("tMysqlSCD_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlSCD_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("fg1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlSCD_1 = 0;
		
    	class BytesLimit65535_tMysqlSCD_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlSCD_1().limitLog4jByte();

        class SCDSK_tMysqlSCD_1 {
private int hashCode;
public boolean hashCodeDirty = true;
String work_order_number;
int facility_id;
public boolean equals(Object obj) {
if (this == obj) return true;
if (obj == null) return false;
if (getClass() != obj.getClass()) return false;
final SCDSK_tMysqlSCD_1 other = (SCDSK_tMysqlSCD_1) obj;
if (this.work_order_number == null) {
if (other.work_order_number!= null)
return false;
} else if (!this.work_order_number.equals(other.work_order_number))
return false;

if (this.facility_id!= other.facility_id)
return false;

return true;
}
public int hashCode() {
if(hashCodeDirty) {
int prime = 31;hashCode = prime * hashCode + (work_order_number == null ? 0 : work_order_number.hashCode());
hashCode = prime * hashCode + facility_id;
hashCodeDirty = false;
}
return hashCode;
}
}

    class SCDStruct_tMysqlSCD_1 {
private Integer abc_indicator_id;
private String awaiting_deferment;
private Integer barrier_element_id;
private Integer barrier_metric_id;
private Integer barrier_type_id;
private String deferred;
private String functional_location;
private java.util.Date latest_allowable_finish_date;
private String maint_activ_type;
private String order_type;
private Integer planner_group_id;
private java.util.Date snapshot_date;
private String snapshot_pid;
private String rag_status;
private String user_status;
private String work_centre;
private String work_order_description;
private int version_no;
}

    int nb_line_update_tMysqlSCD_1 = 0;
    int nb_line_inserted_tMysqlSCD_1 = 0;
    int nb_line_rejected_tMysqlSCD_1 = 0;
    String tableName_tMysqlSCD_1 = "work_order_level_data_version";
        java.lang.Class.forName("org.gjt.mm.mysql.Driver");
            String connectionString_tMysqlSCD_1 = "jdbc:mysql://" + context.barrier_Server + ":" + context.barrier_Port + "/" + context.barrier_Database + "?" + context.barrier_AdditionalParams;
	        
		
		
		
	final String decryptedPassword_tMysqlSCD_1 = context.barrier_Password; 
	   	
        java.sql.Connection connection_tMysqlSCD_1 = java.sql.DriverManager.getConnection(connectionString_tMysqlSCD_1, context.barrier_Login, decryptedPassword_tMysqlSCD_1);
    
        
    java.util.Calendar calendar_tMysqlSCD_1 = java.util.Calendar.getInstance();
    java.util.Calendar calendarYear0_tMysqlSCD_1 = java.util.Calendar.getInstance();
    
    calendar_tMysqlSCD_1.set(1, 0, 1, 0, 0, 0);
    calendarYear0_tMysqlSCD_1.set(0,0,0,0,0,0);
    
    final java.util.Date dateYear0_tMysqlSCD_1 = calendarYear0_tMysqlSCD_1.getTime();
    final long year1_tMysqlSCD_1 = calendar_tMysqlSCD_1.getTime().getTime();
    
    
    calendar_tMysqlSCD_1.set(10000, 0, 1, 0, 0, 0);
    final long year10000_tMysqlSCD_1 = calendar_tMysqlSCD_1.getTime().getTime();
    long date_tMysqlSCD_1 = 0;    
    String dateStr_tMysqlSCD_1 = null;
    String tmpValue_tMysqlSCD_1 = null;    
        String search_tMysqlSCD_1 = "SELECT `work_order_number`, `facility_id`, `abc_indicator_id`, `awaiting_deferment`, `barrier_element_id`, `barrier_metric_id`, `barrier_type_id`, `deferred`, `functional_location`, `latest_allowable_finish_date`, `maint_activ_type`, `order_type`, `planner_group_id`, `snapshot_date`, `snapshot_pid`, `rag_status`, `user_status`, `work_centre`, `work_order_description`, `version_no` FROM `" + tableName_tMysqlSCD_1 + "` WHERE `end_dt` IS NULL";
        java.sql.Statement statement_tMysqlSCD_1 = connection_tMysqlSCD_1.createStatement();
        java.sql.ResultSet resultSet_tMysqlSCD_1 = statement_tMysqlSCD_1.executeQuery(search_tMysqlSCD_1);
        java.util.Map<SCDSK_tMysqlSCD_1, SCDStruct_tMysqlSCD_1> cache_tMysqlSCD_1 = new java.util.HashMap<SCDSK_tMysqlSCD_1, SCDStruct_tMysqlSCD_1>();
        while(resultSet_tMysqlSCD_1.next()) {
            SCDSK_tMysqlSCD_1 sk_tMysqlSCD_1 = new SCDSK_tMysqlSCD_1();
            SCDStruct_tMysqlSCD_1 row_tMysqlSCD_1 = new SCDStruct_tMysqlSCD_1();
                    if(resultSet_tMysqlSCD_1.getObject(1) != null) {
                        sk_tMysqlSCD_1.work_order_number = resultSet_tMysqlSCD_1.getString(1);
                    }
                    if(resultSet_tMysqlSCD_1.getObject(2) != null) {
                        sk_tMysqlSCD_1.facility_id = resultSet_tMysqlSCD_1.getInt(2);
                    }
                    if(resultSet_tMysqlSCD_1.getObject(3) != null) {
                        row_tMysqlSCD_1.abc_indicator_id = resultSet_tMysqlSCD_1.getInt(3);
                    }
                    if(resultSet_tMysqlSCD_1.getObject(4) != null) {
                        row_tMysqlSCD_1.awaiting_deferment = resultSet_tMysqlSCD_1.getString(4);
                    }
                    if(resultSet_tMysqlSCD_1.getObject(5) != null) {
                        row_tMysqlSCD_1.barrier_element_id = resultSet_tMysqlSCD_1.getInt(5);
                    }
                    if(resultSet_tMysqlSCD_1.getObject(6) != null) {
                        row_tMysqlSCD_1.barrier_metric_id = resultSet_tMysqlSCD_1.getInt(6);
                    }
                    if(resultSet_tMysqlSCD_1.getObject(7) != null) {
                        row_tMysqlSCD_1.barrier_type_id = resultSet_tMysqlSCD_1.getInt(7);
                    }
                    if(resultSet_tMysqlSCD_1.getObject(8) != null) {
                        row_tMysqlSCD_1.deferred = resultSet_tMysqlSCD_1.getString(8);
                    }
                    if(resultSet_tMysqlSCD_1.getObject(9) != null) {
                        row_tMysqlSCD_1.functional_location = resultSet_tMysqlSCD_1.getString(9);
                    }
                    dateStr_tMysqlSCD_1 = resultSet_tMysqlSCD_1.getString(10);
                    if(dateStr_tMysqlSCD_1 != null) {
                        if(!("0000-00-00").equals(dateStr_tMysqlSCD_1) && !("0000-00-00 00:00:00").equals(dateStr_tMysqlSCD_1)) {
                            row_tMysqlSCD_1.latest_allowable_finish_date = new java.util.Date(resultSet_tMysqlSCD_1.getTimestamp(10).getTime());
                        } else {
                            row_tMysqlSCD_1.latest_allowable_finish_date = (java.util.Date) dateYear0_tMysqlSCD_1.clone();
                        }
                    } else {
                        row_tMysqlSCD_1.latest_allowable_finish_date = null;
                    }
                    if(resultSet_tMysqlSCD_1.getObject(11) != null) {
                        row_tMysqlSCD_1.maint_activ_type = resultSet_tMysqlSCD_1.getString(11);
                    }
                    if(resultSet_tMysqlSCD_1.getObject(12) != null) {
                        row_tMysqlSCD_1.order_type = resultSet_tMysqlSCD_1.getString(12);
                    }
                    if(resultSet_tMysqlSCD_1.getObject(13) != null) {
                        row_tMysqlSCD_1.planner_group_id = resultSet_tMysqlSCD_1.getInt(13);
                    }
                    dateStr_tMysqlSCD_1 = resultSet_tMysqlSCD_1.getString(14);
                    if(dateStr_tMysqlSCD_1 != null) {
                        if(!("0000-00-00").equals(dateStr_tMysqlSCD_1) && !("0000-00-00 00:00:00").equals(dateStr_tMysqlSCD_1)) {
                            row_tMysqlSCD_1.snapshot_date = new java.util.Date(resultSet_tMysqlSCD_1.getTimestamp(14).getTime());
                        } else {
                            row_tMysqlSCD_1.snapshot_date = (java.util.Date) dateYear0_tMysqlSCD_1.clone();
                        }
                    } else {
                        row_tMysqlSCD_1.snapshot_date = null;
                    }
                    if(resultSet_tMysqlSCD_1.getObject(15) != null) {
                        row_tMysqlSCD_1.snapshot_pid = resultSet_tMysqlSCD_1.getString(15);
                    }
                    if(resultSet_tMysqlSCD_1.getObject(16) != null) {
                        row_tMysqlSCD_1.rag_status = resultSet_tMysqlSCD_1.getString(16);
                    }
                    if(resultSet_tMysqlSCD_1.getObject(17) != null) {
                        row_tMysqlSCD_1.user_status = resultSet_tMysqlSCD_1.getString(17);
                    }
                    if(resultSet_tMysqlSCD_1.getObject(18) != null) {
                        row_tMysqlSCD_1.work_centre = resultSet_tMysqlSCD_1.getString(18);
                    }
                    if(resultSet_tMysqlSCD_1.getObject(19) != null) {
                        row_tMysqlSCD_1.work_order_description = resultSet_tMysqlSCD_1.getString(19);
                    }
                    if(resultSet_tMysqlSCD_1.getObject(20) != null) {
                        row_tMysqlSCD_1.version_no = resultSet_tMysqlSCD_1.getInt(20);
                    }
            cache_tMysqlSCD_1.put(sk_tMysqlSCD_1, row_tMysqlSCD_1);
        }
        resultSet_tMysqlSCD_1.close();
        statement_tMysqlSCD_1.close();
    String insertionSQL_tMysqlSCD_1 = "INSERT INTO `" + tableName_tMysqlSCD_1 + "`(`work_order_number`, `facility_id`, `updated_at`, `created_at`, `abc_indicator_id`, `awaiting_deferment`, `barrier_element_id`, `barrier_metric_id`, `barrier_type_id`, `deferred`, `functional_location`, `latest_allowable_finish_date`, `maint_activ_type`, `order_type`, `planner_group_id`, `snapshot_date`, `snapshot_pid`, `rag_status`, `user_status`, `work_centre`, `work_order_description`, `current_flag`, `version_no`, `start_dt`, `end_dt`) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, b'1', ?, ?, ?)";
    java.sql.PreparedStatement insertionStatement_tMysqlSCD_1 = connection_tMysqlSCD_1.prepareStatement(insertionSQL_tMysqlSCD_1);
            insertionStatement_tMysqlSCD_1.setTimestamp(23, new java.sql.Timestamp(start_Hash.get("tMysqlSCD_1")));
            insertionStatement_tMysqlSCD_1.setNull(24, java.sql.Types.DATE);
        String updateSQLForType2_tMysqlSCD_1 = "UPDATE `" + tableName_tMysqlSCD_1 + "` SET `end_dt` = ?, `current_flag` = b'0' WHERE `work_order_number` = ? AND `facility_id` = ? AND `end_dt` IS NULL";
        java.sql.PreparedStatement updateForType2_tMysqlSCD_1 = connection_tMysqlSCD_1.prepareStatement(updateSQLForType2_tMysqlSCD_1);
            updateForType2_tMysqlSCD_1.setTimestamp(1, new java.sql.Timestamp(start_Hash.get("tMysqlSCD_1")));
    
        SCDSK_tMysqlSCD_1 lookUpKey_tMysqlSCD_1 = null;        
    SCDStruct_tMysqlSCD_1 lookUpValue_tMysqlSCD_1 = null;

 



/**
 * [tMysqlSCD_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		
    	class BytesLimit65535_tMap_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_2().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
	java.util.Date snapshot_date;
	String snapshot_pid;
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
fg1Struct fg1_tmp = new fg1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMysqlInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_3", false);
		start_Hash.put("tMysqlInput_3", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_3";

	
		int tos_count_tMysqlInput_3 = 0;
		
    	class BytesLimit65535_tMysqlInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_3().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_3 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_3.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_3 = calendar_tMysqlInput_3.getTime();
		    int nb_line_tMysqlInput_3 = 0;
		    java.sql.Connection conn_tMysqlInput_3 = null;
				String driverClass_tMysqlInput_3 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_3);
			   	String dbUser_tMysqlInput_3 = context.barrier_Login;
			   	
        		
        		
        		
	final String decryptedPassword_tMysqlInput_3 = context.barrier_Password; 
			   	
		        String dbPwd_tMysqlInput_3 = decryptedPassword_tMysqlInput_3;
		        
				
				String url_tMysqlInput_3 = "jdbc:mysql://" + context.barrier_Server + ":" + context.barrier_Port + "/" + context.barrier_Database + "?" + context.barrier_AdditionalParams;
				
				conn_tMysqlInput_3 = java.sql.DriverManager.getConnection(url_tMysqlInput_3,dbUser_tMysqlInput_3,dbPwd_tMysqlInput_3);
		        
		    
			java.sql.Statement stmt_tMysqlInput_3 = conn_tMysqlInput_3.createStatement();

		    String dbquery_tMysqlInput_3 = "SELECT \n  `vw_work_order_level_data`.`barrier_element_id`, \n  `vw_work_order_level_data`.`functional_location`, \n  `vw_work_order_level_data`.`facility_id`, \n  `vw_work_order_level_data`.`barrier_type_id`, \n  `vw_work_order_level_data`.`barrier_metric_id`, \n  `vw_work_order_level_data`.`rag_status`, \n  `vw_work_order_level_data`.`planner_group_id`, \n  `vw_work_order_level_data`.`abc_indicator_id`, \n  `vw_work_order_level_data`.`work_order_number`, \n  `vw_work_order_level_data`.`work_order_description`, \n  `vw_work_order_level_data`.`order_type`, \n  `vw_work_order_level_data`.`user_status`, \n  `vw_work_order_level_data`.`awaiting_deferrment`, \n  `vw_work_order_level_data`.`deferred`, \n  `vw_work_order_level_data`.`work_centre`, \n  `vw_work_order_level_data`.`latest_allowable_finish_date`, \n  `vw_work_order_level_data`.`maint_activ_type`, \n  `vw_work_order_level_data`.`created_at`, \n  `vw_work_order_level_data`.`updated_at`\nFROM `vw_work_order_level_data`";
			

                       globalMap.put("tMysqlInput_3_QUERY",dbquery_tMysqlInput_3);

		    java.sql.ResultSet rs_tMysqlInput_3 = null;
		try{
		    rs_tMysqlInput_3 = stmt_tMysqlInput_3.executeQuery(dbquery_tMysqlInput_3);
		    java.sql.ResultSetMetaData rsmd_tMysqlInput_3 = rs_tMysqlInput_3.getMetaData();
		    int colQtyInRs_tMysqlInput_3 = rsmd_tMysqlInput_3.getColumnCount();

		    String tmpContent_tMysqlInput_3 = null;
		    
		    
		    while (rs_tMysqlInput_3.next()) {
		        nb_line_tMysqlInput_3++;
		        
							if(colQtyInRs_tMysqlInput_3 < 1) {
								row1.barrier_element_id = null;
							} else {
		                          
            if(rs_tMysqlInput_3.getObject(1) != null) {
                row1.barrier_element_id = rs_tMysqlInput_3.getInt(1);
            } else {
                    row1.barrier_element_id = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_3 < 2) {
								row1.functional_location = null;
							} else {
	                         		
        	row1.functional_location = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 2, false);
		                    }
							if(colQtyInRs_tMysqlInput_3 < 3) {
								row1.facility_id = 0;
							} else {
		                          
            if(rs_tMysqlInput_3.getObject(3) != null) {
                row1.facility_id = rs_tMysqlInput_3.getInt(3);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_3 < 4) {
								row1.barrier_type_id = 0;
							} else {
		                          
            if(rs_tMysqlInput_3.getObject(4) != null) {
                row1.barrier_type_id = rs_tMysqlInput_3.getInt(4);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_3 < 5) {
								row1.barrier_metric_id = 0;
							} else {
		                          
            if(rs_tMysqlInput_3.getObject(5) != null) {
                row1.barrier_metric_id = rs_tMysqlInput_3.getInt(5);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_3 < 6) {
								row1.rag_status = null;
							} else {
	                         		
        	row1.rag_status = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 6, false);
		                    }
							if(colQtyInRs_tMysqlInput_3 < 7) {
								row1.planner_group_id = 0;
							} else {
		                          
            if(rs_tMysqlInput_3.getObject(7) != null) {
                row1.planner_group_id = rs_tMysqlInput_3.getInt(7);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_3 < 8) {
								row1.abc_indicator_id = 0;
							} else {
		                          
            if(rs_tMysqlInput_3.getObject(8) != null) {
                row1.abc_indicator_id = rs_tMysqlInput_3.getInt(8);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_3 < 9) {
								row1.work_order_number = null;
							} else {
	                         		
        	row1.work_order_number = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 9, false);
		                    }
							if(colQtyInRs_tMysqlInput_3 < 10) {
								row1.work_order_description = null;
							} else {
	                         		
        	row1.work_order_description = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 10, false);
		                    }
							if(colQtyInRs_tMysqlInput_3 < 11) {
								row1.order_type = null;
							} else {
	                         		
        	row1.order_type = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 11, false);
		                    }
							if(colQtyInRs_tMysqlInput_3 < 12) {
								row1.user_status = null;
							} else {
	                         		
        	row1.user_status = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 12, false);
		                    }
							if(colQtyInRs_tMysqlInput_3 < 13) {
								row1.awaiting_deferrment = null;
							} else {
	                         		
        	row1.awaiting_deferrment = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 13, false);
		                    }
							if(colQtyInRs_tMysqlInput_3 < 14) {
								row1.deferred = null;
							} else {
	                         		
        	row1.deferred = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 14, false);
		                    }
							if(colQtyInRs_tMysqlInput_3 < 15) {
								row1.work_centre = null;
							} else {
	                         		
        	row1.work_centre = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 15, false);
		                    }
							if(colQtyInRs_tMysqlInput_3 < 16) {
								row1.latest_allowable_finish_date = null;
							} else {
										
	        if(rs_tMysqlInput_3.getString(16) != null) {
	            String dateString_tMysqlInput_3 = rs_tMysqlInput_3.getString(16);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_3) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_3)) {
	                row1.latest_allowable_finish_date = rs_tMysqlInput_3.getTimestamp(16);
	            } else {
	                row1.latest_allowable_finish_date = (java.util.Date) year0_tMysqlInput_3.clone();
	            }
	        } else {
	            row1.latest_allowable_finish_date =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_3 < 17) {
								row1.maint_activ_type = null;
							} else {
	                         		
        	row1.maint_activ_type = routines.system.JDBCUtil.getString(rs_tMysqlInput_3, 17, false);
		                    }
							if(colQtyInRs_tMysqlInput_3 < 18) {
								row1.created_at = null;
							} else {
										
	        if(rs_tMysqlInput_3.getString(18) != null) {
	            String dateString_tMysqlInput_3 = rs_tMysqlInput_3.getString(18);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_3) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_3)) {
	                row1.created_at = rs_tMysqlInput_3.getTimestamp(18);
	            } else {
	                row1.created_at = (java.util.Date) year0_tMysqlInput_3.clone();
	            }
	        } else {
	            row1.created_at =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_3 < 19) {
								row1.updated_at = null;
							} else {
										
	        if(rs_tMysqlInput_3.getString(19) != null) {
	            String dateString_tMysqlInput_3 = rs_tMysqlInput_3.getString(19);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_3) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_3)) {
	                row1.updated_at = rs_tMysqlInput_3.getTimestamp(19);
	            } else {
	                row1.updated_at = (java.util.Date) year0_tMysqlInput_3.clone();
	            }
	        } else {
	            row1.updated_at =  null;
	        }			 
		                    }
					

 



/**
 * [tMysqlInput_3 begin ] stop
 */
	
	/**
	 * [tMysqlInput_3 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

 


	tos_count_tMysqlInput_3++;

/**
 * [tMysqlInput_3 main ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;
Var.snapshot_date = (Date)globalMap.get("snapshotdate") ;
Var.snapshot_pid = (String)globalMap.get("snapshotpid") ;// ###############################
        // ###############################
        // # Output tables

fg1 = null;


// # Output table : 'fg1'
fg1_tmp.work_order_number = row1.work_order_number;
fg1_tmp.functional_location = row1.functional_location;
fg1_tmp.facility_id = row1.facility_id;
fg1_tmp.barrier_element_id = row1.barrier_element_id;
fg1_tmp.barrier_type_id = row1.barrier_type_id;
fg1_tmp.barrier_metric_id = row1.barrier_metric_id;
fg1_tmp.rag_status = row1.rag_status;
fg1_tmp.planner_group_id = row1.planner_group_id;
fg1_tmp.abc_indicator_id = row1.abc_indicator_id;
fg1_tmp.work_order_description = row1.work_order_description;
fg1_tmp.order_type = row1.order_type;
fg1_tmp.user_status = row1.user_status;
fg1_tmp.awaiting_deferment = row1.awaiting_deferrment ;
fg1_tmp.deferred = row1.deferred;
fg1_tmp.work_centre = row1.work_centre;
fg1_tmp.latest_allowable_finish_date = row1.latest_allowable_finish_date;
fg1_tmp.maint_activ_type = row1.maint_activ_type;
fg1_tmp.snapshot_date = Var.snapshot_date ;
fg1_tmp.snapshot_pid = Var.snapshot_pid ;
fg1_tmp.created_at = row1.created_at;
fg1_tmp.updated_at = row1.updated_at;
fg1_tmp.version_no = 0;
fg1_tmp.current_flag = 0;
fg1_tmp.start_dt = null;
fg1_tmp.end_dt = null;
fg1 = fg1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
// Start of branch "fg1"
if(fg1 != null) { 



	
	/**
	 * [tMysqlSCD_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlSCD_1";

	

			//fg1
			//fg1


			
				if(execStat){
					runStat.updateStatOnConnection("fg1"+iterateId,1, 1);
				} 
			

		

	try {
        lookUpKey_tMysqlSCD_1 = new SCDSK_tMysqlSCD_1();
            lookUpKey_tMysqlSCD_1.work_order_number = fg1.work_order_number;
            lookUpKey_tMysqlSCD_1.facility_id = fg1.facility_id;
        lookUpKey_tMysqlSCD_1.hashCodeDirty = true;
        lookUpValue_tMysqlSCD_1 = cache_tMysqlSCD_1.get(lookUpKey_tMysqlSCD_1);    
    if(lookUpValue_tMysqlSCD_1 == null) {
            lookUpValue_tMysqlSCD_1 = new SCDStruct_tMysqlSCD_1();
                lookUpValue_tMysqlSCD_1.version_no = 1;
        
                    if(fg1.work_order_number == null) {
insertionStatement_tMysqlSCD_1.setNull(1, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(1, fg1.work_order_number);
}

                    insertionStatement_tMysqlSCD_1.setInt(2, fg1.facility_id);

                    if(fg1.updated_at == null) {
insertionStatement_tMysqlSCD_1.setNull(3, java.sql.Types.DATE);
} else {
if(fg1.updated_at != null) {
date_tMysqlSCD_1 = fg1.updated_at.getTime();
if(date_tMysqlSCD_1 < year1_tMysqlSCD_1 || date_tMysqlSCD_1 >= year10000_tMysqlSCD_1) {
insertionStatement_tMysqlSCD_1.setString(3, "0000-00-00 00:00:00");
} else {
insertionStatement_tMysqlSCD_1.setTimestamp(3, new java.sql.Timestamp(date_tMysqlSCD_1));
}
} else {
insertionStatement_tMysqlSCD_1.setNull(3, java.sql.Types.DATE);
}
}

                    if(fg1.created_at == null) {
insertionStatement_tMysqlSCD_1.setNull(4, java.sql.Types.DATE);
} else {
if(fg1.created_at != null) {
date_tMysqlSCD_1 = fg1.created_at.getTime();
if(date_tMysqlSCD_1 < year1_tMysqlSCD_1 || date_tMysqlSCD_1 >= year10000_tMysqlSCD_1) {
insertionStatement_tMysqlSCD_1.setString(4, "0000-00-00 00:00:00");
} else {
insertionStatement_tMysqlSCD_1.setTimestamp(4, new java.sql.Timestamp(date_tMysqlSCD_1));
}
} else {
insertionStatement_tMysqlSCD_1.setNull(4, java.sql.Types.DATE);
}
}

                    if(fg1.abc_indicator_id == null) {
insertionStatement_tMysqlSCD_1.setNull(5, java.sql.Types.INTEGER);
} else {
insertionStatement_tMysqlSCD_1.setInt(5, fg1.abc_indicator_id);
}

                    if(fg1.awaiting_deferment == null) {
insertionStatement_tMysqlSCD_1.setNull(6, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(6, fg1.awaiting_deferment);
}

                    if(fg1.barrier_element_id == null) {
insertionStatement_tMysqlSCD_1.setNull(7, java.sql.Types.INTEGER);
} else {
insertionStatement_tMysqlSCD_1.setInt(7, fg1.barrier_element_id);
}

                    if(fg1.barrier_metric_id == null) {
insertionStatement_tMysqlSCD_1.setNull(8, java.sql.Types.INTEGER);
} else {
insertionStatement_tMysqlSCD_1.setInt(8, fg1.barrier_metric_id);
}

                    if(fg1.barrier_type_id == null) {
insertionStatement_tMysqlSCD_1.setNull(9, java.sql.Types.INTEGER);
} else {
insertionStatement_tMysqlSCD_1.setInt(9, fg1.barrier_type_id);
}

                    if(fg1.deferred == null) {
insertionStatement_tMysqlSCD_1.setNull(10, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(10, fg1.deferred);
}

                    if(fg1.functional_location == null) {
insertionStatement_tMysqlSCD_1.setNull(11, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(11, fg1.functional_location);
}

                    if(fg1.latest_allowable_finish_date == null) {
insertionStatement_tMysqlSCD_1.setNull(12, java.sql.Types.DATE);
} else {
if(fg1.latest_allowable_finish_date != null) {
date_tMysqlSCD_1 = fg1.latest_allowable_finish_date.getTime();
if(date_tMysqlSCD_1 < year1_tMysqlSCD_1 || date_tMysqlSCD_1 >= year10000_tMysqlSCD_1) {
insertionStatement_tMysqlSCD_1.setString(12, "0000-00-00 00:00:00");
} else {
insertionStatement_tMysqlSCD_1.setTimestamp(12, new java.sql.Timestamp(date_tMysqlSCD_1));
}
} else {
insertionStatement_tMysqlSCD_1.setNull(12, java.sql.Types.DATE);
}
}

                    if(fg1.maint_activ_type == null) {
insertionStatement_tMysqlSCD_1.setNull(13, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(13, fg1.maint_activ_type);
}

                    if(fg1.order_type == null) {
insertionStatement_tMysqlSCD_1.setNull(14, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(14, fg1.order_type);
}

                    if(fg1.planner_group_id == null) {
insertionStatement_tMysqlSCD_1.setNull(15, java.sql.Types.INTEGER);
} else {
insertionStatement_tMysqlSCD_1.setInt(15, fg1.planner_group_id);
}

                    if(fg1.snapshot_date == null) {
insertionStatement_tMysqlSCD_1.setNull(16, java.sql.Types.DATE);
} else {
if(fg1.snapshot_date != null) {
date_tMysqlSCD_1 = fg1.snapshot_date.getTime();
if(date_tMysqlSCD_1 < year1_tMysqlSCD_1 || date_tMysqlSCD_1 >= year10000_tMysqlSCD_1) {
insertionStatement_tMysqlSCD_1.setString(16, "0000-00-00 00:00:00");
} else {
insertionStatement_tMysqlSCD_1.setTimestamp(16, new java.sql.Timestamp(date_tMysqlSCD_1));
}
} else {
insertionStatement_tMysqlSCD_1.setNull(16, java.sql.Types.DATE);
}
}

                    if(fg1.snapshot_pid == null) {
insertionStatement_tMysqlSCD_1.setNull(17, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(17, fg1.snapshot_pid);
}

                    if(fg1.rag_status == null) {
insertionStatement_tMysqlSCD_1.setNull(18, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(18, fg1.rag_status);
}

                    if(fg1.user_status == null) {
insertionStatement_tMysqlSCD_1.setNull(19, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(19, fg1.user_status);
}

                    if(fg1.work_centre == null) {
insertionStatement_tMysqlSCD_1.setNull(20, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(20, fg1.work_centre);
}

                    if(fg1.work_order_description == null) {
insertionStatement_tMysqlSCD_1.setNull(21, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(21, fg1.work_order_description);
}

                int version_tMysqlSCD_1 = 1;
                insertionStatement_tMysqlSCD_1.setInt(22, version_tMysqlSCD_1);

        nb_line_inserted_tMysqlSCD_1 += insertionStatement_tMysqlSCD_1.executeUpdate();
    } else {
            if((lookUpValue_tMysqlSCD_1.abc_indicator_id == null && fg1.abc_indicator_id!= null) || (lookUpValue_tMysqlSCD_1.abc_indicator_id != null && !lookUpValue_tMysqlSCD_1.abc_indicator_id.equals(fg1.abc_indicator_id)) || (lookUpValue_tMysqlSCD_1.awaiting_deferment == null && fg1.awaiting_deferment!= null) || (lookUpValue_tMysqlSCD_1.awaiting_deferment != null && !lookUpValue_tMysqlSCD_1.awaiting_deferment.equals(fg1.awaiting_deferment)) || (lookUpValue_tMysqlSCD_1.barrier_element_id == null && fg1.barrier_element_id!= null) || (lookUpValue_tMysqlSCD_1.barrier_element_id != null && !lookUpValue_tMysqlSCD_1.barrier_element_id.equals(fg1.barrier_element_id)) || (lookUpValue_tMysqlSCD_1.barrier_metric_id == null && fg1.barrier_metric_id!= null) || (lookUpValue_tMysqlSCD_1.barrier_metric_id != null && !lookUpValue_tMysqlSCD_1.barrier_metric_id.equals(fg1.barrier_metric_id)) || (lookUpValue_tMysqlSCD_1.barrier_type_id == null && fg1.barrier_type_id!= null) || (lookUpValue_tMysqlSCD_1.barrier_type_id != null && !lookUpValue_tMysqlSCD_1.barrier_type_id.equals(fg1.barrier_type_id)) || (lookUpValue_tMysqlSCD_1.deferred == null && fg1.deferred!= null) || (lookUpValue_tMysqlSCD_1.deferred != null && !lookUpValue_tMysqlSCD_1.deferred.equals(fg1.deferred)) || (lookUpValue_tMysqlSCD_1.functional_location == null && fg1.functional_location!= null) || (lookUpValue_tMysqlSCD_1.functional_location != null && !lookUpValue_tMysqlSCD_1.functional_location.equals(fg1.functional_location)) || (lookUpValue_tMysqlSCD_1.latest_allowable_finish_date == null && fg1.latest_allowable_finish_date!= null) || ( ( lookUpValue_tMysqlSCD_1.latest_allowable_finish_date != null && fg1.latest_allowable_finish_date!= null ) && ( (( lookUpValue_tMysqlSCD_1.latest_allowable_finish_date.getTime()-fg1.latest_allowable_finish_date.getTime()) > 999) || (( lookUpValue_tMysqlSCD_1.latest_allowable_finish_date.getTime()-fg1.latest_allowable_finish_date.getTime() ) < -999) ))  || (lookUpValue_tMysqlSCD_1.maint_activ_type == null && fg1.maint_activ_type!= null) || (lookUpValue_tMysqlSCD_1.maint_activ_type != null && !lookUpValue_tMysqlSCD_1.maint_activ_type.equals(fg1.maint_activ_type)) || (lookUpValue_tMysqlSCD_1.order_type == null && fg1.order_type!= null) || (lookUpValue_tMysqlSCD_1.order_type != null && !lookUpValue_tMysqlSCD_1.order_type.equals(fg1.order_type)) || (lookUpValue_tMysqlSCD_1.planner_group_id == null && fg1.planner_group_id!= null) || (lookUpValue_tMysqlSCD_1.planner_group_id != null && !lookUpValue_tMysqlSCD_1.planner_group_id.equals(fg1.planner_group_id)) || (lookUpValue_tMysqlSCD_1.snapshot_date == null && fg1.snapshot_date!= null) || ( ( lookUpValue_tMysqlSCD_1.snapshot_date != null && fg1.snapshot_date!= null ) && ( (( lookUpValue_tMysqlSCD_1.snapshot_date.getTime()-fg1.snapshot_date.getTime()) > 999) || (( lookUpValue_tMysqlSCD_1.snapshot_date.getTime()-fg1.snapshot_date.getTime() ) < -999) ))  || (lookUpValue_tMysqlSCD_1.snapshot_pid == null && fg1.snapshot_pid!= null) || (lookUpValue_tMysqlSCD_1.snapshot_pid != null && !lookUpValue_tMysqlSCD_1.snapshot_pid.equals(fg1.snapshot_pid)) || (lookUpValue_tMysqlSCD_1.rag_status == null && fg1.rag_status!= null) || (lookUpValue_tMysqlSCD_1.rag_status != null && !lookUpValue_tMysqlSCD_1.rag_status.equals(fg1.rag_status)) || (lookUpValue_tMysqlSCD_1.user_status == null && fg1.user_status!= null) || (lookUpValue_tMysqlSCD_1.user_status != null && !lookUpValue_tMysqlSCD_1.user_status.equals(fg1.user_status)) || (lookUpValue_tMysqlSCD_1.work_centre == null && fg1.work_centre!= null) || (lookUpValue_tMysqlSCD_1.work_centre != null && !lookUpValue_tMysqlSCD_1.work_centre.equals(fg1.work_centre)) || (lookUpValue_tMysqlSCD_1.work_order_description == null && fg1.work_order_description!= null) || (lookUpValue_tMysqlSCD_1.work_order_description != null && !lookUpValue_tMysqlSCD_1.work_order_description.equals(fg1.work_order_description))) {
                    if(fg1.work_order_number == null) {
updateForType2_tMysqlSCD_1.setNull(2, java.sql.Types.VARCHAR);
} else {
updateForType2_tMysqlSCD_1.setString(2, fg1.work_order_number);
}

                    updateForType2_tMysqlSCD_1.setInt(3, fg1.facility_id);

                nb_line_update_tMysqlSCD_1 += updateForType2_tMysqlSCD_1.executeUpdate();
                            if(fg1.work_order_number == null) {
insertionStatement_tMysqlSCD_1.setNull(1, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(1, fg1.work_order_number);
}

                            insertionStatement_tMysqlSCD_1.setInt(2, fg1.facility_id);

                            if(fg1.updated_at == null) {
insertionStatement_tMysqlSCD_1.setNull(3, java.sql.Types.DATE);
} else {
if(fg1.updated_at != null) {
date_tMysqlSCD_1 = fg1.updated_at.getTime();
if(date_tMysqlSCD_1 < year1_tMysqlSCD_1 || date_tMysqlSCD_1 >= year10000_tMysqlSCD_1) {
insertionStatement_tMysqlSCD_1.setString(3, "0000-00-00 00:00:00");
} else {
insertionStatement_tMysqlSCD_1.setTimestamp(3, new java.sql.Timestamp(date_tMysqlSCD_1));
}
} else {
insertionStatement_tMysqlSCD_1.setNull(3, java.sql.Types.DATE);
}
}

                            if(fg1.created_at == null) {
insertionStatement_tMysqlSCD_1.setNull(4, java.sql.Types.DATE);
} else {
if(fg1.created_at != null) {
date_tMysqlSCD_1 = fg1.created_at.getTime();
if(date_tMysqlSCD_1 < year1_tMysqlSCD_1 || date_tMysqlSCD_1 >= year10000_tMysqlSCD_1) {
insertionStatement_tMysqlSCD_1.setString(4, "0000-00-00 00:00:00");
} else {
insertionStatement_tMysqlSCD_1.setTimestamp(4, new java.sql.Timestamp(date_tMysqlSCD_1));
}
} else {
insertionStatement_tMysqlSCD_1.setNull(4, java.sql.Types.DATE);
}
}

                            if(fg1.abc_indicator_id == null) {
insertionStatement_tMysqlSCD_1.setNull(5, java.sql.Types.INTEGER);
} else {
insertionStatement_tMysqlSCD_1.setInt(5, fg1.abc_indicator_id);
}

                            if(fg1.awaiting_deferment == null) {
insertionStatement_tMysqlSCD_1.setNull(6, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(6, fg1.awaiting_deferment);
}

                            if(fg1.barrier_element_id == null) {
insertionStatement_tMysqlSCD_1.setNull(7, java.sql.Types.INTEGER);
} else {
insertionStatement_tMysqlSCD_1.setInt(7, fg1.barrier_element_id);
}

                            if(fg1.barrier_metric_id == null) {
insertionStatement_tMysqlSCD_1.setNull(8, java.sql.Types.INTEGER);
} else {
insertionStatement_tMysqlSCD_1.setInt(8, fg1.barrier_metric_id);
}

                            if(fg1.barrier_type_id == null) {
insertionStatement_tMysqlSCD_1.setNull(9, java.sql.Types.INTEGER);
} else {
insertionStatement_tMysqlSCD_1.setInt(9, fg1.barrier_type_id);
}

                            if(fg1.deferred == null) {
insertionStatement_tMysqlSCD_1.setNull(10, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(10, fg1.deferred);
}

                            if(fg1.functional_location == null) {
insertionStatement_tMysqlSCD_1.setNull(11, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(11, fg1.functional_location);
}

                            if(fg1.latest_allowable_finish_date == null) {
insertionStatement_tMysqlSCD_1.setNull(12, java.sql.Types.DATE);
} else {
if(fg1.latest_allowable_finish_date != null) {
date_tMysqlSCD_1 = fg1.latest_allowable_finish_date.getTime();
if(date_tMysqlSCD_1 < year1_tMysqlSCD_1 || date_tMysqlSCD_1 >= year10000_tMysqlSCD_1) {
insertionStatement_tMysqlSCD_1.setString(12, "0000-00-00 00:00:00");
} else {
insertionStatement_tMysqlSCD_1.setTimestamp(12, new java.sql.Timestamp(date_tMysqlSCD_1));
}
} else {
insertionStatement_tMysqlSCD_1.setNull(12, java.sql.Types.DATE);
}
}

                            if(fg1.maint_activ_type == null) {
insertionStatement_tMysqlSCD_1.setNull(13, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(13, fg1.maint_activ_type);
}

                            if(fg1.order_type == null) {
insertionStatement_tMysqlSCD_1.setNull(14, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(14, fg1.order_type);
}

                            if(fg1.planner_group_id == null) {
insertionStatement_tMysqlSCD_1.setNull(15, java.sql.Types.INTEGER);
} else {
insertionStatement_tMysqlSCD_1.setInt(15, fg1.planner_group_id);
}

                            if(fg1.snapshot_date == null) {
insertionStatement_tMysqlSCD_1.setNull(16, java.sql.Types.DATE);
} else {
if(fg1.snapshot_date != null) {
date_tMysqlSCD_1 = fg1.snapshot_date.getTime();
if(date_tMysqlSCD_1 < year1_tMysqlSCD_1 || date_tMysqlSCD_1 >= year10000_tMysqlSCD_1) {
insertionStatement_tMysqlSCD_1.setString(16, "0000-00-00 00:00:00");
} else {
insertionStatement_tMysqlSCD_1.setTimestamp(16, new java.sql.Timestamp(date_tMysqlSCD_1));
}
} else {
insertionStatement_tMysqlSCD_1.setNull(16, java.sql.Types.DATE);
}
}

                            if(fg1.snapshot_pid == null) {
insertionStatement_tMysqlSCD_1.setNull(17, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(17, fg1.snapshot_pid);
}

                            if(fg1.rag_status == null) {
insertionStatement_tMysqlSCD_1.setNull(18, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(18, fg1.rag_status);
}

                            if(fg1.user_status == null) {
insertionStatement_tMysqlSCD_1.setNull(19, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(19, fg1.user_status);
}

                            if(fg1.work_centre == null) {
insertionStatement_tMysqlSCD_1.setNull(20, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(20, fg1.work_centre);
}

                            if(fg1.work_order_description == null) {
insertionStatement_tMysqlSCD_1.setNull(21, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(21, fg1.work_order_description);
}

                        int maxVersion_tMysqlSCD_1 = lookUpValue_tMysqlSCD_1.version_no + 1;
                            lookUpValue_tMysqlSCD_1.version_no = lookUpValue_tMysqlSCD_1.version_no + 1;                            
                        insertionStatement_tMysqlSCD_1.setInt(22, maxVersion_tMysqlSCD_1);

                nb_line_inserted_tMysqlSCD_1 += insertionStatement_tMysqlSCD_1.executeUpdate();
            }
    }
    
	} catch (java.lang.Exception e) {//catch
  		
                System.err.print(e.getMessage());
	}//end catch
                lookUpValue_tMysqlSCD_1.abc_indicator_id = fg1.abc_indicator_id;
                lookUpValue_tMysqlSCD_1.awaiting_deferment = fg1.awaiting_deferment;
                lookUpValue_tMysqlSCD_1.barrier_element_id = fg1.barrier_element_id;
                lookUpValue_tMysqlSCD_1.barrier_metric_id = fg1.barrier_metric_id;
                lookUpValue_tMysqlSCD_1.barrier_type_id = fg1.barrier_type_id;
                lookUpValue_tMysqlSCD_1.deferred = fg1.deferred;
                lookUpValue_tMysqlSCD_1.functional_location = fg1.functional_location;
                lookUpValue_tMysqlSCD_1.latest_allowable_finish_date = fg1.latest_allowable_finish_date;
                lookUpValue_tMysqlSCD_1.maint_activ_type = fg1.maint_activ_type;
                lookUpValue_tMysqlSCD_1.order_type = fg1.order_type;
                lookUpValue_tMysqlSCD_1.planner_group_id = fg1.planner_group_id;
                lookUpValue_tMysqlSCD_1.snapshot_date = fg1.snapshot_date;
                lookUpValue_tMysqlSCD_1.snapshot_pid = fg1.snapshot_pid;
                lookUpValue_tMysqlSCD_1.rag_status = fg1.rag_status;
                lookUpValue_tMysqlSCD_1.user_status = fg1.user_status;
                lookUpValue_tMysqlSCD_1.work_centre = fg1.work_centre;
                lookUpValue_tMysqlSCD_1.work_order_description = fg1.work_order_description;
        cache_tMysqlSCD_1.put(lookUpKey_tMysqlSCD_1, lookUpValue_tMysqlSCD_1);

 


	tos_count_tMysqlSCD_1++;

/**
 * [tMysqlSCD_1 main ] stop
 */

} // End of branch "fg1"







	
	/**
	 * [tMysqlInput_3 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

	}
}finally{
	if(rs_tMysqlInput_3 !=null){
		rs_tMysqlInput_3.close();
	}
	stmt_tMysqlInput_3.close();
		if(conn_tMysqlInput_3 != null && !conn_tMysqlInput_3.isClosed()) {
			
			conn_tMysqlInput_3.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_3_NB_LINE",nb_line_tMysqlInput_3);
		


 

ok_Hash.put("tMysqlInput_3", true);
end_Hash.put("tMysqlInput_3", System.currentTimeMillis());




/**
 * [tMysqlInput_3 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMysqlSCD_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlSCD_1";

	

    insertionStatement_tMysqlSCD_1.close();
        updateForType2_tMysqlSCD_1.close();
        if(connection_tMysqlSCD_1 != null && !connection_tMysqlSCD_1.isClosed()) {
            connection_tMysqlSCD_1.close();
        }
    globalMap.put("tMysqlSCD_1_NB_LINE_UPDATED", nb_line_update_tMysqlSCD_1);
    globalMap.put("tMysqlSCD_1_NB_LINE_INSERTED", nb_line_inserted_tMysqlSCD_1);
    globalMap.put("tMysqlSCD_1_NB_LINE_REJECTED",nb_line_rejected_tMysqlSCD_1);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("fg1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlSCD_1", true);
end_Hash.put("tMysqlSCD_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tMysqlInput_1Process(globalMap);



/**
 * [tMysqlSCD_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_3 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

 



/**
 * [tMysqlInput_3 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMysqlSCD_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlSCD_1";

	

 



/**
 * [tMysqlSCD_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class njhStruct implements routines.system.IPersistableRow<njhStruct> {
    final static byte[] commonByteArrayLock_BARRIER_PROJECT_refresh_work_order_level_data = new byte[0];
    static byte[] commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date snapshot_date;

				public java.util.Date getSnapshot_date () {
					return this.snapshot_date;
				}
				
			    public String work_order_number;

				public String getWork_order_number () {
					return this.work_order_number;
				}
				
			    public boolean current_flag;

				public boolean getCurrent_flag () {
					return this.current_flag;
				}
				
			    public int facility_id;

				public int getFacility_id () {
					return this.facility_id;
				}
				
			    public String functional_location;

				public String getFunctional_location () {
					return this.functional_location;
				}
				
			    public Integer barrier_element_id;

				public Integer getBarrier_element_id () {
					return this.barrier_element_id;
				}
				
			    public Integer barrier_type_id;

				public Integer getBarrier_type_id () {
					return this.barrier_type_id;
				}
				
			    public Integer barrier_metric_id;

				public Integer getBarrier_metric_id () {
					return this.barrier_metric_id;
				}
				
			    public String rag_status;

				public String getRag_status () {
					return this.rag_status;
				}
				
			    public Integer planner_group_id;

				public Integer getPlanner_group_id () {
					return this.planner_group_id;
				}
				
			    public Integer abc_indicator_id;

				public Integer getAbc_indicator_id () {
					return this.abc_indicator_id;
				}
				
			    public String work_order_description;

				public String getWork_order_description () {
					return this.work_order_description;
				}
				
			    public String order_type;

				public String getOrder_type () {
					return this.order_type;
				}
				
			    public String user_status;

				public String getUser_status () {
					return this.user_status;
				}
				
			    public String awaiting_deferment;

				public String getAwaiting_deferment () {
					return this.awaiting_deferment;
				}
				
			    public String deferred;

				public String getDeferred () {
					return this.deferred;
				}
				
			    public String work_centre;

				public String getWork_centre () {
					return this.work_centre;
				}
				
			    public java.util.Date latest_allowable_finish_date;

				public java.util.Date getLatest_allowable_finish_date () {
					return this.latest_allowable_finish_date;
				}
				
			    public String maint_activ_type;

				public String getMaint_activ_type () {
					return this.maint_activ_type;
				}
				
			    public java.util.Date created_at;

				public java.util.Date getCreated_at () {
					return this.created_at;
				}
				
			    public java.util.Date updated_at;

				public java.util.Date getUpdated_at () {
					return this.updated_at;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.snapshot_date == null) ? 0 : this.snapshot_date.hashCode());
					
						result = prime * result + ((this.work_order_number == null) ? 0 : this.work_order_number.hashCode());
					
		        			result = prime * result + (this.current_flag ? 1231 : 1237);
						
							result = prime * result + (int) this.facility_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final njhStruct other = (njhStruct) obj;
		
						if (this.snapshot_date == null) {
							if (other.snapshot_date != null)
								return false;
						
						} else if (!this.snapshot_date.equals(other.snapshot_date))
						
							return false;
					
						if (this.work_order_number == null) {
							if (other.work_order_number != null)
								return false;
						
						} else if (!this.work_order_number.equals(other.work_order_number))
						
							return false;
					
						if (this.current_flag != other.current_flag)
							return false;
					
						if (this.facility_id != other.facility_id)
							return false;
					

		return true;
    }

	public void copyDataTo(njhStruct other) {

		other.snapshot_date = this.snapshot_date;
	            other.work_order_number = this.work_order_number;
	            other.current_flag = this.current_flag;
	            other.facility_id = this.facility_id;
	            other.functional_location = this.functional_location;
	            other.barrier_element_id = this.barrier_element_id;
	            other.barrier_type_id = this.barrier_type_id;
	            other.barrier_metric_id = this.barrier_metric_id;
	            other.rag_status = this.rag_status;
	            other.planner_group_id = this.planner_group_id;
	            other.abc_indicator_id = this.abc_indicator_id;
	            other.work_order_description = this.work_order_description;
	            other.order_type = this.order_type;
	            other.user_status = this.user_status;
	            other.awaiting_deferment = this.awaiting_deferment;
	            other.deferred = this.deferred;
	            other.work_centre = this.work_centre;
	            other.latest_allowable_finish_date = this.latest_allowable_finish_date;
	            other.maint_activ_type = this.maint_activ_type;
	            other.created_at = this.created_at;
	            other.updated_at = this.updated_at;
	            
	}

	public void copyKeysDataTo(njhStruct other) {

		other.snapshot_date = this.snapshot_date;
	            	other.work_order_number = this.work_order_number;
	            	other.current_flag = this.current_flag;
	            	other.facility_id = this.facility_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data.length) {
				if(length < 1024 && commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data.length == 0) {
   					commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data = new byte[1024];
				} else {
   					commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data, 0, length);
			strReturn = new String(commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BARRIER_PROJECT_refresh_work_order_level_data) {

        	try {

        		int length = 0;
		
					this.snapshot_date = readDate(dis);
					
					this.work_order_number = readString(dis);
					
			        this.current_flag = dis.readBoolean();
					
			        this.facility_id = dis.readInt();
					
					this.functional_location = readString(dis);
					
						this.barrier_element_id = readInteger(dis);
					
						this.barrier_type_id = readInteger(dis);
					
						this.barrier_metric_id = readInteger(dis);
					
					this.rag_status = readString(dis);
					
						this.planner_group_id = readInteger(dis);
					
						this.abc_indicator_id = readInteger(dis);
					
					this.work_order_description = readString(dis);
					
					this.order_type = readString(dis);
					
					this.user_status = readString(dis);
					
					this.awaiting_deferment = readString(dis);
					
					this.deferred = readString(dis);
					
					this.work_centre = readString(dis);
					
					this.latest_allowable_finish_date = readDate(dis);
					
					this.maint_activ_type = readString(dis);
					
					this.created_at = readDate(dis);
					
					this.updated_at = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.snapshot_date,dos);
					
					// String
				
						writeString(this.work_order_number,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.current_flag);
					
					// int
				
		            	dos.writeInt(this.facility_id);
					
					// String
				
						writeString(this.functional_location,dos);
					
					// Integer
				
						writeInteger(this.barrier_element_id,dos);
					
					// Integer
				
						writeInteger(this.barrier_type_id,dos);
					
					// Integer
				
						writeInteger(this.barrier_metric_id,dos);
					
					// String
				
						writeString(this.rag_status,dos);
					
					// Integer
				
						writeInteger(this.planner_group_id,dos);
					
					// Integer
				
						writeInteger(this.abc_indicator_id,dos);
					
					// String
				
						writeString(this.work_order_description,dos);
					
					// String
				
						writeString(this.order_type,dos);
					
					// String
				
						writeString(this.user_status,dos);
					
					// String
				
						writeString(this.awaiting_deferment,dos);
					
					// String
				
						writeString(this.deferred,dos);
					
					// String
				
						writeString(this.work_centre,dos);
					
					// java.util.Date
				
						writeDate(this.latest_allowable_finish_date,dos);
					
					// String
				
						writeString(this.maint_activ_type,dos);
					
					// java.util.Date
				
						writeDate(this.created_at,dos);
					
					// java.util.Date
				
						writeDate(this.updated_at,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("snapshot_date="+String.valueOf(snapshot_date));
		sb.append(",work_order_number="+work_order_number);
		sb.append(",current_flag="+String.valueOf(current_flag));
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",functional_location="+functional_location);
		sb.append(",barrier_element_id="+String.valueOf(barrier_element_id));
		sb.append(",barrier_type_id="+String.valueOf(barrier_type_id));
		sb.append(",barrier_metric_id="+String.valueOf(barrier_metric_id));
		sb.append(",rag_status="+rag_status);
		sb.append(",planner_group_id="+String.valueOf(planner_group_id));
		sb.append(",abc_indicator_id="+String.valueOf(abc_indicator_id));
		sb.append(",work_order_description="+work_order_description);
		sb.append(",order_type="+order_type);
		sb.append(",user_status="+user_status);
		sb.append(",awaiting_deferment="+awaiting_deferment);
		sb.append(",deferred="+deferred);
		sb.append(",work_centre="+work_centre);
		sb.append(",latest_allowable_finish_date="+String.valueOf(latest_allowable_finish_date));
		sb.append(",maint_activ_type="+maint_activ_type);
		sb.append(",created_at="+String.valueOf(created_at));
		sb.append(",updated_at="+String.valueOf(updated_at));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(njhStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.snapshot_date, other.snapshot_date);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.work_order_number, other.work_order_number);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.current_flag, other.current_flag);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.facility_id, other.facility_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_BARRIER_PROJECT_refresh_work_order_level_data = new byte[0];
    static byte[] commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data = new byte[0];

	
			    public String work_order_number;

				public String getWork_order_number () {
					return this.work_order_number;
				}
				
			    public String functional_location;

				public String getFunctional_location () {
					return this.functional_location;
				}
				
			    public int facility_id;

				public int getFacility_id () {
					return this.facility_id;
				}
				
			    public Integer barrier_element_id;

				public Integer getBarrier_element_id () {
					return this.barrier_element_id;
				}
				
			    public Integer barrier_type_id;

				public Integer getBarrier_type_id () {
					return this.barrier_type_id;
				}
				
			    public Integer barrier_metric_id;

				public Integer getBarrier_metric_id () {
					return this.barrier_metric_id;
				}
				
			    public String rag_status;

				public String getRag_status () {
					return this.rag_status;
				}
				
			    public Integer planner_group_id;

				public Integer getPlanner_group_id () {
					return this.planner_group_id;
				}
				
			    public Integer abc_indicator_id;

				public Integer getAbc_indicator_id () {
					return this.abc_indicator_id;
				}
				
			    public String work_order_description;

				public String getWork_order_description () {
					return this.work_order_description;
				}
				
			    public String order_type;

				public String getOrder_type () {
					return this.order_type;
				}
				
			    public String user_status;

				public String getUser_status () {
					return this.user_status;
				}
				
			    public String awaiting_deferment;

				public String getAwaiting_deferment () {
					return this.awaiting_deferment;
				}
				
			    public String deferred;

				public String getDeferred () {
					return this.deferred;
				}
				
			    public String work_centre;

				public String getWork_centre () {
					return this.work_centre;
				}
				
			    public java.util.Date latest_allowable_finish_date;

				public java.util.Date getLatest_allowable_finish_date () {
					return this.latest_allowable_finish_date;
				}
				
			    public String maint_activ_type;

				public String getMaint_activ_type () {
					return this.maint_activ_type;
				}
				
			    public java.util.Date snapshot_date;

				public java.util.Date getSnapshot_date () {
					return this.snapshot_date;
				}
				
			    public String snapshot_pid;

				public String getSnapshot_pid () {
					return this.snapshot_pid;
				}
				
			    public java.util.Date created_at;

				public java.util.Date getCreated_at () {
					return this.created_at;
				}
				
			    public java.util.Date updated_at;

				public java.util.Date getUpdated_at () {
					return this.updated_at;
				}
				
			    public int version_no;

				public int getVersion_no () {
					return this.version_no;
				}
				
			    public boolean current_flag;

				public boolean getCurrent_flag () {
					return this.current_flag;
				}
				
			    public java.util.Date start_dt;

				public java.util.Date getStart_dt () {
					return this.start_dt;
				}
				
			    public java.util.Date end_dt;

				public java.util.Date getEnd_dt () {
					return this.end_dt;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data.length) {
				if(length < 1024 && commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data.length == 0) {
   					commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data = new byte[1024];
				} else {
   					commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data, 0, length);
			strReturn = new String(commonByteArray_BARRIER_PROJECT_refresh_work_order_level_data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BARRIER_PROJECT_refresh_work_order_level_data) {

        	try {

        		int length = 0;
		
					this.work_order_number = readString(dis);
					
					this.functional_location = readString(dis);
					
			        this.facility_id = dis.readInt();
					
						this.barrier_element_id = readInteger(dis);
					
						this.barrier_type_id = readInteger(dis);
					
						this.barrier_metric_id = readInteger(dis);
					
					this.rag_status = readString(dis);
					
						this.planner_group_id = readInteger(dis);
					
						this.abc_indicator_id = readInteger(dis);
					
					this.work_order_description = readString(dis);
					
					this.order_type = readString(dis);
					
					this.user_status = readString(dis);
					
					this.awaiting_deferment = readString(dis);
					
					this.deferred = readString(dis);
					
					this.work_centre = readString(dis);
					
					this.latest_allowable_finish_date = readDate(dis);
					
					this.maint_activ_type = readString(dis);
					
					this.snapshot_date = readDate(dis);
					
					this.snapshot_pid = readString(dis);
					
					this.created_at = readDate(dis);
					
					this.updated_at = readDate(dis);
					
			        this.version_no = dis.readInt();
					
			        this.current_flag = dis.readBoolean();
					
					this.start_dt = readDate(dis);
					
					this.end_dt = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.work_order_number,dos);
					
					// String
				
						writeString(this.functional_location,dos);
					
					// int
				
		            	dos.writeInt(this.facility_id);
					
					// Integer
				
						writeInteger(this.barrier_element_id,dos);
					
					// Integer
				
						writeInteger(this.barrier_type_id,dos);
					
					// Integer
				
						writeInteger(this.barrier_metric_id,dos);
					
					// String
				
						writeString(this.rag_status,dos);
					
					// Integer
				
						writeInteger(this.planner_group_id,dos);
					
					// Integer
				
						writeInteger(this.abc_indicator_id,dos);
					
					// String
				
						writeString(this.work_order_description,dos);
					
					// String
				
						writeString(this.order_type,dos);
					
					// String
				
						writeString(this.user_status,dos);
					
					// String
				
						writeString(this.awaiting_deferment,dos);
					
					// String
				
						writeString(this.deferred,dos);
					
					// String
				
						writeString(this.work_centre,dos);
					
					// java.util.Date
				
						writeDate(this.latest_allowable_finish_date,dos);
					
					// String
				
						writeString(this.maint_activ_type,dos);
					
					// java.util.Date
				
						writeDate(this.snapshot_date,dos);
					
					// String
				
						writeString(this.snapshot_pid,dos);
					
					// java.util.Date
				
						writeDate(this.created_at,dos);
					
					// java.util.Date
				
						writeDate(this.updated_at,dos);
					
					// int
				
		            	dos.writeInt(this.version_no);
					
					// boolean
				
		            	dos.writeBoolean(this.current_flag);
					
					// java.util.Date
				
						writeDate(this.start_dt,dos);
					
					// java.util.Date
				
						writeDate(this.end_dt,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("work_order_number="+work_order_number);
		sb.append(",functional_location="+functional_location);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",barrier_element_id="+String.valueOf(barrier_element_id));
		sb.append(",barrier_type_id="+String.valueOf(barrier_type_id));
		sb.append(",barrier_metric_id="+String.valueOf(barrier_metric_id));
		sb.append(",rag_status="+rag_status);
		sb.append(",planner_group_id="+String.valueOf(planner_group_id));
		sb.append(",abc_indicator_id="+String.valueOf(abc_indicator_id));
		sb.append(",work_order_description="+work_order_description);
		sb.append(",order_type="+order_type);
		sb.append(",user_status="+user_status);
		sb.append(",awaiting_deferment="+awaiting_deferment);
		sb.append(",deferred="+deferred);
		sb.append(",work_centre="+work_centre);
		sb.append(",latest_allowable_finish_date="+String.valueOf(latest_allowable_finish_date));
		sb.append(",maint_activ_type="+maint_activ_type);
		sb.append(",snapshot_date="+String.valueOf(snapshot_date));
		sb.append(",snapshot_pid="+snapshot_pid);
		sb.append(",created_at="+String.valueOf(created_at));
		sb.append(",updated_at="+String.valueOf(updated_at));
		sb.append(",version_no="+String.valueOf(version_no));
		sb.append(",current_flag="+String.valueOf(current_flag));
		sb.append(",start_dt="+String.valueOf(start_dt));
		sb.append(",end_dt="+String.valueOf(end_dt));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
njhStruct njh = new njhStruct();





	
	/**
	 * [tMysqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_1", false);
		start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("njh" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_1 = 0;
		
    	class BytesLimit65535_tMysqlOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_1().limitLog4jByte();






int nb_line_tMysqlOutput_1 = 0;
int nb_line_update_tMysqlOutput_1 = 0;
int nb_line_inserted_tMysqlOutput_1 = 0;
int nb_line_deleted_tMysqlOutput_1 = 0;
int nb_line_rejected_tMysqlOutput_1 = 0;

int deletedCount_tMysqlOutput_1=0;
int updatedCount_tMysqlOutput_1=0;
int insertedCount_tMysqlOutput_1=0;

int rejectedCount_tMysqlOutput_1=0;

String tableName_tMysqlOutput_1 = "work_order_level_data";
boolean whetherReject_tMysqlOutput_1 = false;

java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
long date_tMysqlOutput_1;

java.sql.Connection conn_tMysqlOutput_1 = null;
		String dbProperties_tMysqlOutput_1 = context.barrier_AdditionalParams;
		String url_tMysqlOutput_1 = null;
		if(dbProperties_tMysqlOutput_1 == null || dbProperties_tMysqlOutput_1.trim().length() == 0) {
			url_tMysqlOutput_1 = "jdbc:mysql://" + context.barrier_Server + ":" + context.barrier_Port + "/" + context.barrier_Database + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_1 = context.barrier_AdditionalParams;
			if (!properties_tMysqlOutput_1.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_1 = "jdbc:mysql://" + context.barrier_Server + ":" + context.barrier_Port + "/" + context.barrier_Database + "?" + properties_tMysqlOutput_1;
		}
		String driverClass_tMysqlOutput_1 = "org.gjt.mm.mysql.Driver";
		
		String dbUser_tMysqlOutput_1 = context.barrier_Login;
		

		
	final String decryptedPassword_tMysqlOutput_1 = context.barrier_Password; 

		String dbPwd_tMysqlOutput_1 = decryptedPassword_tMysqlOutput_1;
		java.lang.Class.forName(driverClass_tMysqlOutput_1);
		
		conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(url_tMysqlOutput_1, dbUser_tMysqlOutput_1, dbPwd_tMysqlOutput_1);
		
	
	resourceMap.put("conn_tMysqlOutput_1", conn_tMysqlOutput_1);
        conn_tMysqlOutput_1.setAutoCommit(false);
        int commitEvery_tMysqlOutput_1 = 10000;
        int commitCounter_tMysqlOutput_1 = 0;

int count_tMysqlOutput_1=0;
    	
            java.sql.Statement stmtTruncCount_tMysqlOutput_1 = conn_tMysqlOutput_1.createStatement();
            java.sql.ResultSet rsTruncCount_tMysqlOutput_1 = stmtTruncCount_tMysqlOutput_1.executeQuery("SELECT COUNT(1) FROM `" + tableName_tMysqlOutput_1 + "`");
            int rsTruncCountNumber_tMysqlOutput_1 = 0;
            if(rsTruncCount_tMysqlOutput_1.next()) {
                rsTruncCountNumber_tMysqlOutput_1 = rsTruncCount_tMysqlOutput_1.getInt(1);
            }
            rsTruncCount_tMysqlOutput_1.close();
            stmtTruncCount_tMysqlOutput_1.close();
            java.sql.Statement stmtTrunc_tMysqlOutput_1 = conn_tMysqlOutput_1.createStatement();
            stmtTrunc_tMysqlOutput_1.executeUpdate("TRUNCATE TABLE `" + tableName_tMysqlOutput_1 + "`");
            deletedCount_tMysqlOutput_1 += rsTruncCountNumber_tMysqlOutput_1;
            stmtTrunc_tMysqlOutput_1.close();

				String insert_tMysqlOutput_1 = "INSERT INTO `" + "work_order_level_data" + "` (`snapshot_date`,`work_order_number`,`current_flag`,`facility_id`,`functional_location`,`barrier_element_id`,`barrier_type_id`,`barrier_metric_id`,`rag_status`,`planner_group_id`,`abc_indicator_id`,`work_order_description`,`order_type`,`user_status`,`awaiting_deferment`,`deferred`,`work_centre`,`latest_allowable_finish_date`,`maint_activ_type`,`created_at`,`updated_at`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		        int batchSize_tMysqlOutput_1 = 100;
	   			int batchSizeCounter_tMysqlOutput_1=0;
		            
		        java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1.prepareStatement(insert_tMysqlOutput_1);


 



/**
 * [tMysqlOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
njhStruct njh_tmp = new njhStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tMysqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_1", false);
		start_Hash.put("tMysqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_1";

	
		int tos_count_tMysqlInput_1 = 0;
		
    	class BytesLimit65535_tMysqlInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_1().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1.getTime();
		    int nb_line_tMysqlInput_1 = 0;
		    java.sql.Connection conn_tMysqlInput_1 = null;
				String driverClass_tMysqlInput_1 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_1);
			   	String dbUser_tMysqlInput_1 = context.barrier_Login;
			   	
        		
        		
        		
	final String decryptedPassword_tMysqlInput_1 = context.barrier_Password; 
			   	
		        String dbPwd_tMysqlInput_1 = decryptedPassword_tMysqlInput_1;
		        
				
				String url_tMysqlInput_1 = "jdbc:mysql://" + context.barrier_Server + ":" + context.barrier_Port + "/" + context.barrier_Database + "?" + context.barrier_AdditionalParams;
				
				conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(url_tMysqlInput_1,dbUser_tMysqlInput_1,dbPwd_tMysqlInput_1);
		        
		    
			java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1.createStatement();

		    String dbquery_tMysqlInput_1 = "SELECT \n  `work_order_level_data_version`.`work_order_number`, \n  `work_order_level_data_version`.`functional_location`, \n  `work_order_level_data_version`.`facility_id`, \n  `work_order_level_data_version`.`barrier_element_id`, \n  `work_order_level_data_version`.`barrier_type_id`, \n  `work_order_level_data_version`.`barrier_metric_id`, \n  `work_order_level_data_version`.`rag_status`, \n  `work_order_level_data_version`.`planner_group_id`, \n  `work_order_level_data_version`.`abc_indicator_id`, \n  `work_order_level_data_version`.`work_order_description`, \n  `work_order_level_data_version`.`order_type`, \n  `work_order_level_data_version`.`user_status`, \n  `work_order_level_data_version`.`awaiting_deferment`, \n  `work_order_level_data_version`.`deferred`, \n  `work_order_level_data_version`.`work_centre`, \n  `work_order_level_data_version`.`latest_allowable_finish_date`, \n  `work_order_level_data_version`.`maint_activ_type`, \n  `work_order_level_data_version`.`snapshot_date`, \n  `work_order_level_data_version`.`snapshot_pid`, \n  `work_order_level_data_version`.`created_at`, \n  `work_order_level_data_version`.`updated_at`, \n  `work_order_level_data_version`.`version_no`, \n  `work_order_level_data_version`.`current_flag`, \n  `work_order_level_data_version`.`start_dt`, \n  `work_order_level_data_version`.`end_dt`\nFROM `work_order_level_data_version`\nWhere  `work_order_level_data_version`.`current_flag` = 1";
			

                       globalMap.put("tMysqlInput_1_QUERY",dbquery_tMysqlInput_1);

		    java.sql.ResultSet rs_tMysqlInput_1 = null;
		try{
		    rs_tMysqlInput_1 = stmt_tMysqlInput_1.executeQuery(dbquery_tMysqlInput_1);
		    java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1.getMetaData();
		    int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1.getColumnCount();

		    String tmpContent_tMysqlInput_1 = null;
		    
		    
		    while (rs_tMysqlInput_1.next()) {
		        nb_line_tMysqlInput_1++;
		        
							if(colQtyInRs_tMysqlInput_1 < 1) {
								row2.work_order_number = null;
							} else {
	                         		
        	row2.work_order_number = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 1, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 2) {
								row2.functional_location = null;
							} else {
	                         		
        	row2.functional_location = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 2, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 3) {
								row2.facility_id = 0;
							} else {
		                          
            if(rs_tMysqlInput_1.getObject(3) != null) {
                row2.facility_id = rs_tMysqlInput_1.getInt(3);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 4) {
								row2.barrier_element_id = null;
							} else {
		                          
            if(rs_tMysqlInput_1.getObject(4) != null) {
                row2.barrier_element_id = rs_tMysqlInput_1.getInt(4);
            } else {
                    row2.barrier_element_id = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 5) {
								row2.barrier_type_id = null;
							} else {
		                          
            if(rs_tMysqlInput_1.getObject(5) != null) {
                row2.barrier_type_id = rs_tMysqlInput_1.getInt(5);
            } else {
                    row2.barrier_type_id = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 6) {
								row2.barrier_metric_id = null;
							} else {
		                          
            if(rs_tMysqlInput_1.getObject(6) != null) {
                row2.barrier_metric_id = rs_tMysqlInput_1.getInt(6);
            } else {
                    row2.barrier_metric_id = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 7) {
								row2.rag_status = null;
							} else {
	                         		
        	row2.rag_status = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 7, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 8) {
								row2.planner_group_id = null;
							} else {
		                          
            if(rs_tMysqlInput_1.getObject(8) != null) {
                row2.planner_group_id = rs_tMysqlInput_1.getInt(8);
            } else {
                    row2.planner_group_id = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 9) {
								row2.abc_indicator_id = null;
							} else {
		                          
            if(rs_tMysqlInput_1.getObject(9) != null) {
                row2.abc_indicator_id = rs_tMysqlInput_1.getInt(9);
            } else {
                    row2.abc_indicator_id = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 10) {
								row2.work_order_description = null;
							} else {
	                         		
        	row2.work_order_description = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 10, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 11) {
								row2.order_type = null;
							} else {
	                         		
        	row2.order_type = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 11, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 12) {
								row2.user_status = null;
							} else {
	                         		
        	row2.user_status = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 12, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 13) {
								row2.awaiting_deferment = null;
							} else {
	                         		
        	row2.awaiting_deferment = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 13, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 14) {
								row2.deferred = null;
							} else {
	                         		
        	row2.deferred = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 14, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 15) {
								row2.work_centre = null;
							} else {
	                         		
        	row2.work_centre = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 15, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 16) {
								row2.latest_allowable_finish_date = null;
							} else {
										
	        if(rs_tMysqlInput_1.getString(16) != null) {
	            String dateString_tMysqlInput_1 = rs_tMysqlInput_1.getString(16);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_1) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_1)) {
	                row2.latest_allowable_finish_date = rs_tMysqlInput_1.getTimestamp(16);
	            } else {
	                row2.latest_allowable_finish_date = (java.util.Date) year0_tMysqlInput_1.clone();
	            }
	        } else {
	            row2.latest_allowable_finish_date =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_1 < 17) {
								row2.maint_activ_type = null;
							} else {
	                         		
        	row2.maint_activ_type = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 17, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 18) {
								row2.snapshot_date = null;
							} else {
										
	        if(rs_tMysqlInput_1.getString(18) != null) {
	            String dateString_tMysqlInput_1 = rs_tMysqlInput_1.getString(18);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_1) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_1)) {
	                row2.snapshot_date = rs_tMysqlInput_1.getTimestamp(18);
	            } else {
	                row2.snapshot_date = (java.util.Date) year0_tMysqlInput_1.clone();
	            }
	        } else {
	            row2.snapshot_date =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_1 < 19) {
								row2.snapshot_pid = null;
							} else {
	                         		
        	row2.snapshot_pid = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 19, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 20) {
								row2.created_at = null;
							} else {
										
	        if(rs_tMysqlInput_1.getString(20) != null) {
	            String dateString_tMysqlInput_1 = rs_tMysqlInput_1.getString(20);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_1) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_1)) {
	                row2.created_at = rs_tMysqlInput_1.getTimestamp(20);
	            } else {
	                row2.created_at = (java.util.Date) year0_tMysqlInput_1.clone();
	            }
	        } else {
	            row2.created_at =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_1 < 21) {
								row2.updated_at = null;
							} else {
										
	        if(rs_tMysqlInput_1.getString(21) != null) {
	            String dateString_tMysqlInput_1 = rs_tMysqlInput_1.getString(21);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_1) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_1)) {
	                row2.updated_at = rs_tMysqlInput_1.getTimestamp(21);
	            } else {
	                row2.updated_at = (java.util.Date) year0_tMysqlInput_1.clone();
	            }
	        } else {
	            row2.updated_at =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_1 < 22) {
								row2.version_no = 0;
							} else {
		                          
            if(rs_tMysqlInput_1.getObject(22) != null) {
                row2.version_no = rs_tMysqlInput_1.getInt(22);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 23) {
								row2.current_flag = false;
							} else {
	                         		
            if(rs_tMysqlInput_1.getObject(23) != null) {
                row2.current_flag = rs_tMysqlInput_1.getBoolean(23);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 24) {
								row2.start_dt = null;
							} else {
										
	        if(rs_tMysqlInput_1.getString(24) != null) {
	            String dateString_tMysqlInput_1 = rs_tMysqlInput_1.getString(24);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_1) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_1)) {
	                row2.start_dt = rs_tMysqlInput_1.getTimestamp(24);
	            } else {
	                row2.start_dt = (java.util.Date) year0_tMysqlInput_1.clone();
	            }
	        } else {
	            row2.start_dt =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_1 < 25) {
								row2.end_dt = null;
							} else {
										
	        if(rs_tMysqlInput_1.getString(25) != null) {
	            String dateString_tMysqlInput_1 = rs_tMysqlInput_1.getString(25);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_1) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_1)) {
	                row2.end_dt = rs_tMysqlInput_1.getTimestamp(25);
	            } else {
	                row2.end_dt = (java.util.Date) year0_tMysqlInput_1.clone();
	            }
	        } else {
	            row2.end_dt =  null;
	        }			 
		                    }
					

 



/**
 * [tMysqlInput_1 begin ] stop
 */
	
	/**
	 * [tMysqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 


	tos_count_tMysqlInput_1++;

/**
 * [tMysqlInput_1 main ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

njh = null;


// # Output table : 'njh'
njh_tmp.snapshot_date = row2.snapshot_date;
njh_tmp.work_order_number = row2.work_order_number;
njh_tmp.current_flag = row2.current_flag;
njh_tmp.facility_id = row2.facility_id;
njh_tmp.functional_location = row2.functional_location;
njh_tmp.barrier_element_id = row2.barrier_element_id;
njh_tmp.barrier_type_id = row2.barrier_type_id;
njh_tmp.barrier_metric_id = row2.barrier_metric_id;
njh_tmp.rag_status = row2.rag_status;
njh_tmp.planner_group_id = row2.planner_group_id;
njh_tmp.abc_indicator_id = row2.abc_indicator_id;
njh_tmp.work_order_description = row2.work_order_description;
njh_tmp.order_type = row2.order_type;
njh_tmp.user_status = row2.user_status;
njh_tmp.awaiting_deferment = row2.awaiting_deferment;
njh_tmp.deferred = row2.deferred;
njh_tmp.work_centre = row2.work_centre;
njh_tmp.latest_allowable_finish_date = row2.latest_allowable_finish_date;
njh_tmp.maint_activ_type = row2.maint_activ_type;
njh_tmp.created_at = row2.created_at;
njh_tmp.updated_at = row2.updated_at;
njh = njh_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "njh"
if(njh != null) { 



	
	/**
	 * [tMysqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	

			//njh
			//njh


			
				if(execStat){
					runStat.updateStatOnConnection("njh"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_1 = false;
                            if(njh.snapshot_date != null) {
date_tMysqlOutput_1 = njh.snapshot_date.getTime();
if(date_tMysqlOutput_1 < year1_tMysqlOutput_1 || date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
pstmt_tMysqlOutput_1.setString(1, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_1.setTimestamp(1, new java.sql.Timestamp(date_tMysqlOutput_1));
}
} else {
pstmt_tMysqlOutput_1.setNull(1, java.sql.Types.DATE);
}

                            if(njh.work_order_number == null) {
pstmt_tMysqlOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(2, njh.work_order_number);
}

                            pstmt_tMysqlOutput_1.setBoolean(3, njh.current_flag);

                            pstmt_tMysqlOutput_1.setInt(4, njh.facility_id);

                            if(njh.functional_location == null) {
pstmt_tMysqlOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(5, njh.functional_location);
}

                            if(njh.barrier_element_id == null) {
pstmt_tMysqlOutput_1.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_1.setInt(6, njh.barrier_element_id);
}

                            if(njh.barrier_type_id == null) {
pstmt_tMysqlOutput_1.setNull(7, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_1.setInt(7, njh.barrier_type_id);
}

                            if(njh.barrier_metric_id == null) {
pstmt_tMysqlOutput_1.setNull(8, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_1.setInt(8, njh.barrier_metric_id);
}

                            if(njh.rag_status == null) {
pstmt_tMysqlOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(9, njh.rag_status);
}

                            if(njh.planner_group_id == null) {
pstmt_tMysqlOutput_1.setNull(10, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_1.setInt(10, njh.planner_group_id);
}

                            if(njh.abc_indicator_id == null) {
pstmt_tMysqlOutput_1.setNull(11, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_1.setInt(11, njh.abc_indicator_id);
}

                            if(njh.work_order_description == null) {
pstmt_tMysqlOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(12, njh.work_order_description);
}

                            if(njh.order_type == null) {
pstmt_tMysqlOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(13, njh.order_type);
}

                            if(njh.user_status == null) {
pstmt_tMysqlOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(14, njh.user_status);
}

                            if(njh.awaiting_deferment == null) {
pstmt_tMysqlOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(15, njh.awaiting_deferment);
}

                            if(njh.deferred == null) {
pstmt_tMysqlOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(16, njh.deferred);
}

                            if(njh.work_centre == null) {
pstmt_tMysqlOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(17, njh.work_centre);
}

                            if(njh.latest_allowable_finish_date != null) {
date_tMysqlOutput_1 = njh.latest_allowable_finish_date.getTime();
if(date_tMysqlOutput_1 < year1_tMysqlOutput_1 || date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
pstmt_tMysqlOutput_1.setString(18, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_1.setTimestamp(18, new java.sql.Timestamp(date_tMysqlOutput_1));
}
} else {
pstmt_tMysqlOutput_1.setNull(18, java.sql.Types.DATE);
}

                            if(njh.maint_activ_type == null) {
pstmt_tMysqlOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(19, njh.maint_activ_type);
}

                            if(njh.created_at != null) {
date_tMysqlOutput_1 = njh.created_at.getTime();
if(date_tMysqlOutput_1 < year1_tMysqlOutput_1 || date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
pstmt_tMysqlOutput_1.setString(20, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_1.setTimestamp(20, new java.sql.Timestamp(date_tMysqlOutput_1));
}
} else {
pstmt_tMysqlOutput_1.setNull(20, java.sql.Types.DATE);
}

                            if(njh.updated_at != null) {
date_tMysqlOutput_1 = njh.updated_at.getTime();
if(date_tMysqlOutput_1 < year1_tMysqlOutput_1 || date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
pstmt_tMysqlOutput_1.setString(21, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_1.setTimestamp(21, new java.sql.Timestamp(date_tMysqlOutput_1));
}
} else {
pstmt_tMysqlOutput_1.setNull(21, java.sql.Types.DATE);
}

                    pstmt_tMysqlOutput_1.addBatch();
                    nb_line_tMysqlOutput_1++;

                      batchSizeCounter_tMysqlOutput_1++;
                if ( batchSize_tMysqlOutput_1 <= batchSizeCounter_tMysqlOutput_1) {
                try {
                        int countSum_tMysqlOutput_1 = 0;
                        for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
                            countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_1 = 0;
                    for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
                    }
                    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tMysqlOutput_1 = 0;
            }
                commitCounter_tMysqlOutput_1++;

                if(commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

                try {
                        int countSum_tMysqlOutput_1 = 0;
                        for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
                            countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_1 = 0;
                    for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
                    }
                    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                    System.err.println(e.getMessage());

                }
                    conn_tMysqlOutput_1.commit();
                    commitCounter_tMysqlOutput_1=0;

                }


 


	tos_count_tMysqlOutput_1++;

/**
 * [tMysqlOutput_1 main ] stop
 */

} // End of branch "njh"







	
	/**
	 * [tMysqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

	}
}finally{
	if(rs_tMysqlInput_1 !=null){
		rs_tMysqlInput_1.close();
	}
	stmt_tMysqlInput_1.close();
		if(conn_tMysqlInput_1 != null && !conn_tMysqlInput_1.isClosed()) {
			
			conn_tMysqlInput_1.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_1_NB_LINE",nb_line_tMysqlInput_1);
		


 

ok_Hash.put("tMysqlInput_1", true);
end_Hash.put("tMysqlInput_1", System.currentTimeMillis());




/**
 * [tMysqlInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMysqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



                try {
                		if (batchSizeCounter_tMysqlOutput_1 != 0) {
							int countSum_tMysqlOutput_1 = 0;
							
							for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
								countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tMysqlOutput_1 = 0;
					for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
						countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
					}
					
            	    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tMysqlOutput_1 = 0;
    		
	

        if(pstmt_tMysqlOutput_1 != null) {
			
				pstmt_tMysqlOutput_1.close();
			
        }

    	if (commitCounter_tMysqlOutput_1 > 0) {
    		
    		conn_tMysqlOutput_1.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_1 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_1", true);
    	

	nb_line_deleted_tMysqlOutput_1=nb_line_deleted_tMysqlOutput_1+ deletedCount_tMysqlOutput_1;
	nb_line_update_tMysqlOutput_1=nb_line_update_tMysqlOutput_1 + updatedCount_tMysqlOutput_1;
	nb_line_inserted_tMysqlOutput_1=nb_line_inserted_tMysqlOutput_1 + insertedCount_tMysqlOutput_1;
	nb_line_rejected_tMysqlOutput_1=nb_line_rejected_tMysqlOutput_1 + rejectedCount_tMysqlOutput_1;
	
        globalMap.put("tMysqlOutput_1_NB_LINE",nb_line_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("njh"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_1", true);
end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());




/**
 * [tMysqlOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 



/**
 * [tMysqlInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



	
		if(resourceMap.get("finish_tMysqlOutput_1")==null){
			if(resourceMap.get("conn_tMysqlOutput_1")!=null){
				try {
					
					
					java.sql.Connection ctn_tMysqlOutput_1 = (java.sql.Connection)resourceMap.get("conn_tMysqlOutput_1");
					
					
            		
					ctn_tMysqlOutput_1.close();
					
				} catch (java.sql.SQLException sqlEx_tMysqlOutput_1) {
					String errorMessage_tMysqlOutput_1 = "failed to close the connection in tMysqlOutput_1 :" + sqlEx_tMysqlOutput_1.getMessage();
					
					System.err.println(errorMessage_tMysqlOutput_1);
				}
			}
		}
	

 



/**
 * [tMysqlOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final refresh_work_order_level_data refresh_work_order_level_dataClass = new refresh_work_order_level_data();

        int exitCode = refresh_work_order_level_dataClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = (String[][])globalBuffer.toArray(new String[globalBuffer.size()][]);

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        		hastBufferOutput = true;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = refresh_work_order_level_data.class.getClassLoader().getResourceAsStream("barrier_project/refresh_work_order_level_data_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("this_level_job_name", "id_String");
				
                context.this_level_job_name=(String) context.getProperty("this_level_job_name");
				    context.setContextType("this_level_job_pre", "id_String");
				
                context.this_level_job_pre=(String) context.getProperty("this_level_job_pre");
				    context.setContextType("this_level_job_post", "id_String");
				
                context.this_level_job_post=(String) context.getProperty("this_level_job_post");
				    context.setContextType("barrier_AdditionalParams", "id_String");
				
                context.barrier_AdditionalParams=(String) context.getProperty("barrier_AdditionalParams");
				    context.setContextType("barrier_Login", "id_String");
				
                context.barrier_Login=(String) context.getProperty("barrier_Login");
				    context.setContextType("barrier_Server", "id_String");
				
                context.barrier_Server=(String) context.getProperty("barrier_Server");
				    context.setContextType("barrier_Database", "id_String");
				
                context.barrier_Database=(String) context.getProperty("barrier_Database");
				    context.setContextType("barrier_Password", "id_Password");
				
            		String pwd_barrier_Password_value = context.getProperty("barrier_Password");
            		context.barrier_Password = null;
            		if(pwd_barrier_Password_value!=null) {
            			if(context_param.containsKey("barrier_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.barrier_Password = pwd_barrier_Password_value;
            			} else if (!pwd_barrier_Password_value.isEmpty()) {
            				try {
            					context.barrier_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_barrier_Password_value);
            					context.put("barrier_Password",context.barrier_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("barrier_Port", "id_String");
				
                context.barrier_Port=(String) context.getProperty("barrier_Port");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("this_level_job_name")) {
                context.this_level_job_name = (String) parentContextMap.get("this_level_job_name");
            }if (parentContextMap.containsKey("this_level_job_pre")) {
                context.this_level_job_pre = (String) parentContextMap.get("this_level_job_pre");
            }if (parentContextMap.containsKey("this_level_job_post")) {
                context.this_level_job_post = (String) parentContextMap.get("this_level_job_post");
            }if (parentContextMap.containsKey("barrier_AdditionalParams")) {
                context.barrier_AdditionalParams = (String) parentContextMap.get("barrier_AdditionalParams");
            }if (parentContextMap.containsKey("barrier_Login")) {
                context.barrier_Login = (String) parentContextMap.get("barrier_Login");
            }if (parentContextMap.containsKey("barrier_Server")) {
                context.barrier_Server = (String) parentContextMap.get("barrier_Server");
            }if (parentContextMap.containsKey("barrier_Database")) {
                context.barrier_Database = (String) parentContextMap.get("barrier_Database");
            }if (parentContextMap.containsKey("barrier_Password")) {
                context.barrier_Password = (java.lang.String) parentContextMap.get("barrier_Password");
            }if (parentContextMap.containsKey("barrier_Port")) {
                context.barrier_Port = (String) parentContextMap.get("barrier_Port");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("barrier_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tMysqlInput_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tMysqlInput_3) {
globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", -1);

e_tMysqlInput_3.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : refresh_work_order_level_data");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     199603 characters generated by Talend Open Studio for Data Integration 
 *     on the 28 November 2017 14:09:40 GMT
 ************************************************************************************************/