// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package barrier_project.run_task_ods_0_1;

import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.Mathematical;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: run_task_ods Purpose: runs a task taking into account task dependancies<br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.4.1.20170623_1246
 * @status 
 */
public class run_task_ods implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(this_level_job_name != null){
				
					this.setProperty("this_level_job_name", this_level_job_name.toString());
				
			}
			
			if(this_level_job_pre != null){
				
					this.setProperty("this_level_job_pre", this_level_job_pre.toString());
				
			}
			
			if(this_level_job_post != null){
				
					this.setProperty("this_level_job_post", this_level_job_post.toString());
				
			}
			
			if(barrier_control_conn_Login != null){
				
					this.setProperty("barrier_control_conn_Login", barrier_control_conn_Login.toString());
				
			}
			
			if(barrier_control_conn_AdditionalParams != null){
				
					this.setProperty("barrier_control_conn_AdditionalParams", barrier_control_conn_AdditionalParams.toString());
				
			}
			
			if(barrier_control_conn_Database != null){
				
					this.setProperty("barrier_control_conn_Database", barrier_control_conn_Database.toString());
				
			}
			
			if(barrier_control_conn_Password != null){
				
					this.setProperty("barrier_control_conn_Password", barrier_control_conn_Password.toString());
				
			}
			
			if(barrier_control_conn_Port != null){
				
					this.setProperty("barrier_control_conn_Port", barrier_control_conn_Port.toString());
				
			}
			
			if(barrier_control_conn_Server != null){
				
					this.setProperty("barrier_control_conn_Server", barrier_control_conn_Server.toString());
				
			}
			
		}

public String this_level_job_name;
public String getThis_level_job_name(){
	return this.this_level_job_name;
}
public String this_level_job_pre;
public String getThis_level_job_pre(){
	return this.this_level_job_pre;
}
public String this_level_job_post;
public String getThis_level_job_post(){
	return this.this_level_job_post;
}
public String barrier_control_conn_Login;
public String getBarrier_control_conn_Login(){
	return this.barrier_control_conn_Login;
}
public String barrier_control_conn_AdditionalParams;
public String getBarrier_control_conn_AdditionalParams(){
	return this.barrier_control_conn_AdditionalParams;
}
public String barrier_control_conn_Database;
public String getBarrier_control_conn_Database(){
	return this.barrier_control_conn_Database;
}
public java.lang.String barrier_control_conn_Password;
public java.lang.String getBarrier_control_conn_Password(){
	return this.barrier_control_conn_Password;
}
public String barrier_control_conn_Port;
public String getBarrier_control_conn_Port(){
	return this.barrier_control_conn_Port;
}
public String barrier_control_conn_Server;
public String getBarrier_control_conn_Server(){
	return this.barrier_control_conn_Server;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "run_task_ods";
	private final String projectName = "BARRIER_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				run_task_ods.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(run_task_ods.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tMysqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_BARRIER_PROJECT_run_task_ods = new byte[0];
    static byte[] commonByteArray_BARRIER_PROJECT_run_task_ods = new byte[0];

	
			    public String tjob;

				public String getTjob () {
					return this.tjob;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BARRIER_PROJECT_run_task_ods.length) {
				if(length < 1024 && commonByteArray_BARRIER_PROJECT_run_task_ods.length == 0) {
   					commonByteArray_BARRIER_PROJECT_run_task_ods = new byte[1024];
				} else {
   					commonByteArray_BARRIER_PROJECT_run_task_ods = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BARRIER_PROJECT_run_task_ods, 0, length);
			strReturn = new String(commonByteArray_BARRIER_PROJECT_run_task_ods, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BARRIER_PROJECT_run_task_ods) {

        	try {

        		int length = 0;
		
					this.tjob = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.tjob,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("tjob="+tjob);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSetGlobalVar_1 = 0;
		
    	class BytesLimit65535_tSetGlobalVar_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSetGlobalVar_1().limitLog4jByte();

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */



	
	/**
	 * [tMysqlInput_1 begin ] start
	 */

				
			int NB_ITERATE_tRunJob_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tMysqlInput_1", false);
		start_Hash.put("tMysqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_1";

	
		int tos_count_tMysqlInput_1 = 0;
		
    	class BytesLimit65535_tMysqlInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_1().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1.getTime();
		    int nb_line_tMysqlInput_1 = 0;
		    java.sql.Connection conn_tMysqlInput_1 = null;
				String driverClass_tMysqlInput_1 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_1);
			   	String dbUser_tMysqlInput_1 = context.barrier_control_conn_Login;
			   	
        		
        		
        		
	final String decryptedPassword_tMysqlInput_1 = context.barrier_control_conn_Password; 
			   	
		        String dbPwd_tMysqlInput_1 = decryptedPassword_tMysqlInput_1;
		        
				
				String url_tMysqlInput_1 = "jdbc:mysql://" + context.barrier_control_conn_Server + ":" + context.barrier_control_conn_Port + "/" + context.barrier_control_conn_Database + "?" + context.barrier_control_conn_AdditionalParams;
				
				conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(url_tMysqlInput_1,dbUser_tMysqlInput_1,dbPwd_tMysqlInput_1);
		        
		    
			java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1.createStatement();

		    String dbquery_tMysqlInput_1 = " SELECT \n   `task_run`.`tjob` \n  FROM  control.task_run  `task_run`\nwhere  `task_run`.`taskactiveflag` = 1 and  `task_run`.`taskstatusflag`  = 1\nand taskgroupid in (3)\norder by taskid asc";
			

                       globalMap.put("tMysqlInput_1_QUERY",dbquery_tMysqlInput_1);

		    java.sql.ResultSet rs_tMysqlInput_1 = null;
		try{
		    rs_tMysqlInput_1 = stmt_tMysqlInput_1.executeQuery(dbquery_tMysqlInput_1);
		    java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1.getMetaData();
		    int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1.getColumnCount();

		    String tmpContent_tMysqlInput_1 = null;
		    
		    
		    while (rs_tMysqlInput_1.next()) {
		        nb_line_tMysqlInput_1++;
		        
							if(colQtyInRs_tMysqlInput_1 < 1) {
								row1.tjob = null;
							} else {
	                         		
        	row1.tjob = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 1, false);
		                    }
					

 



/**
 * [tMysqlInput_1 begin ] stop
 */
	
	/**
	 * [tMysqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 


	tos_count_tMysqlInput_1++;

/**
 * [tMysqlInput_1 main ] stop
 */

	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

globalMap.put("myTask", row1.tjob);
globalMap.put("child_return", ((Integer)globalMap.get("tRunJob_1_CHILD_RETURN_CODE")));
globalMap.put("error_messsge", ((String)globalMap.get("tRunJob_1_ERROR_MESSAGE")));

 


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */



	NB_ITERATE_tRunJob_1++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tRunJob_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		
    	class BytesLimit65535_tRunJob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_1().limitLog4jByte();
class DealChildJobLibrary_tRunJob_1 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new ObjectInputStream(new java.io.FileInputStream(crcMapPath));
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

		//For different jobs, job name must be different, but classpath and JVM arguments are possbilely different
		java.util.Map<String,List<String>> childJob_commandLine_Mapper_tRunJob_1 = new java.util.HashMap<String,List<String>>();
		java.util.List<String> childJob_commandLine_tRunJob_1 = null;
		String classpathSeparator_tRunJob_1 = System.getProperty("path.separator");
		
				childJob_commandLine_tRunJob_1 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_1.add("java");
				    
				    		childJob_commandLine_tRunJob_1.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-cp".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add(dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;../lib/mysql-connector-java-5.1.30-bin.jar;jb_ods_merge_eis_mdp1_0_1.jar;sendemailjobprocessstatus_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("barrier_project.jb_ods_merge_eis_mdp1_0_1.jb_ods_merge_eis_mdp1".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_node=tRunJob_1".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--context=Default".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("%*".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				childJob_commandLine_Mapper_tRunJob_1.put("jb_ods_merge_eis_mdp1",childJob_commandLine_tRunJob_1);	
			
				childJob_commandLine_tRunJob_1 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_1.add("java");
				    
				    		childJob_commandLine_tRunJob_1.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-cp".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add(dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;../lib/mysql-connector-java-5.1.30-bin.jar;jb_ods_merge_eis_0_1.jar;sendemailjobprocessstatus_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("barrier_project.jb_ods_merge_eis_0_1.jb_ods_merge_eis".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_node=tRunJob_1".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--context=Default".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("%*".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				childJob_commandLine_Mapper_tRunJob_1.put("jb_ods_merge_eis",childJob_commandLine_tRunJob_1);	
			
				childJob_commandLine_tRunJob_1 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_1.add("java");
				    
				    		childJob_commandLine_tRunJob_1.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-cp".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add(dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;../lib/mysql-connector-java-5.1.30-bin.jar;jb_ods_merge_nm01_all_0_1.jar;sendemailjobprocessstatus_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("barrier_project.jb_ods_merge_nm01_all_0_1.jb_ods_merge_nm01_all".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_node=tRunJob_1".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--context=Default".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("%*".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				childJob_commandLine_Mapper_tRunJob_1.put("jb_ods_merge_nm01_all",childJob_commandLine_tRunJob_1);	
			
				childJob_commandLine_tRunJob_1 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_1.add("java");
				    
				    		childJob_commandLine_tRunJob_1.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-cp".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add(dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;../lib/mysql-connector-java-5.1.30-bin.jar;jb_ods_merge_nm01_chis_0_1.jar;sendemailjobprocessstatus_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("barrier_project.jb_ods_merge_nm01_chis_0_1.jb_ods_merge_nm01_chis".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_node=tRunJob_1".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--context=Default".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("%*".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				childJob_commandLine_Mapper_tRunJob_1.put("jb_ods_merge_nm01_chis",childJob_commandLine_tRunJob_1);	
			
				childJob_commandLine_tRunJob_1 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_1.add("java");
				    
				    		childJob_commandLine_tRunJob_1.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-cp".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add(dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;../lib/mysql-connector-java-5.1.30-bin.jar;jb_ods_merge_nm01_f3fa_0_1.jar;sendemailjobprocessstatus_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("barrier_project.jb_ods_merge_nm01_f3fa_0_1.jb_ods_merge_nm01_f3fa".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_node=tRunJob_1".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--context=Default".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("%*".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				childJob_commandLine_Mapper_tRunJob_1.put("jb_ods_merge_nm01_f3fa",childJob_commandLine_tRunJob_1);	
			
				childJob_commandLine_tRunJob_1 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_1.add("java");
				    
				    		childJob_commandLine_tRunJob_1.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-cp".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add(dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;../lib/mysql-connector-java-5.1.30-bin.jar;jb_ods_merge_nm01_grov_0_1.jar;sendemailjobprocessstatus_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("barrier_project.jb_ods_merge_nm01_grov_0_1.jb_ods_merge_nm01_grov".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_node=tRunJob_1".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--context=Default".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("%*".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				childJob_commandLine_Mapper_tRunJob_1.put("jb_ods_merge_nm01_grov",childJob_commandLine_tRunJob_1);	
			
				childJob_commandLine_tRunJob_1 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_1.add("java");
				    
				    		childJob_commandLine_tRunJob_1.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-cp".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add(dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;../lib/mysql-connector-java-5.1.30-bin.jar;jb_ods_merge_nm01_grow_0_1.jar;sendemailjobprocessstatus_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("barrier_project.jb_ods_merge_nm01_grow_0_1.jb_ods_merge_nm01_grow".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_node=tRunJob_1".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--context=Default".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("%*".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				childJob_commandLine_Mapper_tRunJob_1.put("jb_ods_merge_nm01_grow",childJob_commandLine_tRunJob_1);	
			
				childJob_commandLine_tRunJob_1 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_1.add("java");
				    
				    		childJob_commandLine_tRunJob_1.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-cp".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add(dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;../lib/mysql-connector-java-5.1.30-bin.jar;jb_ods_merge_nm01_mj6a_0_1.jar;sendemailjobprocessstatus_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("barrier_project.jb_ods_merge_nm01_mj6a_0_1.jb_ods_merge_nm01_mj6a".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_node=tRunJob_1".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--context=Default".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("%*".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				childJob_commandLine_Mapper_tRunJob_1.put("jb_ods_merge_nm01_mj6a",childJob_commandLine_tRunJob_1);	
			
				childJob_commandLine_tRunJob_1 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_1.add("java");
				    
				    		childJob_commandLine_tRunJob_1.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-cp".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add(dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;../lib/mysql-connector-java-5.1.30-bin.jar;jb_ods_merge_nm01_mkew_0_1.jar;sendemailjobprocessstatus_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("barrier_project.jb_ods_merge_nm01_mkew_0_1.jb_ods_merge_nm01_mkew".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_node=tRunJob_1".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--context=Default".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("%*".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				childJob_commandLine_Mapper_tRunJob_1.put("jb_ods_merge_nm01_mkew",childJob_commandLine_tRunJob_1);	
			
				childJob_commandLine_tRunJob_1 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_1.add("java");
				    
				    		childJob_commandLine_tRunJob_1.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-cp".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add(dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;../lib/mysql-connector-java-5.1.30-bin.jar;jb_ods_merge_nm01_mst1_0_1.jar;sendemailjobprocessstatus_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("barrier_project.jb_ods_merge_nm01_mst1_0_1.jb_ods_merge_nm01_mst1".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_node=tRunJob_1".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--context=Default".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("%*".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				childJob_commandLine_Mapper_tRunJob_1.put("jb_ods_merge_nm01_mst1",childJob_commandLine_tRunJob_1);	
			
				childJob_commandLine_tRunJob_1 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_1.add("java");
				    
				    		childJob_commandLine_tRunJob_1.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-cp".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add(dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;../lib/mysql-connector-java-5.1.30-bin.jar;jb_ods_merge_nm01_stam_0_1.jar;sendemailjobprocessstatus_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("barrier_project.jb_ods_merge_nm01_stam_0_1.jb_ods_merge_nm01_stam".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_node=tRunJob_1".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--context=Default".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("%*".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				childJob_commandLine_Mapper_tRunJob_1.put("jb_ods_merge_nm01_stam",childJob_commandLine_tRunJob_1);	
			
				childJob_commandLine_tRunJob_1 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_1.add("java");
				    
				    		childJob_commandLine_tRunJob_1.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-cp".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add(dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;../lib/mysql-connector-java-5.1.30-bin.jar;jb_ods_merge_nm01_wind_0_1.jar;sendemailjobprocessstatus_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("barrier_project.jb_ods_merge_nm01_wind_0_1.jb_ods_merge_nm01_wind".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_node=tRunJob_1".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--context=Default".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("%*".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				childJob_commandLine_Mapper_tRunJob_1.put("jb_ods_merge_nm01_wind",childJob_commandLine_tRunJob_1);	
			
				childJob_commandLine_tRunJob_1 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_1.add("java");
				    
				    		childJob_commandLine_tRunJob_1.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-cp".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add(dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;../lib/mysql-connector-java-5.1.30-bin.jar;jb_ods_merge_nm01_0_1.jar;sendemailjobprocessstatus_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("barrier_project.jb_ods_merge_nm01_0_1.jb_ods_merge_nm01".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_node=tRunJob_1".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--context=Default".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("%*".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				childJob_commandLine_Mapper_tRunJob_1.put("jb_ods_merge_nm01",childJob_commandLine_tRunJob_1);	
			
				childJob_commandLine_tRunJob_1 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_1.add("java");
				    
				    		childJob_commandLine_tRunJob_1.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-cp".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add(dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;../lib/mysql-connector-java-5.1.30-bin.jar;jb_ods_merge_ps_mapping_eis_0_1.jar;sendemailjobprocessstatus_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("barrier_project.jb_ods_merge_ps_mapping_eis_0_1.jb_ods_merge_ps_mapping_eis".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_node=tRunJob_1".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--context=Default".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("%*".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				childJob_commandLine_Mapper_tRunJob_1.put("jb_ods_merge_ps_mapping_eis",childJob_commandLine_tRunJob_1);	
			
				childJob_commandLine_tRunJob_1 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_1.add("java");
				    
				    		childJob_commandLine_tRunJob_1.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-cp".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add(dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;../lib/mysql-connector-java-5.1.30-bin.jar;jb_ods_merge_ps_mapping_nm01_0_1.jar;sendemailjobprocessstatus_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("barrier_project.jb_ods_merge_ps_mapping_nm01_0_1.jb_ods_merge_ps_mapping_nm01".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_node=tRunJob_1".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--context=Default".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("%*".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				childJob_commandLine_Mapper_tRunJob_1.put("jb_ods_merge_ps_mapping_nm01",childJob_commandLine_tRunJob_1);	
			
				childJob_commandLine_tRunJob_1 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_1.add("java");
				    
				    		childJob_commandLine_tRunJob_1.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-cp".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add(dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;../lib/mysql-connector-java-5.1.30-bin.jar;jb_ods_merge_work_order_eis_map1_0_1.jar;sendemailjobprocessstatus_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("barrier_project.jb_ods_merge_work_order_eis_map1_0_1.jb_ods_merge_work_order_eis_map1".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_node=tRunJob_1".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--context=Default".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("%*".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				childJob_commandLine_Mapper_tRunJob_1.put("jb_ods_merge_work_order_eis_map1",childJob_commandLine_tRunJob_1);	
			
				childJob_commandLine_tRunJob_1 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_1.add("java");
				    
				    		childJob_commandLine_tRunJob_1.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("-cp".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add(dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;../lib/mysql-connector-java-5.1.30-bin.jar;jb_ods_work_order_eis_mcp1_0_1.jar;sendemailjobprocessstatus_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("barrier_project.jb_ods_work_order_eis_mcp1_0_1.jb_ods_work_order_eis_mcp1".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--father_node=tRunJob_1".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("--context=Default".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				    		childJob_commandLine_tRunJob_1.add("%*".replaceAll(";",classpathSeparator_tRunJob_1));
				    
				childJob_commandLine_Mapper_tRunJob_1.put("jb_ods_work_order_eis_mcp1",childJob_commandLine_tRunJob_1);	
			

 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
		if(childJob_commandLine_Mapper_tRunJob_1.get(((String)globalMap.get("myTask")))==null){
			throw new RuntimeException("The child job named "+((String)globalMap.get("myTask"))+" is not in the job list.");
		}
		paraList_tRunJob_1.addAll(childJob_commandLine_Mapper_tRunJob_1.get(((String)globalMap.get("myTask"))));
	
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
	
		Runtime runtime_tRunJob_1 = Runtime.getRuntime();
		final Process ps_tRunJob_1;
		ps_tRunJob_1 = runtime_tRunJob_1.exec((String[])paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

		Thread normal_tRunJob_1 = new Thread() {
			public void run() {
				try {
					java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps_tRunJob_1.getInputStream()));
					String line = "";
					try {
						while((line = reader.readLine()) != null) {
						System.out.println(line);
						}
					} finally {
					reader.close();
					}
				} catch(java.io.IOException ioe) {
					
					ioe.printStackTrace();
				}
	    	}
  		};
		
		normal_tRunJob_1.start();
		

		final StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
		Thread error_tRunJob_1 = new Thread() {
			public void run() {
				try {
					java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps_tRunJob_1.getErrorStream()));
					String line = "";
        			try {
          				while((line = reader.readLine()) != null) {
            				errorMsg_tRunJob_1.append(line).append("\n");
          				}
        			} finally {
          				reader.close();
        			}
      			} catch(java.io.IOException ioe) {
					
			        ioe.printStackTrace();
      			}
    		}
		};
		error_tRunJob_1.start();

		//0 indicates normal termination	
		int result_tRunJob_1 = ps_tRunJob_1.waitFor();
		normal_tRunJob_1.join(10000);
		error_tRunJob_1.join(10000);
  
		globalMap.put("tRunJob_1_CHILD_RETURN_CODE",result_tRunJob_1);
		if(result_tRunJob_1 != 0){
   			globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_1.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_1 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());
			
  		}

		
 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tRunJob_1);
						}				
					




	
	/**
	 * [tMysqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

	}
}finally{
	if(rs_tMysqlInput_1 !=null){
		rs_tMysqlInput_1.close();
	}
	stmt_tMysqlInput_1.close();
		if(conn_tMysqlInput_1 != null && !conn_tMysqlInput_1.isClosed()) {
			
			conn_tMysqlInput_1.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_1_NB_LINE",nb_line_tMysqlInput_1);
		


 

ok_Hash.put("tMysqlInput_1", true);
end_Hash.put("tMysqlInput_1", System.currentTimeMillis());




/**
 * [tMysqlInput_1 end ] stop
 */

	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());




/**
 * [tSetGlobalVar_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 



/**
 * [tMysqlInput_1 finally ] stop
 */

	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */




	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		
    	class BytesLimit65535_tPrejob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPrejob_1().limitLog4jByte();

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tRunJob_2Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";

	
		int tos_count_tRunJob_2 = 0;
		
    	class BytesLimit65535_tRunJob_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_2().limitLog4jByte();


 



/**
 * [tRunJob_2 begin ] stop
 */
	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_2.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_2.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_2.add("--father_node=tRunJob_2");
	      			
	        			paraList_tRunJob_2.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_2 = null;

	
		obj_tRunJob_2 = context.this_level_job_name;
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param Job_name=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param Job_name=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("Job_name", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.this_level_job_pre;
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param parent_job_pre=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param parent_job_pre=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("parent_job_pre", obj_tRunJob_2);
	
	
		barrier_project.sendemailjobprocessstatus_0_1.SendEmailJobProcessStatus childJob_tRunJob_2 = new barrier_project.sendemailjobprocessstatus_0_1.SendEmailJobProcessStatus();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_2) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
			        .entrySet()) {
	            dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
	                    talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
	    }
		  
			childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
		  
		
		String[][] childReturn_tRunJob_2 = childJob_tRunJob_2.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));
		
	  	
				errorCode = childJob_tRunJob_2.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_2.getErrorCode() == null){
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
		    }
		    if (childJob_tRunJob_2.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_2.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());




/**
 * [tRunJob_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		
    	class BytesLimit65535_tPostjob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostjob_1().limitLog4jByte();

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tRunJob_3Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_3", false);
		start_Hash.put("tRunJob_3", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_3";

	
		int tos_count_tRunJob_3 = 0;
		
    	class BytesLimit65535_tRunJob_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_3().limitLog4jByte();


 



/**
 * [tRunJob_3 begin ] stop
 */
	
	/**
	 * [tRunJob_3 main ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	
	java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_3.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_3.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_3.add("--father_node=tRunJob_3");
	      			
	        			paraList_tRunJob_3.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_3.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_3.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_3 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_3 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_3".equals(tRunJobName_tRunJob_3) && childResumePath_tRunJob_3 != null){
		paraList_tRunJob_3.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_3");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_3 = null;

	
		obj_tRunJob_3 = context.this_level_job_name;
		if(obj_tRunJob_3!=null) {
			paraList_tRunJob_3.add("--context_param Job_name=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
		} else {
			paraList_tRunJob_3.add("--context_param Job_name=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("Job_name", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.this_level_job_post;
		if(obj_tRunJob_3!=null) {
			paraList_tRunJob_3.add("--context_param parent_job_post=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
		} else {
			paraList_tRunJob_3.add("--context_param parent_job_post=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("parent_job_post", obj_tRunJob_3);
	
	
		barrier_project.sendemailjobprocessstatus_0_1.SendEmailJobProcessStatus childJob_tRunJob_3 = new barrier_project.sendemailjobprocessstatus_0_1.SendEmailJobProcessStatus();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_3) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
			        .entrySet()) {
	            dataSources_tRunJob_3.put(talendDataSourceEntry_tRunJob_3.getKey(),
	                    talendDataSourceEntry_tRunJob_3.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
	    }
		  
			childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;
		  
		
		String[][] childReturn_tRunJob_3 = childJob_tRunJob_3.runJob((String[]) paraList_tRunJob_3.toArray(new String[paraList_tRunJob_3.size()]));
		
	  	
				errorCode = childJob_tRunJob_3.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_3.getErrorCode() == null){
				globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getStatus() != null && ("failure").equals(childJob_tRunJob_3.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getErrorCode());
		    }
		    if (childJob_tRunJob_3.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_3.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_3.getErrorCode() != null || ("failure").equals(childJob_tRunJob_3.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_3.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_3++;

/**
 * [tRunJob_3 main ] stop
 */
	
	/**
	 * [tRunJob_3 end ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 

ok_Hash.put("tRunJob_3", true);
end_Hash.put("tRunJob_3", System.currentTimeMillis());




/**
 * [tRunJob_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_3 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 



/**
 * [tRunJob_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final run_task_ods run_task_odsClass = new run_task_ods();

        int exitCode = run_task_odsClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = run_task_ods.class.getClassLoader().getResourceAsStream("barrier_project/run_task_ods_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("this_level_job_name", "id_String");
				
                context.this_level_job_name=(String) context.getProperty("this_level_job_name");
				    context.setContextType("this_level_job_pre", "id_String");
				
                context.this_level_job_pre=(String) context.getProperty("this_level_job_pre");
				    context.setContextType("this_level_job_post", "id_String");
				
                context.this_level_job_post=(String) context.getProperty("this_level_job_post");
				    context.setContextType("barrier_control_conn_Login", "id_String");
				
                context.barrier_control_conn_Login=(String) context.getProperty("barrier_control_conn_Login");
				    context.setContextType("barrier_control_conn_AdditionalParams", "id_String");
				
                context.barrier_control_conn_AdditionalParams=(String) context.getProperty("barrier_control_conn_AdditionalParams");
				    context.setContextType("barrier_control_conn_Database", "id_String");
				
                context.barrier_control_conn_Database=(String) context.getProperty("barrier_control_conn_Database");
				    context.setContextType("barrier_control_conn_Password", "id_Password");
				
            		String pwd_barrier_control_conn_Password_value = context.getProperty("barrier_control_conn_Password");
            		context.barrier_control_conn_Password = null;
            		if(pwd_barrier_control_conn_Password_value!=null) {
            			if(context_param.containsKey("barrier_control_conn_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.barrier_control_conn_Password = pwd_barrier_control_conn_Password_value;
            			} else if (!pwd_barrier_control_conn_Password_value.isEmpty()) {
            				try {
            					context.barrier_control_conn_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_barrier_control_conn_Password_value);
            					context.put("barrier_control_conn_Password",context.barrier_control_conn_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("barrier_control_conn_Port", "id_String");
				
                context.barrier_control_conn_Port=(String) context.getProperty("barrier_control_conn_Port");
				    context.setContextType("barrier_control_conn_Server", "id_String");
				
                context.barrier_control_conn_Server=(String) context.getProperty("barrier_control_conn_Server");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("this_level_job_name")) {
                context.this_level_job_name = (String) parentContextMap.get("this_level_job_name");
            }if (parentContextMap.containsKey("this_level_job_pre")) {
                context.this_level_job_pre = (String) parentContextMap.get("this_level_job_pre");
            }if (parentContextMap.containsKey("this_level_job_post")) {
                context.this_level_job_post = (String) parentContextMap.get("this_level_job_post");
            }if (parentContextMap.containsKey("barrier_control_conn_Login")) {
                context.barrier_control_conn_Login = (String) parentContextMap.get("barrier_control_conn_Login");
            }if (parentContextMap.containsKey("barrier_control_conn_AdditionalParams")) {
                context.barrier_control_conn_AdditionalParams = (String) parentContextMap.get("barrier_control_conn_AdditionalParams");
            }if (parentContextMap.containsKey("barrier_control_conn_Database")) {
                context.barrier_control_conn_Database = (String) parentContextMap.get("barrier_control_conn_Database");
            }if (parentContextMap.containsKey("barrier_control_conn_Password")) {
                context.barrier_control_conn_Password = (java.lang.String) parentContextMap.get("barrier_control_conn_Password");
            }if (parentContextMap.containsKey("barrier_control_conn_Port")) {
                context.barrier_control_conn_Port = (String) parentContextMap.get("barrier_control_conn_Port");
            }if (parentContextMap.containsKey("barrier_control_conn_Server")) {
                context.barrier_control_conn_Server = (String) parentContextMap.get("barrier_control_conn_Server");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("barrier_control_conn_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tMysqlInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tMysqlInput_1) {
globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", -1);

e_tMysqlInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : run_task_ods");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     94975 characters generated by Talend Open Studio for Data Integration 
 *     on the 29 November 2017 08:43:25 GMT
 ************************************************************************************************/