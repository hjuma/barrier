// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package barrier_project.refresh_asset_level_data_0_1;

import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.Mathematical;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: refresh_asset_level_data Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.4.1.20170623_1246
 * @status 
 */
public class refresh_asset_level_data implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(this_level_job_name != null){
				
					this.setProperty("this_level_job_name", this_level_job_name.toString());
				
			}
			
			if(this_level_job_pre != null){
				
					this.setProperty("this_level_job_pre", this_level_job_pre.toString());
				
			}
			
			if(this_level_job_post != null){
				
					this.setProperty("this_level_job_post", this_level_job_post.toString());
				
			}
			
			if(barrier_AdditionalParams != null){
				
					this.setProperty("barrier_AdditionalParams", barrier_AdditionalParams.toString());
				
			}
			
			if(barrier_Login != null){
				
					this.setProperty("barrier_Login", barrier_Login.toString());
				
			}
			
			if(barrier_Server != null){
				
					this.setProperty("barrier_Server", barrier_Server.toString());
				
			}
			
			if(barrier_Database != null){
				
					this.setProperty("barrier_Database", barrier_Database.toString());
				
			}
			
			if(barrier_Password != null){
				
					this.setProperty("barrier_Password", barrier_Password.toString());
				
			}
			
			if(barrier_Port != null){
				
					this.setProperty("barrier_Port", barrier_Port.toString());
				
			}
			
		}

public String this_level_job_name;
public String getThis_level_job_name(){
	return this.this_level_job_name;
}
public String this_level_job_pre;
public String getThis_level_job_pre(){
	return this.this_level_job_pre;
}
public String this_level_job_post;
public String getThis_level_job_post(){
	return this.this_level_job_post;
}
public String barrier_AdditionalParams;
public String getBarrier_AdditionalParams(){
	return this.barrier_AdditionalParams;
}
public String barrier_Login;
public String getBarrier_Login(){
	return this.barrier_Login;
}
public String barrier_Server;
public String getBarrier_Server(){
	return this.barrier_Server;
}
public String barrier_Database;
public String getBarrier_Database(){
	return this.barrier_Database;
}
public java.lang.String barrier_Password;
public java.lang.String getBarrier_Password(){
	return this.barrier_Password;
}
public String barrier_Port;
public String getBarrier_Port(){
	return this.barrier_Port;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "refresh_asset_level_data";
	private final String projectName = "BARRIER_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				refresh_asset_level_data.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(refresh_asset_level_data.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tMysqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlSCD_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class hjkStruct implements routines.system.IPersistableRow<hjkStruct> {
    final static byte[] commonByteArrayLock_BARRIER_PROJECT_refresh_asset_level_data = new byte[0];
    static byte[] commonByteArray_BARRIER_PROJECT_refresh_asset_level_data = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date snapshot_date;

				public java.util.Date getSnapshot_date () {
					return this.snapshot_date;
				}
				
			    public int facility_id;

				public int getFacility_id () {
					return this.facility_id;
				}
				
			    public int barrier_type_id;

				public int getBarrier_type_id () {
					return this.barrier_type_id;
				}
				
			    public int count_of_data;

				public int getCount_of_data () {
					return this.count_of_data;
				}
				
			    public String rag_status;

				public String getRag_status () {
					return this.rag_status;
				}
				
			    public int red_count;

				public int getRed_count () {
					return this.red_count;
				}
				
			    public int amber_count;

				public int getAmber_count () {
					return this.amber_count;
				}
				
			    public int green_count;

				public int getGreen_count () {
					return this.green_count;
				}
				
			    public java.util.Date end_dt;

				public java.util.Date getEnd_dt () {
					return this.end_dt;
				}
				
			    public java.util.Date created_at;

				public java.util.Date getCreated_at () {
					return this.created_at;
				}
				
			    public java.util.Date updated_at;

				public java.util.Date getUpdated_at () {
					return this.updated_at;
				}
				
			    public java.util.Date start_dt;

				public java.util.Date getStart_dt () {
					return this.start_dt;
				}
				
			    public String snapshot_pid;

				public String getSnapshot_pid () {
					return this.snapshot_pid;
				}
				
			    public int version_no;

				public int getVersion_no () {
					return this.version_no;
				}
				
			    public boolean current_flag;

				public boolean getCurrent_flag () {
					return this.current_flag;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.snapshot_date == null) ? 0 : this.snapshot_date.hashCode());
					
							result = prime * result + (int) this.facility_id;
						
							result = prime * result + (int) this.barrier_type_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final hjkStruct other = (hjkStruct) obj;
		
						if (this.snapshot_date == null) {
							if (other.snapshot_date != null)
								return false;
						
						} else if (!this.snapshot_date.equals(other.snapshot_date))
						
							return false;
					
						if (this.facility_id != other.facility_id)
							return false;
					
						if (this.barrier_type_id != other.barrier_type_id)
							return false;
					

		return true;
    }

	public void copyDataTo(hjkStruct other) {

		other.snapshot_date = this.snapshot_date;
	            other.facility_id = this.facility_id;
	            other.barrier_type_id = this.barrier_type_id;
	            other.count_of_data = this.count_of_data;
	            other.rag_status = this.rag_status;
	            other.red_count = this.red_count;
	            other.amber_count = this.amber_count;
	            other.green_count = this.green_count;
	            other.end_dt = this.end_dt;
	            other.created_at = this.created_at;
	            other.updated_at = this.updated_at;
	            other.start_dt = this.start_dt;
	            other.snapshot_pid = this.snapshot_pid;
	            other.version_no = this.version_no;
	            other.current_flag = this.current_flag;
	            
	}

	public void copyKeysDataTo(hjkStruct other) {

		other.snapshot_date = this.snapshot_date;
	            	other.facility_id = this.facility_id;
	            	other.barrier_type_id = this.barrier_type_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BARRIER_PROJECT_refresh_asset_level_data.length) {
				if(length < 1024 && commonByteArray_BARRIER_PROJECT_refresh_asset_level_data.length == 0) {
   					commonByteArray_BARRIER_PROJECT_refresh_asset_level_data = new byte[1024];
				} else {
   					commonByteArray_BARRIER_PROJECT_refresh_asset_level_data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BARRIER_PROJECT_refresh_asset_level_data, 0, length);
			strReturn = new String(commonByteArray_BARRIER_PROJECT_refresh_asset_level_data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BARRIER_PROJECT_refresh_asset_level_data) {

        	try {

        		int length = 0;
		
					this.snapshot_date = readDate(dis);
					
			        this.facility_id = dis.readInt();
					
			        this.barrier_type_id = dis.readInt();
					
			        this.count_of_data = dis.readInt();
					
					this.rag_status = readString(dis);
					
			        this.red_count = dis.readInt();
					
			        this.amber_count = dis.readInt();
					
			        this.green_count = dis.readInt();
					
					this.end_dt = readDate(dis);
					
					this.created_at = readDate(dis);
					
					this.updated_at = readDate(dis);
					
					this.start_dt = readDate(dis);
					
					this.snapshot_pid = readString(dis);
					
			        this.version_no = dis.readInt();
					
			        this.current_flag = dis.readBoolean();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.snapshot_date,dos);
					
					// int
				
		            	dos.writeInt(this.facility_id);
					
					// int
				
		            	dos.writeInt(this.barrier_type_id);
					
					// int
				
		            	dos.writeInt(this.count_of_data);
					
					// String
				
						writeString(this.rag_status,dos);
					
					// int
				
		            	dos.writeInt(this.red_count);
					
					// int
				
		            	dos.writeInt(this.amber_count);
					
					// int
				
		            	dos.writeInt(this.green_count);
					
					// java.util.Date
				
						writeDate(this.end_dt,dos);
					
					// java.util.Date
				
						writeDate(this.created_at,dos);
					
					// java.util.Date
				
						writeDate(this.updated_at,dos);
					
					// java.util.Date
				
						writeDate(this.start_dt,dos);
					
					// String
				
						writeString(this.snapshot_pid,dos);
					
					// int
				
		            	dos.writeInt(this.version_no);
					
					// boolean
				
		            	dos.writeBoolean(this.current_flag);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("snapshot_date="+String.valueOf(snapshot_date));
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",barrier_type_id="+String.valueOf(barrier_type_id));
		sb.append(",count_of_data="+String.valueOf(count_of_data));
		sb.append(",rag_status="+rag_status);
		sb.append(",red_count="+String.valueOf(red_count));
		sb.append(",amber_count="+String.valueOf(amber_count));
		sb.append(",green_count="+String.valueOf(green_count));
		sb.append(",end_dt="+String.valueOf(end_dt));
		sb.append(",created_at="+String.valueOf(created_at));
		sb.append(",updated_at="+String.valueOf(updated_at));
		sb.append(",start_dt="+String.valueOf(start_dt));
		sb.append(",snapshot_pid="+snapshot_pid);
		sb.append(",version_no="+String.valueOf(version_no));
		sb.append(",current_flag="+String.valueOf(current_flag));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(hjkStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.snapshot_date, other.snapshot_date);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.facility_id, other.facility_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.barrier_type_id, other.barrier_type_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_BARRIER_PROJECT_refresh_asset_level_data = new byte[0];
    static byte[] commonByteArray_BARRIER_PROJECT_refresh_asset_level_data = new byte[0];

	
			    public int facility_id;

				public int getFacility_id () {
					return this.facility_id;
				}
				
			    public int barrier_type_id;

				public int getBarrier_type_id () {
					return this.barrier_type_id;
				}
				
			    public int count_of_data;

				public int getCount_of_data () {
					return this.count_of_data;
				}
				
			    public String rag_status;

				public String getRag_status () {
					return this.rag_status;
				}
				
			    public int red_count;

				public int getRed_count () {
					return this.red_count;
				}
				
			    public int amber_count;

				public int getAmber_count () {
					return this.amber_count;
				}
				
			    public int green_count;

				public int getGreen_count () {
					return this.green_count;
				}
				
			    public java.util.Date created_at;

				public java.util.Date getCreated_at () {
					return this.created_at;
				}
				
			    public java.util.Date updated_at;

				public java.util.Date getUpdated_at () {
					return this.updated_at;
				}
				
			    public java.util.Date snapshot_date;

				public java.util.Date getSnapshot_date () {
					return this.snapshot_date;
				}
				
			    public String snapshot_pid;

				public String getSnapshot_pid () {
					return this.snapshot_pid;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BARRIER_PROJECT_refresh_asset_level_data.length) {
				if(length < 1024 && commonByteArray_BARRIER_PROJECT_refresh_asset_level_data.length == 0) {
   					commonByteArray_BARRIER_PROJECT_refresh_asset_level_data = new byte[1024];
				} else {
   					commonByteArray_BARRIER_PROJECT_refresh_asset_level_data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BARRIER_PROJECT_refresh_asset_level_data, 0, length);
			strReturn = new String(commonByteArray_BARRIER_PROJECT_refresh_asset_level_data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BARRIER_PROJECT_refresh_asset_level_data) {

        	try {

        		int length = 0;
		
			        this.facility_id = dis.readInt();
					
			        this.barrier_type_id = dis.readInt();
					
			        this.count_of_data = dis.readInt();
					
					this.rag_status = readString(dis);
					
			        this.red_count = dis.readInt();
					
			        this.amber_count = dis.readInt();
					
			        this.green_count = dis.readInt();
					
					this.created_at = readDate(dis);
					
					this.updated_at = readDate(dis);
					
					this.snapshot_date = readDate(dis);
					
					this.snapshot_pid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.facility_id);
					
					// int
				
		            	dos.writeInt(this.barrier_type_id);
					
					// int
				
		            	dos.writeInt(this.count_of_data);
					
					// String
				
						writeString(this.rag_status,dos);
					
					// int
				
		            	dos.writeInt(this.red_count);
					
					// int
				
		            	dos.writeInt(this.amber_count);
					
					// int
				
		            	dos.writeInt(this.green_count);
					
					// java.util.Date
				
						writeDate(this.created_at,dos);
					
					// java.util.Date
				
						writeDate(this.updated_at,dos);
					
					// java.util.Date
				
						writeDate(this.snapshot_date,dos);
					
					// String
				
						writeString(this.snapshot_pid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("facility_id="+String.valueOf(facility_id));
		sb.append(",barrier_type_id="+String.valueOf(barrier_type_id));
		sb.append(",count_of_data="+String.valueOf(count_of_data));
		sb.append(",rag_status="+rag_status);
		sb.append(",red_count="+String.valueOf(red_count));
		sb.append(",amber_count="+String.valueOf(amber_count));
		sb.append(",green_count="+String.valueOf(green_count));
		sb.append(",created_at="+String.valueOf(created_at));
		sb.append(",updated_at="+String.valueOf(updated_at));
		sb.append(",snapshot_date="+String.valueOf(snapshot_date));
		sb.append(",snapshot_pid="+snapshot_pid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
hjkStruct hjk = new hjkStruct();





	
	/**
	 * [tMysqlSCD_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlSCD_1", false);
		start_Hash.put("tMysqlSCD_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlSCD_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("hjk" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlSCD_1 = 0;
		
    	class BytesLimit65535_tMysqlSCD_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlSCD_1().limitLog4jByte();

        class SCDSK_tMysqlSCD_1 {
private int hashCode;
public boolean hashCodeDirty = true;
int barrier_type_id;
int facility_id;
public boolean equals(Object obj) {
if (this == obj) return true;
if (obj == null) return false;
if (getClass() != obj.getClass()) return false;
final SCDSK_tMysqlSCD_1 other = (SCDSK_tMysqlSCD_1) obj;
if (this.barrier_type_id!= other.barrier_type_id)
return false;

if (this.facility_id!= other.facility_id)
return false;

return true;
}
public int hashCode() {
if(hashCodeDirty) {
int prime = 31;hashCode = prime * hashCode + barrier_type_id;
hashCode = prime * hashCode + facility_id;
hashCodeDirty = false;
}
return hashCode;
}
}

    class SCDStruct_tMysqlSCD_1 {
private int amber_count;
private int count_of_data;
private int green_count;
private String rag_status;
private int red_count;
private java.util.Date snapshot_date;
private String snapshot_pid;
private int version_no;
}

    int nb_line_update_tMysqlSCD_1 = 0;
    int nb_line_inserted_tMysqlSCD_1 = 0;
    int nb_line_rejected_tMysqlSCD_1 = 0;
    String tableName_tMysqlSCD_1 = "asset_level_data_version";
        java.lang.Class.forName("org.gjt.mm.mysql.Driver");
            String connectionString_tMysqlSCD_1 = "jdbc:mysql://" + context.barrier_Server + ":" + context.barrier_Port + "/" + context.barrier_Database + "?" + context.barrier_AdditionalParams;
	        
		
		
		
	final String decryptedPassword_tMysqlSCD_1 = context.barrier_Password; 
	   	
        java.sql.Connection connection_tMysqlSCD_1 = java.sql.DriverManager.getConnection(connectionString_tMysqlSCD_1, context.barrier_Login, decryptedPassword_tMysqlSCD_1);
    
        
    java.util.Calendar calendar_tMysqlSCD_1 = java.util.Calendar.getInstance();
    java.util.Calendar calendarYear0_tMysqlSCD_1 = java.util.Calendar.getInstance();
    
    calendar_tMysqlSCD_1.set(1, 0, 1, 0, 0, 0);
    calendarYear0_tMysqlSCD_1.set(0,0,0,0,0,0);
    
    final java.util.Date dateYear0_tMysqlSCD_1 = calendarYear0_tMysqlSCD_1.getTime();
    final long year1_tMysqlSCD_1 = calendar_tMysqlSCD_1.getTime().getTime();
    
    
    calendar_tMysqlSCD_1.set(10000, 0, 1, 0, 0, 0);
    final long year10000_tMysqlSCD_1 = calendar_tMysqlSCD_1.getTime().getTime();
    long date_tMysqlSCD_1 = 0;    
    String dateStr_tMysqlSCD_1 = null;
    String tmpValue_tMysqlSCD_1 = null;    
        String search_tMysqlSCD_1 = "SELECT `barrier_type_id`, `facility_id`, `amber_count`, `count_of_data`, `green_count`, `rag_status`, `red_count`, `snapshot_date`, `snapshot_pid`, `version_no` FROM `" + tableName_tMysqlSCD_1 + "` WHERE `end_dt` IS NULL";
        java.sql.Statement statement_tMysqlSCD_1 = connection_tMysqlSCD_1.createStatement();
        java.sql.ResultSet resultSet_tMysqlSCD_1 = statement_tMysqlSCD_1.executeQuery(search_tMysqlSCD_1);
        java.util.Map<SCDSK_tMysqlSCD_1, SCDStruct_tMysqlSCD_1> cache_tMysqlSCD_1 = new java.util.HashMap<SCDSK_tMysqlSCD_1, SCDStruct_tMysqlSCD_1>();
        while(resultSet_tMysqlSCD_1.next()) {
            SCDSK_tMysqlSCD_1 sk_tMysqlSCD_1 = new SCDSK_tMysqlSCD_1();
            SCDStruct_tMysqlSCD_1 row_tMysqlSCD_1 = new SCDStruct_tMysqlSCD_1();
                    if(resultSet_tMysqlSCD_1.getObject(1) != null) {
                        sk_tMysqlSCD_1.barrier_type_id = resultSet_tMysqlSCD_1.getInt(1);
                    }
                    if(resultSet_tMysqlSCD_1.getObject(2) != null) {
                        sk_tMysqlSCD_1.facility_id = resultSet_tMysqlSCD_1.getInt(2);
                    }
                    if(resultSet_tMysqlSCD_1.getObject(3) != null) {
                        row_tMysqlSCD_1.amber_count = resultSet_tMysqlSCD_1.getInt(3);
                    }
                    if(resultSet_tMysqlSCD_1.getObject(4) != null) {
                        row_tMysqlSCD_1.count_of_data = resultSet_tMysqlSCD_1.getInt(4);
                    }
                    if(resultSet_tMysqlSCD_1.getObject(5) != null) {
                        row_tMysqlSCD_1.green_count = resultSet_tMysqlSCD_1.getInt(5);
                    }
                    if(resultSet_tMysqlSCD_1.getObject(6) != null) {
                        row_tMysqlSCD_1.rag_status = resultSet_tMysqlSCD_1.getString(6);
                    }
                    if(resultSet_tMysqlSCD_1.getObject(7) != null) {
                        row_tMysqlSCD_1.red_count = resultSet_tMysqlSCD_1.getInt(7);
                    }
                    dateStr_tMysqlSCD_1 = resultSet_tMysqlSCD_1.getString(8);
                    if(dateStr_tMysqlSCD_1 != null) {
                        if(!("0000-00-00").equals(dateStr_tMysqlSCD_1) && !("0000-00-00 00:00:00").equals(dateStr_tMysqlSCD_1)) {
                            row_tMysqlSCD_1.snapshot_date = new java.util.Date(resultSet_tMysqlSCD_1.getTimestamp(8).getTime());
                        } else {
                            row_tMysqlSCD_1.snapshot_date = (java.util.Date) dateYear0_tMysqlSCD_1.clone();
                        }
                    } else {
                        row_tMysqlSCD_1.snapshot_date = null;
                    }
                    if(resultSet_tMysqlSCD_1.getObject(9) != null) {
                        row_tMysqlSCD_1.snapshot_pid = resultSet_tMysqlSCD_1.getString(9);
                    }
                    if(resultSet_tMysqlSCD_1.getObject(10) != null) {
                        row_tMysqlSCD_1.version_no = resultSet_tMysqlSCD_1.getInt(10);
                    }
            cache_tMysqlSCD_1.put(sk_tMysqlSCD_1, row_tMysqlSCD_1);
        }
        resultSet_tMysqlSCD_1.close();
        statement_tMysqlSCD_1.close();
    String insertionSQL_tMysqlSCD_1 = "INSERT INTO `" + tableName_tMysqlSCD_1 + "`(`barrier_type_id`, `facility_id`, `created_at`, `updated_at`, `amber_count`, `count_of_data`, `green_count`, `rag_status`, `red_count`, `snapshot_date`, `snapshot_pid`, `current_flag`, `version_no`, `start_dt`, `end_dt`) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, b'1', ?, ?, ?)";
    java.sql.PreparedStatement insertionStatement_tMysqlSCD_1 = connection_tMysqlSCD_1.prepareStatement(insertionSQL_tMysqlSCD_1);
            insertionStatement_tMysqlSCD_1.setTimestamp(13, new java.sql.Timestamp(start_Hash.get("tMysqlSCD_1")));
            insertionStatement_tMysqlSCD_1.setNull(14, java.sql.Types.DATE);
        String updateSQLForType2_tMysqlSCD_1 = "UPDATE `" + tableName_tMysqlSCD_1 + "` SET `end_dt` = ?, `current_flag` = b'0' WHERE `barrier_type_id` = ? AND `facility_id` = ? AND `end_dt` IS NULL";
        java.sql.PreparedStatement updateForType2_tMysqlSCD_1 = connection_tMysqlSCD_1.prepareStatement(updateSQLForType2_tMysqlSCD_1);
            updateForType2_tMysqlSCD_1.setTimestamp(1, new java.sql.Timestamp(start_Hash.get("tMysqlSCD_1")));
    
        SCDSK_tMysqlSCD_1 lookUpKey_tMysqlSCD_1 = null;        
    SCDStruct_tMysqlSCD_1 lookUpValue_tMysqlSCD_1 = null;

 



/**
 * [tMysqlSCD_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		
    	class BytesLimit65535_tMap_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_2().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
	java.util.Date snapshot_date;
	String snapshot_pid;
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
hjkStruct hjk_tmp = new hjkStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMysqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_1", false);
		start_Hash.put("tMysqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_1";

	
		int tos_count_tMysqlInput_1 = 0;
		
    	class BytesLimit65535_tMysqlInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_1().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1.getTime();
		    int nb_line_tMysqlInput_1 = 0;
		    java.sql.Connection conn_tMysqlInput_1 = null;
				String driverClass_tMysqlInput_1 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_1);
			   	String dbUser_tMysqlInput_1 = context.barrier_Login;
			   	
        		
        		
        		
	final String decryptedPassword_tMysqlInput_1 = context.barrier_Password; 
			   	
		        String dbPwd_tMysqlInput_1 = decryptedPassword_tMysqlInput_1;
		        
				
				String url_tMysqlInput_1 = "jdbc:mysql://" + context.barrier_Server + ":" + context.barrier_Port + "/" + context.barrier_Database + "?" + context.barrier_AdditionalParams;
				
				conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(url_tMysqlInput_1,dbUser_tMysqlInput_1,dbPwd_tMysqlInput_1);
		        
		    
			java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1.createStatement();

		    String dbquery_tMysqlInput_1 = "SELECT   `facility_id`\n		 , `barrier_type_id`\n		 , `count_of_data`\n		 , CASE\n		 		WHEN `red_count` > `rs`.`amber_end` THEN 'R'\n		 		WHEN `amber_count` >= `rs`.`amber_start` THEN 'A'\n		 		ELSE 'G'\n		 	END `rag_status`\n		 , red_count\n		 , amber_count\n		 , green_count\n		 , SYSDATE()\n		 , SYSDATE()\nFROM `barrier`.`vw_asset_level_data` `data`\nINNER JOIN `barrier`.`barrier_type` `bt`\nON `data`.`barrier_type_id` = `bt`.`id`\nINNER JOIN `barrier`.`asset_rule_set` `rs`\nON `bt`.`barrier_id` = `rs`.`barrier_id`\nAND `rs`.`current_flag` = 1";
			

                       globalMap.put("tMysqlInput_1_QUERY",dbquery_tMysqlInput_1);

		    java.sql.ResultSet rs_tMysqlInput_1 = null;
		try{
		    rs_tMysqlInput_1 = stmt_tMysqlInput_1.executeQuery(dbquery_tMysqlInput_1);
		    java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1.getMetaData();
		    int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1.getColumnCount();

		    String tmpContent_tMysqlInput_1 = null;
		    
		    
		    while (rs_tMysqlInput_1.next()) {
		        nb_line_tMysqlInput_1++;
		        
							if(colQtyInRs_tMysqlInput_1 < 1) {
								row1.facility_id = 0;
							} else {
		                          
            if(rs_tMysqlInput_1.getObject(1) != null) {
                row1.facility_id = rs_tMysqlInput_1.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 2) {
								row1.barrier_type_id = 0;
							} else {
		                          
            if(rs_tMysqlInput_1.getObject(2) != null) {
                row1.barrier_type_id = rs_tMysqlInput_1.getInt(2);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 3) {
								row1.count_of_data = 0;
							} else {
		                          
            if(rs_tMysqlInput_1.getObject(3) != null) {
                row1.count_of_data = rs_tMysqlInput_1.getInt(3);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 4) {
								row1.rag_status = null;
							} else {
	                         		
        	row1.rag_status = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 4, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 5) {
								row1.red_count = 0;
							} else {
		                          
            if(rs_tMysqlInput_1.getObject(5) != null) {
                row1.red_count = rs_tMysqlInput_1.getInt(5);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 6) {
								row1.amber_count = 0;
							} else {
		                          
            if(rs_tMysqlInput_1.getObject(6) != null) {
                row1.amber_count = rs_tMysqlInput_1.getInt(6);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 7) {
								row1.green_count = 0;
							} else {
		                          
            if(rs_tMysqlInput_1.getObject(7) != null) {
                row1.green_count = rs_tMysqlInput_1.getInt(7);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 8) {
								row1.created_at = null;
							} else {
										
	        if(rs_tMysqlInput_1.getString(8) != null) {
	            String dateString_tMysqlInput_1 = rs_tMysqlInput_1.getString(8);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_1) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_1)) {
	                row1.created_at = rs_tMysqlInput_1.getTimestamp(8);
	            } else {
	                row1.created_at = (java.util.Date) year0_tMysqlInput_1.clone();
	            }
	        } else {
	            row1.created_at =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_1 < 9) {
								row1.updated_at = null;
							} else {
										
	        if(rs_tMysqlInput_1.getString(9) != null) {
	            String dateString_tMysqlInput_1 = rs_tMysqlInput_1.getString(9);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_1) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_1)) {
	                row1.updated_at = rs_tMysqlInput_1.getTimestamp(9);
	            } else {
	                row1.updated_at = (java.util.Date) year0_tMysqlInput_1.clone();
	            }
	        } else {
	            row1.updated_at =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_1 < 10) {
								row1.snapshot_date = null;
							} else {
										
	        if(rs_tMysqlInput_1.getString(10) != null) {
	            String dateString_tMysqlInput_1 = rs_tMysqlInput_1.getString(10);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_1) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_1)) {
	                row1.snapshot_date = rs_tMysqlInput_1.getTimestamp(10);
	            } else {
	                row1.snapshot_date = (java.util.Date) year0_tMysqlInput_1.clone();
	            }
	        } else {
	            row1.snapshot_date =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_1 < 11) {
								row1.snapshot_pid = null;
							} else {
	                         		
        	row1.snapshot_pid = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 11, false);
		                    }
					

 



/**
 * [tMysqlInput_1 begin ] stop
 */
	
	/**
	 * [tMysqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 


	tos_count_tMysqlInput_1++;

/**
 * [tMysqlInput_1 main ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;
Var.snapshot_date = (Date)globalMap.get("snapshotdate") ;
Var.snapshot_pid = (String)globalMap.get("snapshotpid") ;// ###############################
        // ###############################
        // # Output tables

hjk = null;


// # Output table : 'hjk'
hjk_tmp.snapshot_date = Var.snapshot_date ;
hjk_tmp.facility_id = row1.facility_id;
hjk_tmp.barrier_type_id = row1.barrier_type_id;
hjk_tmp.count_of_data = row1.count_of_data;
hjk_tmp.rag_status = row1.rag_status;
hjk_tmp.red_count = row1.red_count;
hjk_tmp.amber_count = row1.amber_count;
hjk_tmp.green_count = row1.green_count;
hjk_tmp.end_dt = null;
hjk_tmp.created_at = row1.created_at;
hjk_tmp.updated_at = row1.updated_at;
hjk_tmp.start_dt = null;
hjk_tmp.snapshot_pid = Var.snapshot_pid ;
hjk_tmp.version_no = 0;
hjk_tmp.current_flag = false;
hjk = hjk_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
// Start of branch "hjk"
if(hjk != null) { 



	
	/**
	 * [tMysqlSCD_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlSCD_1";

	

			//hjk
			//hjk


			
				if(execStat){
					runStat.updateStatOnConnection("hjk"+iterateId,1, 1);
				} 
			

		

	try {
        lookUpKey_tMysqlSCD_1 = new SCDSK_tMysqlSCD_1();
            lookUpKey_tMysqlSCD_1.barrier_type_id = hjk.barrier_type_id;
            lookUpKey_tMysqlSCD_1.facility_id = hjk.facility_id;
        lookUpKey_tMysqlSCD_1.hashCodeDirty = true;
        lookUpValue_tMysqlSCD_1 = cache_tMysqlSCD_1.get(lookUpKey_tMysqlSCD_1);    
    if(lookUpValue_tMysqlSCD_1 == null) {
            lookUpValue_tMysqlSCD_1 = new SCDStruct_tMysqlSCD_1();
                lookUpValue_tMysqlSCD_1.version_no = 1;
        
                    insertionStatement_tMysqlSCD_1.setInt(1, hjk.barrier_type_id);

                    insertionStatement_tMysqlSCD_1.setInt(2, hjk.facility_id);

                    if(hjk.created_at == null) {
insertionStatement_tMysqlSCD_1.setNull(3, java.sql.Types.DATE);
} else {
if(hjk.created_at != null) {
date_tMysqlSCD_1 = hjk.created_at.getTime();
if(date_tMysqlSCD_1 < year1_tMysqlSCD_1 || date_tMysqlSCD_1 >= year10000_tMysqlSCD_1) {
insertionStatement_tMysqlSCD_1.setString(3, "0000-00-00 00:00:00");
} else {
insertionStatement_tMysqlSCD_1.setTimestamp(3, new java.sql.Timestamp(date_tMysqlSCD_1));
}
} else {
insertionStatement_tMysqlSCD_1.setNull(3, java.sql.Types.DATE);
}
}

                    if(hjk.updated_at == null) {
insertionStatement_tMysqlSCD_1.setNull(4, java.sql.Types.DATE);
} else {
if(hjk.updated_at != null) {
date_tMysqlSCD_1 = hjk.updated_at.getTime();
if(date_tMysqlSCD_1 < year1_tMysqlSCD_1 || date_tMysqlSCD_1 >= year10000_tMysqlSCD_1) {
insertionStatement_tMysqlSCD_1.setString(4, "0000-00-00 00:00:00");
} else {
insertionStatement_tMysqlSCD_1.setTimestamp(4, new java.sql.Timestamp(date_tMysqlSCD_1));
}
} else {
insertionStatement_tMysqlSCD_1.setNull(4, java.sql.Types.DATE);
}
}

                    insertionStatement_tMysqlSCD_1.setInt(5, hjk.amber_count);

                    insertionStatement_tMysqlSCD_1.setInt(6, hjk.count_of_data);

                    insertionStatement_tMysqlSCD_1.setInt(7, hjk.green_count);

                    if(hjk.rag_status == null) {
insertionStatement_tMysqlSCD_1.setNull(8, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(8, hjk.rag_status);
}

                    insertionStatement_tMysqlSCD_1.setInt(9, hjk.red_count);

                    if(hjk.snapshot_date == null) {
insertionStatement_tMysqlSCD_1.setNull(10, java.sql.Types.DATE);
} else {
if(hjk.snapshot_date != null) {
date_tMysqlSCD_1 = hjk.snapshot_date.getTime();
if(date_tMysqlSCD_1 < year1_tMysqlSCD_1 || date_tMysqlSCD_1 >= year10000_tMysqlSCD_1) {
insertionStatement_tMysqlSCD_1.setString(10, "0000-00-00 00:00:00");
} else {
insertionStatement_tMysqlSCD_1.setTimestamp(10, new java.sql.Timestamp(date_tMysqlSCD_1));
}
} else {
insertionStatement_tMysqlSCD_1.setNull(10, java.sql.Types.DATE);
}
}

                    if(hjk.snapshot_pid == null) {
insertionStatement_tMysqlSCD_1.setNull(11, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(11, hjk.snapshot_pid);
}

                int version_tMysqlSCD_1 = 1;
                insertionStatement_tMysqlSCD_1.setInt(12, version_tMysqlSCD_1);

        nb_line_inserted_tMysqlSCD_1 += insertionStatement_tMysqlSCD_1.executeUpdate();
    } else {
            if(lookUpValue_tMysqlSCD_1.amber_count != hjk.amber_count || lookUpValue_tMysqlSCD_1.count_of_data != hjk.count_of_data || lookUpValue_tMysqlSCD_1.green_count != hjk.green_count || (lookUpValue_tMysqlSCD_1.rag_status == null && hjk.rag_status!= null) || (lookUpValue_tMysqlSCD_1.rag_status != null && !lookUpValue_tMysqlSCD_1.rag_status.equals(hjk.rag_status)) || lookUpValue_tMysqlSCD_1.red_count != hjk.red_count || (lookUpValue_tMysqlSCD_1.snapshot_date == null && hjk.snapshot_date!= null) || ( ( lookUpValue_tMysqlSCD_1.snapshot_date != null && hjk.snapshot_date!= null ) && ( (( lookUpValue_tMysqlSCD_1.snapshot_date.getTime()-hjk.snapshot_date.getTime()) > 999) || (( lookUpValue_tMysqlSCD_1.snapshot_date.getTime()-hjk.snapshot_date.getTime() ) < -999) ))  || (lookUpValue_tMysqlSCD_1.snapshot_pid == null && hjk.snapshot_pid!= null) || (lookUpValue_tMysqlSCD_1.snapshot_pid != null && !lookUpValue_tMysqlSCD_1.snapshot_pid.equals(hjk.snapshot_pid))) {
                    updateForType2_tMysqlSCD_1.setInt(2, hjk.barrier_type_id);

                    updateForType2_tMysqlSCD_1.setInt(3, hjk.facility_id);

                nb_line_update_tMysqlSCD_1 += updateForType2_tMysqlSCD_1.executeUpdate();
                            insertionStatement_tMysqlSCD_1.setInt(1, hjk.barrier_type_id);

                            insertionStatement_tMysqlSCD_1.setInt(2, hjk.facility_id);

                            if(hjk.created_at == null) {
insertionStatement_tMysqlSCD_1.setNull(3, java.sql.Types.DATE);
} else {
if(hjk.created_at != null) {
date_tMysqlSCD_1 = hjk.created_at.getTime();
if(date_tMysqlSCD_1 < year1_tMysqlSCD_1 || date_tMysqlSCD_1 >= year10000_tMysqlSCD_1) {
insertionStatement_tMysqlSCD_1.setString(3, "0000-00-00 00:00:00");
} else {
insertionStatement_tMysqlSCD_1.setTimestamp(3, new java.sql.Timestamp(date_tMysqlSCD_1));
}
} else {
insertionStatement_tMysqlSCD_1.setNull(3, java.sql.Types.DATE);
}
}

                            if(hjk.updated_at == null) {
insertionStatement_tMysqlSCD_1.setNull(4, java.sql.Types.DATE);
} else {
if(hjk.updated_at != null) {
date_tMysqlSCD_1 = hjk.updated_at.getTime();
if(date_tMysqlSCD_1 < year1_tMysqlSCD_1 || date_tMysqlSCD_1 >= year10000_tMysqlSCD_1) {
insertionStatement_tMysqlSCD_1.setString(4, "0000-00-00 00:00:00");
} else {
insertionStatement_tMysqlSCD_1.setTimestamp(4, new java.sql.Timestamp(date_tMysqlSCD_1));
}
} else {
insertionStatement_tMysqlSCD_1.setNull(4, java.sql.Types.DATE);
}
}

                            insertionStatement_tMysqlSCD_1.setInt(5, hjk.amber_count);

                            insertionStatement_tMysqlSCD_1.setInt(6, hjk.count_of_data);

                            insertionStatement_tMysqlSCD_1.setInt(7, hjk.green_count);

                            if(hjk.rag_status == null) {
insertionStatement_tMysqlSCD_1.setNull(8, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(8, hjk.rag_status);
}

                            insertionStatement_tMysqlSCD_1.setInt(9, hjk.red_count);

                            if(hjk.snapshot_date == null) {
insertionStatement_tMysqlSCD_1.setNull(10, java.sql.Types.DATE);
} else {
if(hjk.snapshot_date != null) {
date_tMysqlSCD_1 = hjk.snapshot_date.getTime();
if(date_tMysqlSCD_1 < year1_tMysqlSCD_1 || date_tMysqlSCD_1 >= year10000_tMysqlSCD_1) {
insertionStatement_tMysqlSCD_1.setString(10, "0000-00-00 00:00:00");
} else {
insertionStatement_tMysqlSCD_1.setTimestamp(10, new java.sql.Timestamp(date_tMysqlSCD_1));
}
} else {
insertionStatement_tMysqlSCD_1.setNull(10, java.sql.Types.DATE);
}
}

                            if(hjk.snapshot_pid == null) {
insertionStatement_tMysqlSCD_1.setNull(11, java.sql.Types.VARCHAR);
} else {
insertionStatement_tMysqlSCD_1.setString(11, hjk.snapshot_pid);
}

                        int maxVersion_tMysqlSCD_1 = lookUpValue_tMysqlSCD_1.version_no + 1;
                            lookUpValue_tMysqlSCD_1.version_no = lookUpValue_tMysqlSCD_1.version_no + 1;                            
                        insertionStatement_tMysqlSCD_1.setInt(12, maxVersion_tMysqlSCD_1);

                nb_line_inserted_tMysqlSCD_1 += insertionStatement_tMysqlSCD_1.executeUpdate();
            }
    }
    
	} catch (java.lang.Exception e) {//catch
  		
                System.err.print(e.getMessage());
	}//end catch
                lookUpValue_tMysqlSCD_1.amber_count = hjk.amber_count;
                lookUpValue_tMysqlSCD_1.count_of_data = hjk.count_of_data;
                lookUpValue_tMysqlSCD_1.green_count = hjk.green_count;
                lookUpValue_tMysqlSCD_1.rag_status = hjk.rag_status;
                lookUpValue_tMysqlSCD_1.red_count = hjk.red_count;
                lookUpValue_tMysqlSCD_1.snapshot_date = hjk.snapshot_date;
                lookUpValue_tMysqlSCD_1.snapshot_pid = hjk.snapshot_pid;
        cache_tMysqlSCD_1.put(lookUpKey_tMysqlSCD_1, lookUpValue_tMysqlSCD_1);

 


	tos_count_tMysqlSCD_1++;

/**
 * [tMysqlSCD_1 main ] stop
 */

} // End of branch "hjk"







	
	/**
	 * [tMysqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

	}
}finally{
	if(rs_tMysqlInput_1 !=null){
		rs_tMysqlInput_1.close();
	}
	stmt_tMysqlInput_1.close();
		if(conn_tMysqlInput_1 != null && !conn_tMysqlInput_1.isClosed()) {
			
			conn_tMysqlInput_1.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_1_NB_LINE",nb_line_tMysqlInput_1);
		


 

ok_Hash.put("tMysqlInput_1", true);
end_Hash.put("tMysqlInput_1", System.currentTimeMillis());




/**
 * [tMysqlInput_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMysqlSCD_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlSCD_1";

	

    insertionStatement_tMysqlSCD_1.close();
        updateForType2_tMysqlSCD_1.close();
        if(connection_tMysqlSCD_1 != null && !connection_tMysqlSCD_1.isClosed()) {
            connection_tMysqlSCD_1.close();
        }
    globalMap.put("tMysqlSCD_1_NB_LINE_UPDATED", nb_line_update_tMysqlSCD_1);
    globalMap.put("tMysqlSCD_1_NB_LINE_INSERTED", nb_line_inserted_tMysqlSCD_1);
    globalMap.put("tMysqlSCD_1_NB_LINE_REJECTED",nb_line_rejected_tMysqlSCD_1);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("hjk"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlSCD_1", true);
end_Hash.put("tMysqlSCD_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tMysqlInput_2Process(globalMap);



/**
 * [tMysqlSCD_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 



/**
 * [tMysqlInput_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMysqlSCD_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlSCD_1";

	

 



/**
 * [tMysqlSCD_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class hjyStruct implements routines.system.IPersistableRow<hjyStruct> {
    final static byte[] commonByteArrayLock_BARRIER_PROJECT_refresh_asset_level_data = new byte[0];
    static byte[] commonByteArray_BARRIER_PROJECT_refresh_asset_level_data = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date snapshot_date;

				public java.util.Date getSnapshot_date () {
					return this.snapshot_date;
				}
				
			    public int facility_id;

				public int getFacility_id () {
					return this.facility_id;
				}
				
			    public int barrier_type_id;

				public int getBarrier_type_id () {
					return this.barrier_type_id;
				}
				
			    public int count_of_data;

				public int getCount_of_data () {
					return this.count_of_data;
				}
				
			    public String rag_status;

				public String getRag_status () {
					return this.rag_status;
				}
				
			    public int red_count;

				public int getRed_count () {
					return this.red_count;
				}
				
			    public int amber_count;

				public int getAmber_count () {
					return this.amber_count;
				}
				
			    public int green_count;

				public int getGreen_count () {
					return this.green_count;
				}
				
			    public String snapshot_pid;

				public String getSnapshot_pid () {
					return this.snapshot_pid;
				}
				
			    public java.util.Date created_at;

				public java.util.Date getCreated_at () {
					return this.created_at;
				}
				
			    public java.util.Date updated_at;

				public java.util.Date getUpdated_at () {
					return this.updated_at;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.snapshot_date == null) ? 0 : this.snapshot_date.hashCode());
					
							result = prime * result + (int) this.facility_id;
						
							result = prime * result + (int) this.barrier_type_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final hjyStruct other = (hjyStruct) obj;
		
						if (this.snapshot_date == null) {
							if (other.snapshot_date != null)
								return false;
						
						} else if (!this.snapshot_date.equals(other.snapshot_date))
						
							return false;
					
						if (this.facility_id != other.facility_id)
							return false;
					
						if (this.barrier_type_id != other.barrier_type_id)
							return false;
					

		return true;
    }

	public void copyDataTo(hjyStruct other) {

		other.snapshot_date = this.snapshot_date;
	            other.facility_id = this.facility_id;
	            other.barrier_type_id = this.barrier_type_id;
	            other.count_of_data = this.count_of_data;
	            other.rag_status = this.rag_status;
	            other.red_count = this.red_count;
	            other.amber_count = this.amber_count;
	            other.green_count = this.green_count;
	            other.snapshot_pid = this.snapshot_pid;
	            other.created_at = this.created_at;
	            other.updated_at = this.updated_at;
	            
	}

	public void copyKeysDataTo(hjyStruct other) {

		other.snapshot_date = this.snapshot_date;
	            	other.facility_id = this.facility_id;
	            	other.barrier_type_id = this.barrier_type_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BARRIER_PROJECT_refresh_asset_level_data.length) {
				if(length < 1024 && commonByteArray_BARRIER_PROJECT_refresh_asset_level_data.length == 0) {
   					commonByteArray_BARRIER_PROJECT_refresh_asset_level_data = new byte[1024];
				} else {
   					commonByteArray_BARRIER_PROJECT_refresh_asset_level_data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BARRIER_PROJECT_refresh_asset_level_data, 0, length);
			strReturn = new String(commonByteArray_BARRIER_PROJECT_refresh_asset_level_data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BARRIER_PROJECT_refresh_asset_level_data) {

        	try {

        		int length = 0;
		
					this.snapshot_date = readDate(dis);
					
			        this.facility_id = dis.readInt();
					
			        this.barrier_type_id = dis.readInt();
					
			        this.count_of_data = dis.readInt();
					
					this.rag_status = readString(dis);
					
			        this.red_count = dis.readInt();
					
			        this.amber_count = dis.readInt();
					
			        this.green_count = dis.readInt();
					
					this.snapshot_pid = readString(dis);
					
					this.created_at = readDate(dis);
					
					this.updated_at = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.snapshot_date,dos);
					
					// int
				
		            	dos.writeInt(this.facility_id);
					
					// int
				
		            	dos.writeInt(this.barrier_type_id);
					
					// int
				
		            	dos.writeInt(this.count_of_data);
					
					// String
				
						writeString(this.rag_status,dos);
					
					// int
				
		            	dos.writeInt(this.red_count);
					
					// int
				
		            	dos.writeInt(this.amber_count);
					
					// int
				
		            	dos.writeInt(this.green_count);
					
					// String
				
						writeString(this.snapshot_pid,dos);
					
					// java.util.Date
				
						writeDate(this.created_at,dos);
					
					// java.util.Date
				
						writeDate(this.updated_at,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("snapshot_date="+String.valueOf(snapshot_date));
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",barrier_type_id="+String.valueOf(barrier_type_id));
		sb.append(",count_of_data="+String.valueOf(count_of_data));
		sb.append(",rag_status="+rag_status);
		sb.append(",red_count="+String.valueOf(red_count));
		sb.append(",amber_count="+String.valueOf(amber_count));
		sb.append(",green_count="+String.valueOf(green_count));
		sb.append(",snapshot_pid="+snapshot_pid);
		sb.append(",created_at="+String.valueOf(created_at));
		sb.append(",updated_at="+String.valueOf(updated_at));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(hjyStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.snapshot_date, other.snapshot_date);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.facility_id, other.facility_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.barrier_type_id, other.barrier_type_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_BARRIER_PROJECT_refresh_asset_level_data = new byte[0];
    static byte[] commonByteArray_BARRIER_PROJECT_refresh_asset_level_data = new byte[0];

	
			    public java.util.Date snapshot_date;

				public java.util.Date getSnapshot_date () {
					return this.snapshot_date;
				}
				
			    public int facility_id;

				public int getFacility_id () {
					return this.facility_id;
				}
				
			    public int barrier_type_id;

				public int getBarrier_type_id () {
					return this.barrier_type_id;
				}
				
			    public int count_of_data;

				public int getCount_of_data () {
					return this.count_of_data;
				}
				
			    public String rag_status;

				public String getRag_status () {
					return this.rag_status;
				}
				
			    public int red_count;

				public int getRed_count () {
					return this.red_count;
				}
				
			    public int amber_count;

				public int getAmber_count () {
					return this.amber_count;
				}
				
			    public int green_count;

				public int getGreen_count () {
					return this.green_count;
				}
				
			    public java.util.Date end_dt;

				public java.util.Date getEnd_dt () {
					return this.end_dt;
				}
				
			    public java.util.Date created_at;

				public java.util.Date getCreated_at () {
					return this.created_at;
				}
				
			    public java.util.Date updated_at;

				public java.util.Date getUpdated_at () {
					return this.updated_at;
				}
				
			    public java.util.Date start_dt;

				public java.util.Date getStart_dt () {
					return this.start_dt;
				}
				
			    public String snapshot_pid;

				public String getSnapshot_pid () {
					return this.snapshot_pid;
				}
				
			    public int version_no;

				public int getVersion_no () {
					return this.version_no;
				}
				
			    public boolean current_flag;

				public boolean getCurrent_flag () {
					return this.current_flag;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BARRIER_PROJECT_refresh_asset_level_data.length) {
				if(length < 1024 && commonByteArray_BARRIER_PROJECT_refresh_asset_level_data.length == 0) {
   					commonByteArray_BARRIER_PROJECT_refresh_asset_level_data = new byte[1024];
				} else {
   					commonByteArray_BARRIER_PROJECT_refresh_asset_level_data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BARRIER_PROJECT_refresh_asset_level_data, 0, length);
			strReturn = new String(commonByteArray_BARRIER_PROJECT_refresh_asset_level_data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BARRIER_PROJECT_refresh_asset_level_data) {

        	try {

        		int length = 0;
		
					this.snapshot_date = readDate(dis);
					
			        this.facility_id = dis.readInt();
					
			        this.barrier_type_id = dis.readInt();
					
			        this.count_of_data = dis.readInt();
					
					this.rag_status = readString(dis);
					
			        this.red_count = dis.readInt();
					
			        this.amber_count = dis.readInt();
					
			        this.green_count = dis.readInt();
					
					this.end_dt = readDate(dis);
					
					this.created_at = readDate(dis);
					
					this.updated_at = readDate(dis);
					
					this.start_dt = readDate(dis);
					
					this.snapshot_pid = readString(dis);
					
			        this.version_no = dis.readInt();
					
			        this.current_flag = dis.readBoolean();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.snapshot_date,dos);
					
					// int
				
		            	dos.writeInt(this.facility_id);
					
					// int
				
		            	dos.writeInt(this.barrier_type_id);
					
					// int
				
		            	dos.writeInt(this.count_of_data);
					
					// String
				
						writeString(this.rag_status,dos);
					
					// int
				
		            	dos.writeInt(this.red_count);
					
					// int
				
		            	dos.writeInt(this.amber_count);
					
					// int
				
		            	dos.writeInt(this.green_count);
					
					// java.util.Date
				
						writeDate(this.end_dt,dos);
					
					// java.util.Date
				
						writeDate(this.created_at,dos);
					
					// java.util.Date
				
						writeDate(this.updated_at,dos);
					
					// java.util.Date
				
						writeDate(this.start_dt,dos);
					
					// String
				
						writeString(this.snapshot_pid,dos);
					
					// int
				
		            	dos.writeInt(this.version_no);
					
					// boolean
				
		            	dos.writeBoolean(this.current_flag);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("snapshot_date="+String.valueOf(snapshot_date));
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",barrier_type_id="+String.valueOf(barrier_type_id));
		sb.append(",count_of_data="+String.valueOf(count_of_data));
		sb.append(",rag_status="+rag_status);
		sb.append(",red_count="+String.valueOf(red_count));
		sb.append(",amber_count="+String.valueOf(amber_count));
		sb.append(",green_count="+String.valueOf(green_count));
		sb.append(",end_dt="+String.valueOf(end_dt));
		sb.append(",created_at="+String.valueOf(created_at));
		sb.append(",updated_at="+String.valueOf(updated_at));
		sb.append(",start_dt="+String.valueOf(start_dt));
		sb.append(",snapshot_pid="+snapshot_pid);
		sb.append(",version_no="+String.valueOf(version_no));
		sb.append(",current_flag="+String.valueOf(current_flag));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
hjyStruct hjy = new hjyStruct();





	
	/**
	 * [tMysqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_1", false);
		start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("hjy" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_1 = 0;
		
    	class BytesLimit65535_tMysqlOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_1().limitLog4jByte();






int nb_line_tMysqlOutput_1 = 0;
int nb_line_update_tMysqlOutput_1 = 0;
int nb_line_inserted_tMysqlOutput_1 = 0;
int nb_line_deleted_tMysqlOutput_1 = 0;
int nb_line_rejected_tMysqlOutput_1 = 0;

int deletedCount_tMysqlOutput_1=0;
int updatedCount_tMysqlOutput_1=0;
int insertedCount_tMysqlOutput_1=0;

int rejectedCount_tMysqlOutput_1=0;

String tableName_tMysqlOutput_1 = "asset_level_data";
boolean whetherReject_tMysqlOutput_1 = false;

java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
long date_tMysqlOutput_1;

java.sql.Connection conn_tMysqlOutput_1 = null;
		String dbProperties_tMysqlOutput_1 = context.barrier_AdditionalParams;
		String url_tMysqlOutput_1 = null;
		if(dbProperties_tMysqlOutput_1 == null || dbProperties_tMysqlOutput_1.trim().length() == 0) {
			url_tMysqlOutput_1 = "jdbc:mysql://" + context.barrier_Server + ":" + context.barrier_Port + "/" + context.barrier_Database + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_1 = context.barrier_AdditionalParams;
			if (!properties_tMysqlOutput_1.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_1 = "jdbc:mysql://" + context.barrier_Server + ":" + context.barrier_Port + "/" + context.barrier_Database + "?" + properties_tMysqlOutput_1;
		}
		String driverClass_tMysqlOutput_1 = "org.gjt.mm.mysql.Driver";
		
		String dbUser_tMysqlOutput_1 = context.barrier_Login;
		

		
	final String decryptedPassword_tMysqlOutput_1 = context.barrier_Password; 

		String dbPwd_tMysqlOutput_1 = decryptedPassword_tMysqlOutput_1;
		java.lang.Class.forName(driverClass_tMysqlOutput_1);
		
		conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(url_tMysqlOutput_1, dbUser_tMysqlOutput_1, dbPwd_tMysqlOutput_1);
		
	
	resourceMap.put("conn_tMysqlOutput_1", conn_tMysqlOutput_1);
        conn_tMysqlOutput_1.setAutoCommit(false);
        int commitEvery_tMysqlOutput_1 = 10000;
        int commitCounter_tMysqlOutput_1 = 0;

int count_tMysqlOutput_1=0;
    	
            java.sql.Statement stmtTruncCount_tMysqlOutput_1 = conn_tMysqlOutput_1.createStatement();
            java.sql.ResultSet rsTruncCount_tMysqlOutput_1 = stmtTruncCount_tMysqlOutput_1.executeQuery("SELECT COUNT(1) FROM `" + tableName_tMysqlOutput_1 + "`");
            int rsTruncCountNumber_tMysqlOutput_1 = 0;
            if(rsTruncCount_tMysqlOutput_1.next()) {
                rsTruncCountNumber_tMysqlOutput_1 = rsTruncCount_tMysqlOutput_1.getInt(1);
            }
            rsTruncCount_tMysqlOutput_1.close();
            stmtTruncCount_tMysqlOutput_1.close();
            java.sql.Statement stmtTrunc_tMysqlOutput_1 = conn_tMysqlOutput_1.createStatement();
            stmtTrunc_tMysqlOutput_1.executeUpdate("TRUNCATE TABLE `" + tableName_tMysqlOutput_1 + "`");
            deletedCount_tMysqlOutput_1 += rsTruncCountNumber_tMysqlOutput_1;
            stmtTrunc_tMysqlOutput_1.close();

				String insert_tMysqlOutput_1 = "INSERT INTO `" + "asset_level_data" + "` (`snapshot_date`,`facility_id`,`barrier_type_id`,`count_of_data`,`rag_status`,`red_count`,`amber_count`,`green_count`,`snapshot_pid`,`created_at`,`updated_at`) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
		        int batchSize_tMysqlOutput_1 = 100;
	   			int batchSizeCounter_tMysqlOutput_1=0;
		            
		        java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1.prepareStatement(insert_tMysqlOutput_1);


 



/**
 * [tMysqlOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
hjyStruct hjy_tmp = new hjyStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tMysqlInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_2", false);
		start_Hash.put("tMysqlInput_2", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_2";

	
		int tos_count_tMysqlInput_2 = 0;
		
    	class BytesLimit65535_tMysqlInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_2().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_2 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_2 = calendar_tMysqlInput_2.getTime();
		    int nb_line_tMysqlInput_2 = 0;
		    java.sql.Connection conn_tMysqlInput_2 = null;
				String driverClass_tMysqlInput_2 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_2);
			   	String dbUser_tMysqlInput_2 = context.barrier_Login;
			   	
        		
        		
        		
	final String decryptedPassword_tMysqlInput_2 = context.barrier_Password; 
			   	
		        String dbPwd_tMysqlInput_2 = decryptedPassword_tMysqlInput_2;
		        
				
				String url_tMysqlInput_2 = "jdbc:mysql://" + context.barrier_Server + ":" + context.barrier_Port + "/" + context.barrier_Database + "?" + context.barrier_AdditionalParams;
				
				conn_tMysqlInput_2 = java.sql.DriverManager.getConnection(url_tMysqlInput_2,dbUser_tMysqlInput_2,dbPwd_tMysqlInput_2);
		        
		    
			java.sql.Statement stmt_tMysqlInput_2 = conn_tMysqlInput_2.createStatement();

		    String dbquery_tMysqlInput_2 = "SELECT \n  `asset_level_data_version`.`snapshot_date`, \n  `asset_level_data_version`.`facility_id`, \n  `asset_level_data_version`.`barrier_type_id`, \n  `asset_level_data_version`.`count_of_data`, \n  `asset_level_data_version`.`rag_status`, \n  `asset_level_data_version`.`red_count`, \n  `asset_level_data_version`.`amber_count`, \n  `asset_level_data_version`.`green_count`, \n  `asset_level_data_version`.`end_dt`, \n  `asset_level_data_version`.`created_at`, \n  `asset_level_data_version`.`updated_at`, \n  `asset_level_data_version`.`start_dt`, \n  `asset_level_data_version`.`snapshot_pid`, \n  `asset_level_data_version`.`version_no`, \n  `asset_level_data_version`.`current_flag`\nFROM `asset_level_data_version`\nWhere `asset_level_data_version`.`current_flag` = 1";
			

                       globalMap.put("tMysqlInput_2_QUERY",dbquery_tMysqlInput_2);

		    java.sql.ResultSet rs_tMysqlInput_2 = null;
		try{
		    rs_tMysqlInput_2 = stmt_tMysqlInput_2.executeQuery(dbquery_tMysqlInput_2);
		    java.sql.ResultSetMetaData rsmd_tMysqlInput_2 = rs_tMysqlInput_2.getMetaData();
		    int colQtyInRs_tMysqlInput_2 = rsmd_tMysqlInput_2.getColumnCount();

		    String tmpContent_tMysqlInput_2 = null;
		    
		    
		    while (rs_tMysqlInput_2.next()) {
		        nb_line_tMysqlInput_2++;
		        
							if(colQtyInRs_tMysqlInput_2 < 1) {
								row2.snapshot_date = null;
							} else {
										
	        if(rs_tMysqlInput_2.getString(1) != null) {
	            String dateString_tMysqlInput_2 = rs_tMysqlInput_2.getString(1);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_2) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_2)) {
	                row2.snapshot_date = rs_tMysqlInput_2.getTimestamp(1);
	            } else {
	                row2.snapshot_date = (java.util.Date) year0_tMysqlInput_2.clone();
	            }
	        } else {
	            row2.snapshot_date =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_2 < 2) {
								row2.facility_id = 0;
							} else {
		                          
            if(rs_tMysqlInput_2.getObject(2) != null) {
                row2.facility_id = rs_tMysqlInput_2.getInt(2);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_2 < 3) {
								row2.barrier_type_id = 0;
							} else {
		                          
            if(rs_tMysqlInput_2.getObject(3) != null) {
                row2.barrier_type_id = rs_tMysqlInput_2.getInt(3);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_2 < 4) {
								row2.count_of_data = 0;
							} else {
		                          
            if(rs_tMysqlInput_2.getObject(4) != null) {
                row2.count_of_data = rs_tMysqlInput_2.getInt(4);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_2 < 5) {
								row2.rag_status = null;
							} else {
	                         		
        	row2.rag_status = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 5, false);
		                    }
							if(colQtyInRs_tMysqlInput_2 < 6) {
								row2.red_count = 0;
							} else {
		                          
            if(rs_tMysqlInput_2.getObject(6) != null) {
                row2.red_count = rs_tMysqlInput_2.getInt(6);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_2 < 7) {
								row2.amber_count = 0;
							} else {
		                          
            if(rs_tMysqlInput_2.getObject(7) != null) {
                row2.amber_count = rs_tMysqlInput_2.getInt(7);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_2 < 8) {
								row2.green_count = 0;
							} else {
		                          
            if(rs_tMysqlInput_2.getObject(8) != null) {
                row2.green_count = rs_tMysqlInput_2.getInt(8);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_2 < 9) {
								row2.end_dt = null;
							} else {
										
	        if(rs_tMysqlInput_2.getString(9) != null) {
	            String dateString_tMysqlInput_2 = rs_tMysqlInput_2.getString(9);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_2) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_2)) {
	                row2.end_dt = rs_tMysqlInput_2.getTimestamp(9);
	            } else {
	                row2.end_dt = (java.util.Date) year0_tMysqlInput_2.clone();
	            }
	        } else {
	            row2.end_dt =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_2 < 10) {
								row2.created_at = null;
							} else {
										
	        if(rs_tMysqlInput_2.getString(10) != null) {
	            String dateString_tMysqlInput_2 = rs_tMysqlInput_2.getString(10);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_2) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_2)) {
	                row2.created_at = rs_tMysqlInput_2.getTimestamp(10);
	            } else {
	                row2.created_at = (java.util.Date) year0_tMysqlInput_2.clone();
	            }
	        } else {
	            row2.created_at =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_2 < 11) {
								row2.updated_at = null;
							} else {
										
	        if(rs_tMysqlInput_2.getString(11) != null) {
	            String dateString_tMysqlInput_2 = rs_tMysqlInput_2.getString(11);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_2) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_2)) {
	                row2.updated_at = rs_tMysqlInput_2.getTimestamp(11);
	            } else {
	                row2.updated_at = (java.util.Date) year0_tMysqlInput_2.clone();
	            }
	        } else {
	            row2.updated_at =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_2 < 12) {
								row2.start_dt = null;
							} else {
										
	        if(rs_tMysqlInput_2.getString(12) != null) {
	            String dateString_tMysqlInput_2 = rs_tMysqlInput_2.getString(12);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_2) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_2)) {
	                row2.start_dt = rs_tMysqlInput_2.getTimestamp(12);
	            } else {
	                row2.start_dt = (java.util.Date) year0_tMysqlInput_2.clone();
	            }
	        } else {
	            row2.start_dt =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_2 < 13) {
								row2.snapshot_pid = null;
							} else {
	                         		
        	row2.snapshot_pid = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 13, false);
		                    }
							if(colQtyInRs_tMysqlInput_2 < 14) {
								row2.version_no = 0;
							} else {
		                          
            if(rs_tMysqlInput_2.getObject(14) != null) {
                row2.version_no = rs_tMysqlInput_2.getInt(14);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_2 < 15) {
								row2.current_flag = false;
							} else {
	                         		
            if(rs_tMysqlInput_2.getObject(15) != null) {
                row2.current_flag = rs_tMysqlInput_2.getBoolean(15);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					

 



/**
 * [tMysqlInput_2 begin ] stop
 */
	
	/**
	 * [tMysqlInput_2 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 


	tos_count_tMysqlInput_2++;

/**
 * [tMysqlInput_2 main ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

hjy = null;


// # Output table : 'hjy'
hjy_tmp.snapshot_date = row2.snapshot_date;
hjy_tmp.facility_id = row2.facility_id;
hjy_tmp.barrier_type_id = row2.barrier_type_id;
hjy_tmp.count_of_data = row2.count_of_data;
hjy_tmp.rag_status = row2.rag_status;
hjy_tmp.red_count = row2.red_count;
hjy_tmp.amber_count = row2.amber_count;
hjy_tmp.green_count = row2.green_count;
hjy_tmp.snapshot_pid = row2.snapshot_pid;
hjy_tmp.created_at = row2.created_at;
hjy_tmp.updated_at = row2.updated_at;
hjy = hjy_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "hjy"
if(hjy != null) { 



	
	/**
	 * [tMysqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	

			//hjy
			//hjy


			
				if(execStat){
					runStat.updateStatOnConnection("hjy"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_1 = false;
                            if(hjy.snapshot_date != null) {
date_tMysqlOutput_1 = hjy.snapshot_date.getTime();
if(date_tMysqlOutput_1 < year1_tMysqlOutput_1 || date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
pstmt_tMysqlOutput_1.setString(1, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_1.setTimestamp(1, new java.sql.Timestamp(date_tMysqlOutput_1));
}
} else {
pstmt_tMysqlOutput_1.setNull(1, java.sql.Types.DATE);
}

                            pstmt_tMysqlOutput_1.setInt(2, hjy.facility_id);

                            pstmt_tMysqlOutput_1.setInt(3, hjy.barrier_type_id);

                            pstmt_tMysqlOutput_1.setInt(4, hjy.count_of_data);

                            if(hjy.rag_status == null) {
pstmt_tMysqlOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(5, hjy.rag_status);
}

                            pstmt_tMysqlOutput_1.setInt(6, hjy.red_count);

                            pstmt_tMysqlOutput_1.setInt(7, hjy.amber_count);

                            pstmt_tMysqlOutput_1.setInt(8, hjy.green_count);

                            if(hjy.snapshot_pid == null) {
pstmt_tMysqlOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(9, hjy.snapshot_pid);
}

                            if(hjy.created_at != null) {
date_tMysqlOutput_1 = hjy.created_at.getTime();
if(date_tMysqlOutput_1 < year1_tMysqlOutput_1 || date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
pstmt_tMysqlOutput_1.setString(10, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_1.setTimestamp(10, new java.sql.Timestamp(date_tMysqlOutput_1));
}
} else {
pstmt_tMysqlOutput_1.setNull(10, java.sql.Types.DATE);
}

                            if(hjy.updated_at != null) {
date_tMysqlOutput_1 = hjy.updated_at.getTime();
if(date_tMysqlOutput_1 < year1_tMysqlOutput_1 || date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
pstmt_tMysqlOutput_1.setString(11, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_1.setTimestamp(11, new java.sql.Timestamp(date_tMysqlOutput_1));
}
} else {
pstmt_tMysqlOutput_1.setNull(11, java.sql.Types.DATE);
}

                    pstmt_tMysqlOutput_1.addBatch();
                    nb_line_tMysqlOutput_1++;

                      batchSizeCounter_tMysqlOutput_1++;
                if ( batchSize_tMysqlOutput_1 <= batchSizeCounter_tMysqlOutput_1) {
                try {
                        int countSum_tMysqlOutput_1 = 0;
                        for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
                            countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_1 = 0;
                    for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
                    }
                    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tMysqlOutput_1 = 0;
            }
                commitCounter_tMysqlOutput_1++;

                if(commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

                try {
                        int countSum_tMysqlOutput_1 = 0;
                        for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
                            countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_1 = 0;
                    for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
                    }
                    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                    System.err.println(e.getMessage());

                }
                    conn_tMysqlOutput_1.commit();
                    commitCounter_tMysqlOutput_1=0;

                }


 


	tos_count_tMysqlOutput_1++;

/**
 * [tMysqlOutput_1 main ] stop
 */

} // End of branch "hjy"







	
	/**
	 * [tMysqlInput_2 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

	}
}finally{
	if(rs_tMysqlInput_2 !=null){
		rs_tMysqlInput_2.close();
	}
	stmt_tMysqlInput_2.close();
		if(conn_tMysqlInput_2 != null && !conn_tMysqlInput_2.isClosed()) {
			
			conn_tMysqlInput_2.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_2_NB_LINE",nb_line_tMysqlInput_2);
		


 

ok_Hash.put("tMysqlInput_2", true);
end_Hash.put("tMysqlInput_2", System.currentTimeMillis());




/**
 * [tMysqlInput_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMysqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



                try {
                		if (batchSizeCounter_tMysqlOutput_1 != 0) {
							int countSum_tMysqlOutput_1 = 0;
							
							for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
								countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tMysqlOutput_1 = 0;
					for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
						countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
					}
					
            	    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tMysqlOutput_1 = 0;
    		
	

        if(pstmt_tMysqlOutput_1 != null) {
			
				pstmt_tMysqlOutput_1.close();
			
        }

    	if (commitCounter_tMysqlOutput_1 > 0) {
    		
    		conn_tMysqlOutput_1.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_1 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_1", true);
    	

	nb_line_deleted_tMysqlOutput_1=nb_line_deleted_tMysqlOutput_1+ deletedCount_tMysqlOutput_1;
	nb_line_update_tMysqlOutput_1=nb_line_update_tMysqlOutput_1 + updatedCount_tMysqlOutput_1;
	nb_line_inserted_tMysqlOutput_1=nb_line_inserted_tMysqlOutput_1 + insertedCount_tMysqlOutput_1;
	nb_line_rejected_tMysqlOutput_1=nb_line_rejected_tMysqlOutput_1 + rejectedCount_tMysqlOutput_1;
	
        globalMap.put("tMysqlOutput_1_NB_LINE",nb_line_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("hjy"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_1", true);
end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());




/**
 * [tMysqlOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_2 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 



/**
 * [tMysqlInput_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



	
		if(resourceMap.get("finish_tMysqlOutput_1")==null){
			if(resourceMap.get("conn_tMysqlOutput_1")!=null){
				try {
					
					
					java.sql.Connection ctn_tMysqlOutput_1 = (java.sql.Connection)resourceMap.get("conn_tMysqlOutput_1");
					
					
            		
					ctn_tMysqlOutput_1.close();
					
				} catch (java.sql.SQLException sqlEx_tMysqlOutput_1) {
					String errorMessage_tMysqlOutput_1 = "failed to close the connection in tMysqlOutput_1 :" + sqlEx_tMysqlOutput_1.getMessage();
					
					System.err.println(errorMessage_tMysqlOutput_1);
				}
			}
		}
	

 



/**
 * [tMysqlOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		
    	class BytesLimit65535_tPrejob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPrejob_1().limitLog4jByte();

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_BARRIER_PROJECT_refresh_asset_level_data = new byte[0];
    static byte[] commonByteArray_BARRIER_PROJECT_refresh_asset_level_data = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BARRIER_PROJECT_refresh_asset_level_data.length) {
				if(length < 1024 && commonByteArray_BARRIER_PROJECT_refresh_asset_level_data.length == 0) {
   					commonByteArray_BARRIER_PROJECT_refresh_asset_level_data = new byte[1024];
				} else {
   					commonByteArray_BARRIER_PROJECT_refresh_asset_level_data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BARRIER_PROJECT_refresh_asset_level_data, 0, length);
			strReturn = new String(commonByteArray_BARRIER_PROJECT_refresh_asset_level_data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BARRIER_PROJECT_refresh_asset_level_data) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.root_pid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",root_pid="+root_pid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_BARRIER_PROJECT_refresh_asset_level_data = new byte[0];
    static byte[] commonByteArray_BARRIER_PROJECT_refresh_asset_level_data = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BARRIER_PROJECT_refresh_asset_level_data.length) {
				if(length < 1024 && commonByteArray_BARRIER_PROJECT_refresh_asset_level_data.length == 0) {
   					commonByteArray_BARRIER_PROJECT_refresh_asset_level_data = new byte[1024];
				} else {
   					commonByteArray_BARRIER_PROJECT_refresh_asset_level_data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BARRIER_PROJECT_refresh_asset_level_data, 0, length);
			strReturn = new String(commonByteArray_BARRIER_PROJECT_refresh_asset_level_data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BARRIER_PROJECT_refresh_asset_level_data) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.root_pid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",root_pid="+root_pid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
row4Struct row3 = row4;





	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSetGlobalVar_1 = 0;
		
    	class BytesLimit65535_tSetGlobalVar_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSetGlobalVar_1().limitLog4jByte();

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */



	
	/**
	 * [tBufferOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_1", false);
		start_Hash.put("tBufferOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tBufferOutput_1 = 0;
		
    	class BytesLimit65535_tBufferOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tBufferOutput_1().limitLog4jByte();

 



/**
 * [tBufferOutput_1 begin ] stop
 */



	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		
    	class BytesLimit65535_tRunJob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_1().limitLog4jByte();


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        			paraList_tRunJob_1.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = context.this_level_job_name;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param Job_name=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param Job_name=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("Job_name", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.this_level_job_pre;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param parent_job_pre=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param parent_job_pre=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("parent_job_pre", obj_tRunJob_1);
	
	
		barrier_project.sendemailjobprocessstatus_0_1.SendEmailJobProcessStatus childJob_tRunJob_1 = new barrier_project.sendemailjobprocessstatus_0_1.SendEmailJobProcessStatus();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
	  	
				errorCode = childJob_tRunJob_1.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_1.getErrorCode() == null){
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
		    }
		    if (childJob_tRunJob_1.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_1.getExceptionStackTrace());
				}
			
	  	
			for (String[] item_tRunJob_1 : childReturn_tRunJob_1) { 
				if(childJob_tRunJob_1.hastBufferOutputComponent() || true){
			    			
						if(0 < item_tRunJob_1.length){				
			           		
				           		row4.moment = ParserUtils.parseTo_Date(item_tRunJob_1[0], "yyyy-MM-dd HH:mm:ss");
			           		
		           		}else{
			           		row4.moment = null;
		           		}
							
						if(1 < item_tRunJob_1.length){				
			           		
				           		row4.root_pid = item_tRunJob_1[1];
			           		
		           		}else{
			           		row4.root_pid = null;
		           		}
					
				}
		
 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */

	
	/**
	 * [tBufferOutput_1 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		



String[] row_tBufferOutput_1=new String[]{"","",};		
	    if(row4.moment != null){
	        
	            row_tBufferOutput_1[0] = FormatterUtils.format_Date(row4.moment, "yyyy-MM-dd HH:mm:ss");
	                        			    
	    }else{
	    	row_tBufferOutput_1[0] = null;
	    }
	    if(row4.root_pid != null){
	        
	            row_tBufferOutput_1[1] = row4.root_pid;
	                        			    
	    }else{
	    	row_tBufferOutput_1[1] = null;
	    }
	globalBuffer.add(row_tBufferOutput_1);	
	
 
     row3 = row4;


	tos_count_tBufferOutput_1++;

/**
 * [tBufferOutput_1 main ] stop
 */

	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

globalMap.put("snapshotdate", row3.moment);
globalMap.put("snapshotpid", row3.root_pid);

 


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */





	
		} // C_01
	
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */

	
	/**
	 * [tBufferOutput_1 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tBufferOutput_1", true);
end_Hash.put("tBufferOutput_1", System.currentTimeMillis());




/**
 * [tBufferOutput_1 end ] stop
 */

	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());




/**
 * [tSetGlobalVar_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */

	
	/**
	 * [tBufferOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

 



/**
 * [tBufferOutput_1 finally ] stop
 */

	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		
    	class BytesLimit65535_tPostjob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostjob_1().limitLog4jByte();

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tRunJob_2Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";

	
		int tos_count_tRunJob_2 = 0;
		
    	class BytesLimit65535_tRunJob_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_2().limitLog4jByte();


 



/**
 * [tRunJob_2 begin ] stop
 */
	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_2.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_2.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_2.add("--father_node=tRunJob_2");
	      			
	        			paraList_tRunJob_2.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_2 = null;

	
		obj_tRunJob_2 = context.this_level_job_name;
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param Job_name=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param Job_name=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("Job_name", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.this_level_job_post;
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param parent_job_post=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param parent_job_post=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("parent_job_post", obj_tRunJob_2);
	
	
		barrier_project.sendemailjobprocessstatus_0_1.SendEmailJobProcessStatus childJob_tRunJob_2 = new barrier_project.sendemailjobprocessstatus_0_1.SendEmailJobProcessStatus();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_2) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
			        .entrySet()) {
	            dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
	                    talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
	    }
		  
			childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
		  
		
		String[][] childReturn_tRunJob_2 = childJob_tRunJob_2.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));
		
	  	
				errorCode = childJob_tRunJob_2.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_2.getErrorCode() == null){
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
		    }
		    if (childJob_tRunJob_2.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_2.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());




/**
 * [tRunJob_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final refresh_asset_level_data refresh_asset_level_dataClass = new refresh_asset_level_data();

        int exitCode = refresh_asset_level_dataClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = (String[][])globalBuffer.toArray(new String[globalBuffer.size()][]);

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        		hastBufferOutput = true;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = refresh_asset_level_data.class.getClassLoader().getResourceAsStream("barrier_project/refresh_asset_level_data_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("this_level_job_name", "id_String");
				
                context.this_level_job_name=(String) context.getProperty("this_level_job_name");
				    context.setContextType("this_level_job_pre", "id_String");
				
                context.this_level_job_pre=(String) context.getProperty("this_level_job_pre");
				    context.setContextType("this_level_job_post", "id_String");
				
                context.this_level_job_post=(String) context.getProperty("this_level_job_post");
				    context.setContextType("barrier_AdditionalParams", "id_String");
				
                context.barrier_AdditionalParams=(String) context.getProperty("barrier_AdditionalParams");
				    context.setContextType("barrier_Login", "id_String");
				
                context.barrier_Login=(String) context.getProperty("barrier_Login");
				    context.setContextType("barrier_Server", "id_String");
				
                context.barrier_Server=(String) context.getProperty("barrier_Server");
				    context.setContextType("barrier_Database", "id_String");
				
                context.barrier_Database=(String) context.getProperty("barrier_Database");
				    context.setContextType("barrier_Password", "id_Password");
				
            		String pwd_barrier_Password_value = context.getProperty("barrier_Password");
            		context.barrier_Password = null;
            		if(pwd_barrier_Password_value!=null) {
            			if(context_param.containsKey("barrier_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.barrier_Password = pwd_barrier_Password_value;
            			} else if (!pwd_barrier_Password_value.isEmpty()) {
            				try {
            					context.barrier_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_barrier_Password_value);
            					context.put("barrier_Password",context.barrier_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("barrier_Port", "id_String");
				
                context.barrier_Port=(String) context.getProperty("barrier_Port");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("this_level_job_name")) {
                context.this_level_job_name = (String) parentContextMap.get("this_level_job_name");
            }if (parentContextMap.containsKey("this_level_job_pre")) {
                context.this_level_job_pre = (String) parentContextMap.get("this_level_job_pre");
            }if (parentContextMap.containsKey("this_level_job_post")) {
                context.this_level_job_post = (String) parentContextMap.get("this_level_job_post");
            }if (parentContextMap.containsKey("barrier_AdditionalParams")) {
                context.barrier_AdditionalParams = (String) parentContextMap.get("barrier_AdditionalParams");
            }if (parentContextMap.containsKey("barrier_Login")) {
                context.barrier_Login = (String) parentContextMap.get("barrier_Login");
            }if (parentContextMap.containsKey("barrier_Server")) {
                context.barrier_Server = (String) parentContextMap.get("barrier_Server");
            }if (parentContextMap.containsKey("barrier_Database")) {
                context.barrier_Database = (String) parentContextMap.get("barrier_Database");
            }if (parentContextMap.containsKey("barrier_Password")) {
                context.barrier_Password = (java.lang.String) parentContextMap.get("barrier_Password");
            }if (parentContextMap.containsKey("barrier_Port")) {
                context.barrier_Port = (String) parentContextMap.get("barrier_Port");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("barrier_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tMysqlInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tMysqlInput_1) {
globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", -1);

e_tMysqlInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : refresh_asset_level_data");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     158150 characters generated by Talend Open Studio for Data Integration 
 *     on the 29 November 2017 08:44:02 GMT
 ************************************************************************************************/