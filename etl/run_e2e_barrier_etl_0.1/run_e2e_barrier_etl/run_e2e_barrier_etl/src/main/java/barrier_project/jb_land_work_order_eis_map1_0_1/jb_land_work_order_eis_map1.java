// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package barrier_project.jb_land_work_order_eis_map1_0_1;

import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.Mathematical;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: jb_land_work_order_eis_map1 Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.4.1.20170623_1246
 * @status 
 */
public class jb_land_work_order_eis_map1 implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(this_level_job_name != null){
				
					this.setProperty("this_level_job_name", this_level_job_name.toString());
				
			}
			
			if(this_level_job_pre != null){
				
					this.setProperty("this_level_job_pre", this_level_job_pre.toString());
				
			}
			
			if(this_level_job_post != null){
				
					this.setProperty("this_level_job_post", this_level_job_post.toString());
				
			}
			
			if(barrier_landing_conn_AdditionalParams != null){
				
					this.setProperty("barrier_landing_conn_AdditionalParams", barrier_landing_conn_AdditionalParams.toString());
				
			}
			
			if(barrier_landing_conn_Database != null){
				
					this.setProperty("barrier_landing_conn_Database", barrier_landing_conn_Database.toString());
				
			}
			
			if(barrier_landing_conn_Login != null){
				
					this.setProperty("barrier_landing_conn_Login", barrier_landing_conn_Login.toString());
				
			}
			
			if(barrier_landing_conn_Password != null){
				
					this.setProperty("barrier_landing_conn_Password", barrier_landing_conn_Password.toString());
				
			}
			
			if(barrier_landing_conn_Port != null){
				
					this.setProperty("barrier_landing_conn_Port", barrier_landing_conn_Port.toString());
				
			}
			
			if(barrier_landing_conn_Server != null){
				
					this.setProperty("barrier_landing_conn_Server", barrier_landing_conn_Server.toString());
				
			}
			
			if(etl_data_home != null){
				
					this.setProperty("etl_data_home", etl_data_home.toString());
				
			}
			
		}

public String this_level_job_name;
public String getThis_level_job_name(){
	return this.this_level_job_name;
}
public String this_level_job_pre;
public String getThis_level_job_pre(){
	return this.this_level_job_pre;
}
public String this_level_job_post;
public String getThis_level_job_post(){
	return this.this_level_job_post;
}
public String barrier_landing_conn_AdditionalParams;
public String getBarrier_landing_conn_AdditionalParams(){
	return this.barrier_landing_conn_AdditionalParams;
}
public String barrier_landing_conn_Database;
public String getBarrier_landing_conn_Database(){
	return this.barrier_landing_conn_Database;
}
public String barrier_landing_conn_Login;
public String getBarrier_landing_conn_Login(){
	return this.barrier_landing_conn_Login;
}
public java.lang.String barrier_landing_conn_Password;
public java.lang.String getBarrier_landing_conn_Password(){
	return this.barrier_landing_conn_Password;
}
public String barrier_landing_conn_Port;
public String getBarrier_landing_conn_Port(){
	return this.barrier_landing_conn_Port;
}
public String barrier_landing_conn_Server;
public String getBarrier_landing_conn_Server(){
	return this.barrier_landing_conn_Server;
}
public String etl_data_home;
public String getEtl_data_home(){
	return this.etl_data_home;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "jb_land_work_order_eis_map1";
	private final String projectName = "BARRIER_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				jb_land_work_order_eis_map1.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(jb_land_work_order_eis_map1.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class map_eis_map1Struct implements routines.system.IPersistableRow<map_eis_map1Struct> {
    final static byte[] commonByteArrayLock_BARRIER_PROJECT_jb_land_work_order_eis_map1 = new byte[0];
    static byte[] commonByteArray_BARRIER_PROJECT_jb_land_work_order_eis_map1 = new byte[0];

	
			    public String functional_loc;

				public String getFunctional_loc () {
					return this.functional_loc;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String order_type;

				public String getOrder_type () {
					return this.order_type;
				}
				
			    public String Order;

				public String getOrder () {
					return this.Order;
				}
				
			    public String maint_activ_type;

				public String getMaint_activ_type () {
					return this.maint_activ_type;
				}
				
			    public String description_4;

				public String getDescription_4 () {
					return this.description_4;
				}
				
			    public String planner_group;

				public String getPlanner_group () {
					return this.planner_group;
				}
				
			    public String main_work_ctr;

				public String getMain_work_ctr () {
					return this.main_work_ctr;
				}
				
			    public String user_status;

				public String getUser_status () {
					return this.user_status;
				}
				
			    public String system_status;

				public String getSystem_status () {
					return this.system_status;
				}
				
			    public String Priority;

				public String getPriority () {
					return this.Priority;
				}
				
			    public String estimated_costs;

				public String getEstimated_costs () {
					return this.estimated_costs;
				}
				
			    public String total_act_costs;

				public String getTotal_act_costs () {
					return this.total_act_costs;
				}
				
			    public String total_settlemt;

				public String getTotal_settlemt () {
					return this.total_settlemt;
				}
				
			    public String total_plnnd_costs;

				public String getTotal_plnnd_costs () {
					return this.total_plnnd_costs;
				}
				
			    public String tot_sum_plan;

				public String getTot_sum_plan () {
					return this.tot_sum_plan;
				}
				
			    public String total_rev_act;

				public String getTotal_rev_act () {
					return this.total_rev_act;
				}
				
			    public String tot_plan_rev;

				public String getTot_plan_rev () {
					return this.tot_plan_rev;
				}
				
			    public String tot_sum_actual;

				public String getTot_sum_actual () {
					return this.tot_sum_actual;
				}
				
			    public String abc_indic;

				public String getAbc_indic () {
					return this.abc_indic;
				}
				
			    public String reference_date;

				public String getReference_date () {
					return this.reference_date;
				}
				
			    public String ref_element_pm_ps;

				public String getRef_element_pm_ps () {
					return this.ref_element_pm_ps;
				}
				
			    public String address_number;

				public String getAddress_number () {
					return this.address_number;
				}
				
			    public String reference_time;

				public String getReference_time () {
					return this.reference_time;
				}
				
			    public String changed_on;

				public String getChanged_on () {
					return this.changed_on;
				}
				
			    public String changed_by;

				public String getChanged_by () {
					return this.changed_by;
				}
				
			    public String available_to;

				public String getAvailable_to () {
					return this.available_to;
				}
				
			    public String avail_to_time;

				public String getAvail_to_time () {
					return this.avail_to_time;
				}
				
			    public String asset;

				public String getAsset () {
					return this.asset;
				}
				
			    public String sub_number;

				public String getSub_number () {
					return this.sub_number;
				}
				
			    public String available_from;

				public String getAvailable_from () {
					return this.available_from;
				}
				
			    public String available_from30;

				public String getAvailable_from30 () {
					return this.available_from30;
				}
				
			    public String system_condition;

				public String getSystem_condition () {
					return this.system_condition;
				}
				
			    public String work_center;

				public String getWork_center () {
					return this.work_center;
				}
				
			    public String priority_type;

				public String getPriority_type () {
					return this.priority_type;
				}
				
			    public String res_purc_req;

				public String getRes_purc_req () {
					return this.res_purc_req;
				}
				
			    public String subnet_work_of;

				public String getSubnet_work_of () {
					return this.subnet_work_of;
				}
				
			    public String order_category;

				public String getOrder_category () {
					return this.order_category;
				}
				
			    public String plant_wk_cntr;

				public String getPlant_wk_cntr () {
					return this.plant_wk_cntr;
				}
				
			    public String assembly;

				public String getAssembly () {
					return this.assembly;
				}
				
			    public String assembly_desc;

				public String getAssembly_desc () {
					return this.assembly_desc;
				}
				
			    public String plant_section;

				public String getPlant_section () {
					return this.plant_section;
				}
				
			    public String acctg_indicator;

				public String getAcctg_indicator () {
					return this.acctg_indicator;
				}
				
			    public String po_date;

				public String getPo_date () {
					return this.po_date;
				}
				
			    public String po_number;

				public String getPo_number () {
					return this.po_number;
				}
				
			    public String company_code;

				public String getCompany_code () {
					return this.company_code;
				}
				
			    public String city;

				public String getCity () {
					return this.city;
				}
				
			    public String district;

				public String getDistrict () {
					return this.district;
				}
				
			    public String country;

				public String getCountry () {
					return this.country;
				}
				
			    public String device_data;

				public String getDevice_data () {
					return this.device_data;
				}
				
			    public String sort_field;

				public String getSort_field () {
					return this.sort_field;
				}
				
			    public String description_50;

				public String getDescription_50 () {
					return this.description_50;
				}
				
			    public String equipment;

				public String getEquipment () {
					return this.equipment;
				}
				
			    public String created_on;

				public String getCreated_on () {
					return this.created_on;
				}
				
			    public String entered_by;

				public String getEntered_by () {
					return this.entered_by;
				}
				
			    public String billingform;

				public String getBillingform () {
					return this.billingform;
				}
				
			    public String actual_release;

				public String getActual_release () {
					return this.actual_release;
				}
				
			    public String actual_finish;

				public String getActual_finish () {
					return this.actual_finish;
				}
				
			    public String actual_finish1;

				public String getActual_finish1 () {
					return this.actual_finish1;
				}
				
			    public String basic_fin_date;

				public String getBasic_fin_date () {
					return this.basic_fin_date;
				}
				
			    public String sched_finish;

				public String getSched_finish () {
					return this.sched_finish;
				}
				
			    public String basic_fin_time;

				public String getBasic_fin_time () {
					return this.basic_fin_time;
				}
				
			    public String finish_time;

				public String getFinish_time () {
					return this.finish_time;
				}
				
			    public String business_area;

				public String getBusiness_area () {
					return this.business_area;
				}
				
			    public String actual_start;

				public String getActual_start () {
					return this.actual_start;
				}
				
			    public String bas_start_date;

				public String getBas_start_date () {
					return this.bas_start_date;
				}
				
			    public String sched_start;

				public String getSched_start () {
					return this.sched_start;
				}
				
			    public String actual_start1;

				public String getActual_start1 () {
					return this.actual_start1;
				}
				
			    public String start_time;

				public String getStart_time () {
					return this.start_time;
				}
				
			    public String sched_start_time;

				public String getSched_start_time () {
					return this.sched_start_time;
				}
				
			    public String hist_fr;

				public String getHist_fr () {
					return this.hist_fr;
				}
				
			    public String planning_plant;

				public String getPlanning_plant () {
					return this.planning_plant;
				}
				
			    public String costing_sheet;

				public String getCosting_sheet () {
					return this.costing_sheet;
				}
				
			    public String sales_document;

				public String getSales_document () {
					return this.sales_document;
				}
				
			    public String item;

				public String getItem () {
					return this.item;
				}
				
			    public String co_Area;

				public String getCo_Area () {
					return this.co_Area;
				}
				
			    public String cost_center;

				public String getCost_center () {
					return this.cost_center;
				}
				
			    public String resp_cost_cntr;

				public String getResp_cost_cntr () {
					return this.resp_cost_cntr;
				}
				
			    public String customer;

				public String getCustomer () {
					return this.customer;
				}
				
			    public String leading_order;

				public String getLeading_order () {
					return this.leading_order;
				}
				
			    public String deletion_flag;

				public String getDeletion_flag () {
					return this.deletion_flag;
				}
				
			    public String long_txt_exists;

				public String getLong_txt_exists () {
					return this.long_txt_exists;
				}
				
			    public String description_81;

				public String getDescription_81 () {
					return this.description_81;
				}
				
			    public String superior_order;

				public String getSuperior_order () {
					return this.superior_order;
				}
				
			    public String base_unit;

				public String getBase_unit () {
					return this.base_unit;
				}
				
			    public String quantity;

				public String getQuantity () {
					return this.quantity;
				}
				
			    public String room;

				public String getRoom () {
					return this.room;
				}
				
			    public String list_name;

				public String getList_name () {
					return this.list_name;
				}
				
			    public String object_number;

				public String getObject_number () {
					return this.object_number;
				}
				
			    public String paging_status;

				public String getPaging_status () {
					return this.paging_status;
				}
				
			    public String pgrp_task_list;

				public String getPgrp_task_list () {
					return this.pgrp_task_list;
				}
				
			    public String order_plan_ind;

				public String getOrder_plan_ind () {
					return this.order_plan_ind;
				}
				
			    public String group_counter;

				public String getGroup_counter () {
					return this.group_counter;
				}
				
			    public String group;

				public String getGroup () {
					return this.group;
				}
				
			    public String postal_code;

				public String getPostal_code () {
					return this.postal_code;
				}
				
			    public String profit_center;

				public String getProfit_center () {
					return this.profit_center;
				}
				
			    public String priority_95;

				public String getPriority_95 () {
					return this.priority_95;
				}
				
			    public String wbs_element;

				public String getWbs_element () {
					return this.wbs_element;
				}
				
			    public String wbs_ord_header;

				public String getWbs_ord_header () {
					return this.wbs_ord_header;
				}
				
			    public String notification;

				public String getNotification () {
					return this.notification;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				
			    public String revision;

				public String getRevision () {
					return this.revision;
				}
				
			    public String serial_number;

				public String getSerial_number () {
					return this.serial_number;
				}
				
			    public String material;

				public String getMaterial () {
					return this.material;
				}
				
			    public String service_product;

				public String getService_product () {
					return this.service_product;
				}
				
			    public String service_product_104;

				public String getService_product_104 () {
					return this.service_product_104;
				}
				
			    public String division;

				public String getDivision () {
					return this.division;
				}
				
			    public String division_sales;

				public String getDivision_sales () {
					return this.division_sales;
				}
				
			    public String location;

				public String getLocation () {
					return this.location;
				}
				
			    public String street;

				public String getStreet () {
					return this.street;
				}
				
			    public String maint_plant;

				public String getMaint_plant () {
					return this.maint_plant;
				}
				
			    public String telephone;

				public String getTelephone () {
					return this.telephone;
				}
				
			    public String sales_office;

				public String getSales_office () {
					return this.sales_office;
				}
				
			    public String sales_group;

				public String getSales_group () {
					return this.sales_group;
				}
				
			    public String sales_org;

				public String getSales_org () {
					return this.sales_org;
				}
				
			    public String sales_org_sales;

				public String getSales_org_sales () {
					return this.sales_org_sales;
				}
				
			    public String superior_act;

				public String getSuperior_act () {
					return this.superior_act;
				}
				
			    public String distr_channel;

				public String getDistr_channel () {
					return this.distr_channel;
				}
				
			    public String distr_channel_sal;

				public String getDistr_channel_sal () {
					return this.distr_channel_sal;
				}
				
			    public String currency;

				public String getCurrency () {
					return this.currency;
				}
				
			    public String maint_item;

				public String getMaint_item () {
					return this.maint_item;
				}
				
			    public String maintenance_plan;

				public String getMaintenance_plan () {
					return this.maintenance_plan;
				}
				
			    public String plant;

				public String getPlant () {
					return this.plant;
				}
				
			    public String comp;

				public String getComp () {
					return this.comp;
				}
				
			    public String overhead_key;

				public String getOverhead_key () {
					return this.overhead_key;
				}
				
			    public String earlst_allow_fin_dat;

				public String getEarlst_allow_fin_dat () {
					return this.earlst_allow_fin_dat;
				}
				
			    public String earl_allow_start_dat;

				public String getEarl_allow_start_dat () {
					return this.earl_allow_start_dat;
				}
				
			    public String latest_allow_fin_dat;

				public String getLatest_allow_fin_dat () {
					return this.latest_allow_fin_dat;
				}
				
			    public String original_due_date;

				public String getOriginal_due_date () {
					return this.original_due_date;
				}
				
			    public String object_list;

				public String getObject_list () {
					return this.object_list;
				}
				
			    public String catalog_type;

				public String getCatalog_type () {
					return this.catalog_type;
				}
				
			    public String code_group;

				public String getCode_group () {
					return this.code_group;
				}
				
			    public String coding;

				public String getCoding () {
					return this.coding;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BARRIER_PROJECT_jb_land_work_order_eis_map1.length) {
				if(length < 1024 && commonByteArray_BARRIER_PROJECT_jb_land_work_order_eis_map1.length == 0) {
   					commonByteArray_BARRIER_PROJECT_jb_land_work_order_eis_map1 = new byte[1024];
				} else {
   					commonByteArray_BARRIER_PROJECT_jb_land_work_order_eis_map1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BARRIER_PROJECT_jb_land_work_order_eis_map1, 0, length);
			strReturn = new String(commonByteArray_BARRIER_PROJECT_jb_land_work_order_eis_map1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BARRIER_PROJECT_jb_land_work_order_eis_map1) {

        	try {

        		int length = 0;
		
					this.functional_loc = readString(dis);
					
					this.description = readString(dis);
					
					this.order_type = readString(dis);
					
					this.Order = readString(dis);
					
					this.maint_activ_type = readString(dis);
					
					this.description_4 = readString(dis);
					
					this.planner_group = readString(dis);
					
					this.main_work_ctr = readString(dis);
					
					this.user_status = readString(dis);
					
					this.system_status = readString(dis);
					
					this.Priority = readString(dis);
					
					this.estimated_costs = readString(dis);
					
					this.total_act_costs = readString(dis);
					
					this.total_settlemt = readString(dis);
					
					this.total_plnnd_costs = readString(dis);
					
					this.tot_sum_plan = readString(dis);
					
					this.total_rev_act = readString(dis);
					
					this.tot_plan_rev = readString(dis);
					
					this.tot_sum_actual = readString(dis);
					
					this.abc_indic = readString(dis);
					
					this.reference_date = readString(dis);
					
					this.ref_element_pm_ps = readString(dis);
					
					this.address_number = readString(dis);
					
					this.reference_time = readString(dis);
					
					this.changed_on = readString(dis);
					
					this.changed_by = readString(dis);
					
					this.available_to = readString(dis);
					
					this.avail_to_time = readString(dis);
					
					this.asset = readString(dis);
					
					this.sub_number = readString(dis);
					
					this.available_from = readString(dis);
					
					this.available_from30 = readString(dis);
					
					this.system_condition = readString(dis);
					
					this.work_center = readString(dis);
					
					this.priority_type = readString(dis);
					
					this.res_purc_req = readString(dis);
					
					this.subnet_work_of = readString(dis);
					
					this.order_category = readString(dis);
					
					this.plant_wk_cntr = readString(dis);
					
					this.assembly = readString(dis);
					
					this.assembly_desc = readString(dis);
					
					this.plant_section = readString(dis);
					
					this.acctg_indicator = readString(dis);
					
					this.po_date = readString(dis);
					
					this.po_number = readString(dis);
					
					this.company_code = readString(dis);
					
					this.city = readString(dis);
					
					this.district = readString(dis);
					
					this.country = readString(dis);
					
					this.device_data = readString(dis);
					
					this.sort_field = readString(dis);
					
					this.description_50 = readString(dis);
					
					this.equipment = readString(dis);
					
					this.created_on = readString(dis);
					
					this.entered_by = readString(dis);
					
					this.billingform = readString(dis);
					
					this.actual_release = readString(dis);
					
					this.actual_finish = readString(dis);
					
					this.actual_finish1 = readString(dis);
					
					this.basic_fin_date = readString(dis);
					
					this.sched_finish = readString(dis);
					
					this.basic_fin_time = readString(dis);
					
					this.finish_time = readString(dis);
					
					this.business_area = readString(dis);
					
					this.actual_start = readString(dis);
					
					this.bas_start_date = readString(dis);
					
					this.sched_start = readString(dis);
					
					this.actual_start1 = readString(dis);
					
					this.start_time = readString(dis);
					
					this.sched_start_time = readString(dis);
					
					this.hist_fr = readString(dis);
					
					this.planning_plant = readString(dis);
					
					this.costing_sheet = readString(dis);
					
					this.sales_document = readString(dis);
					
					this.item = readString(dis);
					
					this.co_Area = readString(dis);
					
					this.cost_center = readString(dis);
					
					this.resp_cost_cntr = readString(dis);
					
					this.customer = readString(dis);
					
					this.leading_order = readString(dis);
					
					this.deletion_flag = readString(dis);
					
					this.long_txt_exists = readString(dis);
					
					this.description_81 = readString(dis);
					
					this.superior_order = readString(dis);
					
					this.base_unit = readString(dis);
					
					this.quantity = readString(dis);
					
					this.room = readString(dis);
					
					this.list_name = readString(dis);
					
					this.object_number = readString(dis);
					
					this.paging_status = readString(dis);
					
					this.pgrp_task_list = readString(dis);
					
					this.order_plan_ind = readString(dis);
					
					this.group_counter = readString(dis);
					
					this.group = readString(dis);
					
					this.postal_code = readString(dis);
					
					this.profit_center = readString(dis);
					
					this.priority_95 = readString(dis);
					
					this.wbs_element = readString(dis);
					
					this.wbs_ord_header = readString(dis);
					
					this.notification = readString(dis);
					
					this.region = readString(dis);
					
					this.revision = readString(dis);
					
					this.serial_number = readString(dis);
					
					this.material = readString(dis);
					
					this.service_product = readString(dis);
					
					this.service_product_104 = readString(dis);
					
					this.division = readString(dis);
					
					this.division_sales = readString(dis);
					
					this.location = readString(dis);
					
					this.street = readString(dis);
					
					this.maint_plant = readString(dis);
					
					this.telephone = readString(dis);
					
					this.sales_office = readString(dis);
					
					this.sales_group = readString(dis);
					
					this.sales_org = readString(dis);
					
					this.sales_org_sales = readString(dis);
					
					this.superior_act = readString(dis);
					
					this.distr_channel = readString(dis);
					
					this.distr_channel_sal = readString(dis);
					
					this.currency = readString(dis);
					
					this.maint_item = readString(dis);
					
					this.maintenance_plan = readString(dis);
					
					this.plant = readString(dis);
					
					this.comp = readString(dis);
					
					this.overhead_key = readString(dis);
					
					this.earlst_allow_fin_dat = readString(dis);
					
					this.earl_allow_start_dat = readString(dis);
					
					this.latest_allow_fin_dat = readString(dis);
					
					this.original_due_date = readString(dis);
					
					this.object_list = readString(dis);
					
					this.catalog_type = readString(dis);
					
					this.code_group = readString(dis);
					
					this.coding = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.functional_loc,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.order_type,dos);
					
					// String
				
						writeString(this.Order,dos);
					
					// String
				
						writeString(this.maint_activ_type,dos);
					
					// String
				
						writeString(this.description_4,dos);
					
					// String
				
						writeString(this.planner_group,dos);
					
					// String
				
						writeString(this.main_work_ctr,dos);
					
					// String
				
						writeString(this.user_status,dos);
					
					// String
				
						writeString(this.system_status,dos);
					
					// String
				
						writeString(this.Priority,dos);
					
					// String
				
						writeString(this.estimated_costs,dos);
					
					// String
				
						writeString(this.total_act_costs,dos);
					
					// String
				
						writeString(this.total_settlemt,dos);
					
					// String
				
						writeString(this.total_plnnd_costs,dos);
					
					// String
				
						writeString(this.tot_sum_plan,dos);
					
					// String
				
						writeString(this.total_rev_act,dos);
					
					// String
				
						writeString(this.tot_plan_rev,dos);
					
					// String
				
						writeString(this.tot_sum_actual,dos);
					
					// String
				
						writeString(this.abc_indic,dos);
					
					// String
				
						writeString(this.reference_date,dos);
					
					// String
				
						writeString(this.ref_element_pm_ps,dos);
					
					// String
				
						writeString(this.address_number,dos);
					
					// String
				
						writeString(this.reference_time,dos);
					
					// String
				
						writeString(this.changed_on,dos);
					
					// String
				
						writeString(this.changed_by,dos);
					
					// String
				
						writeString(this.available_to,dos);
					
					// String
				
						writeString(this.avail_to_time,dos);
					
					// String
				
						writeString(this.asset,dos);
					
					// String
				
						writeString(this.sub_number,dos);
					
					// String
				
						writeString(this.available_from,dos);
					
					// String
				
						writeString(this.available_from30,dos);
					
					// String
				
						writeString(this.system_condition,dos);
					
					// String
				
						writeString(this.work_center,dos);
					
					// String
				
						writeString(this.priority_type,dos);
					
					// String
				
						writeString(this.res_purc_req,dos);
					
					// String
				
						writeString(this.subnet_work_of,dos);
					
					// String
				
						writeString(this.order_category,dos);
					
					// String
				
						writeString(this.plant_wk_cntr,dos);
					
					// String
				
						writeString(this.assembly,dos);
					
					// String
				
						writeString(this.assembly_desc,dos);
					
					// String
				
						writeString(this.plant_section,dos);
					
					// String
				
						writeString(this.acctg_indicator,dos);
					
					// String
				
						writeString(this.po_date,dos);
					
					// String
				
						writeString(this.po_number,dos);
					
					// String
				
						writeString(this.company_code,dos);
					
					// String
				
						writeString(this.city,dos);
					
					// String
				
						writeString(this.district,dos);
					
					// String
				
						writeString(this.country,dos);
					
					// String
				
						writeString(this.device_data,dos);
					
					// String
				
						writeString(this.sort_field,dos);
					
					// String
				
						writeString(this.description_50,dos);
					
					// String
				
						writeString(this.equipment,dos);
					
					// String
				
						writeString(this.created_on,dos);
					
					// String
				
						writeString(this.entered_by,dos);
					
					// String
				
						writeString(this.billingform,dos);
					
					// String
				
						writeString(this.actual_release,dos);
					
					// String
				
						writeString(this.actual_finish,dos);
					
					// String
				
						writeString(this.actual_finish1,dos);
					
					// String
				
						writeString(this.basic_fin_date,dos);
					
					// String
				
						writeString(this.sched_finish,dos);
					
					// String
				
						writeString(this.basic_fin_time,dos);
					
					// String
				
						writeString(this.finish_time,dos);
					
					// String
				
						writeString(this.business_area,dos);
					
					// String
				
						writeString(this.actual_start,dos);
					
					// String
				
						writeString(this.bas_start_date,dos);
					
					// String
				
						writeString(this.sched_start,dos);
					
					// String
				
						writeString(this.actual_start1,dos);
					
					// String
				
						writeString(this.start_time,dos);
					
					// String
				
						writeString(this.sched_start_time,dos);
					
					// String
				
						writeString(this.hist_fr,dos);
					
					// String
				
						writeString(this.planning_plant,dos);
					
					// String
				
						writeString(this.costing_sheet,dos);
					
					// String
				
						writeString(this.sales_document,dos);
					
					// String
				
						writeString(this.item,dos);
					
					// String
				
						writeString(this.co_Area,dos);
					
					// String
				
						writeString(this.cost_center,dos);
					
					// String
				
						writeString(this.resp_cost_cntr,dos);
					
					// String
				
						writeString(this.customer,dos);
					
					// String
				
						writeString(this.leading_order,dos);
					
					// String
				
						writeString(this.deletion_flag,dos);
					
					// String
				
						writeString(this.long_txt_exists,dos);
					
					// String
				
						writeString(this.description_81,dos);
					
					// String
				
						writeString(this.superior_order,dos);
					
					// String
				
						writeString(this.base_unit,dos);
					
					// String
				
						writeString(this.quantity,dos);
					
					// String
				
						writeString(this.room,dos);
					
					// String
				
						writeString(this.list_name,dos);
					
					// String
				
						writeString(this.object_number,dos);
					
					// String
				
						writeString(this.paging_status,dos);
					
					// String
				
						writeString(this.pgrp_task_list,dos);
					
					// String
				
						writeString(this.order_plan_ind,dos);
					
					// String
				
						writeString(this.group_counter,dos);
					
					// String
				
						writeString(this.group,dos);
					
					// String
				
						writeString(this.postal_code,dos);
					
					// String
				
						writeString(this.profit_center,dos);
					
					// String
				
						writeString(this.priority_95,dos);
					
					// String
				
						writeString(this.wbs_element,dos);
					
					// String
				
						writeString(this.wbs_ord_header,dos);
					
					// String
				
						writeString(this.notification,dos);
					
					// String
				
						writeString(this.region,dos);
					
					// String
				
						writeString(this.revision,dos);
					
					// String
				
						writeString(this.serial_number,dos);
					
					// String
				
						writeString(this.material,dos);
					
					// String
				
						writeString(this.service_product,dos);
					
					// String
				
						writeString(this.service_product_104,dos);
					
					// String
				
						writeString(this.division,dos);
					
					// String
				
						writeString(this.division_sales,dos);
					
					// String
				
						writeString(this.location,dos);
					
					// String
				
						writeString(this.street,dos);
					
					// String
				
						writeString(this.maint_plant,dos);
					
					// String
				
						writeString(this.telephone,dos);
					
					// String
				
						writeString(this.sales_office,dos);
					
					// String
				
						writeString(this.sales_group,dos);
					
					// String
				
						writeString(this.sales_org,dos);
					
					// String
				
						writeString(this.sales_org_sales,dos);
					
					// String
				
						writeString(this.superior_act,dos);
					
					// String
				
						writeString(this.distr_channel,dos);
					
					// String
				
						writeString(this.distr_channel_sal,dos);
					
					// String
				
						writeString(this.currency,dos);
					
					// String
				
						writeString(this.maint_item,dos);
					
					// String
				
						writeString(this.maintenance_plan,dos);
					
					// String
				
						writeString(this.plant,dos);
					
					// String
				
						writeString(this.comp,dos);
					
					// String
				
						writeString(this.overhead_key,dos);
					
					// String
				
						writeString(this.earlst_allow_fin_dat,dos);
					
					// String
				
						writeString(this.earl_allow_start_dat,dos);
					
					// String
				
						writeString(this.latest_allow_fin_dat,dos);
					
					// String
				
						writeString(this.original_due_date,dos);
					
					// String
				
						writeString(this.object_list,dos);
					
					// String
				
						writeString(this.catalog_type,dos);
					
					// String
				
						writeString(this.code_group,dos);
					
					// String
				
						writeString(this.coding,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("functional_loc="+functional_loc);
		sb.append(",description="+description);
		sb.append(",order_type="+order_type);
		sb.append(",Order="+Order);
		sb.append(",maint_activ_type="+maint_activ_type);
		sb.append(",description_4="+description_4);
		sb.append(",planner_group="+planner_group);
		sb.append(",main_work_ctr="+main_work_ctr);
		sb.append(",user_status="+user_status);
		sb.append(",system_status="+system_status);
		sb.append(",Priority="+Priority);
		sb.append(",estimated_costs="+estimated_costs);
		sb.append(",total_act_costs="+total_act_costs);
		sb.append(",total_settlemt="+total_settlemt);
		sb.append(",total_plnnd_costs="+total_plnnd_costs);
		sb.append(",tot_sum_plan="+tot_sum_plan);
		sb.append(",total_rev_act="+total_rev_act);
		sb.append(",tot_plan_rev="+tot_plan_rev);
		sb.append(",tot_sum_actual="+tot_sum_actual);
		sb.append(",abc_indic="+abc_indic);
		sb.append(",reference_date="+reference_date);
		sb.append(",ref_element_pm_ps="+ref_element_pm_ps);
		sb.append(",address_number="+address_number);
		sb.append(",reference_time="+reference_time);
		sb.append(",changed_on="+changed_on);
		sb.append(",changed_by="+changed_by);
		sb.append(",available_to="+available_to);
		sb.append(",avail_to_time="+avail_to_time);
		sb.append(",asset="+asset);
		sb.append(",sub_number="+sub_number);
		sb.append(",available_from="+available_from);
		sb.append(",available_from30="+available_from30);
		sb.append(",system_condition="+system_condition);
		sb.append(",work_center="+work_center);
		sb.append(",priority_type="+priority_type);
		sb.append(",res_purc_req="+res_purc_req);
		sb.append(",subnet_work_of="+subnet_work_of);
		sb.append(",order_category="+order_category);
		sb.append(",plant_wk_cntr="+plant_wk_cntr);
		sb.append(",assembly="+assembly);
		sb.append(",assembly_desc="+assembly_desc);
		sb.append(",plant_section="+plant_section);
		sb.append(",acctg_indicator="+acctg_indicator);
		sb.append(",po_date="+po_date);
		sb.append(",po_number="+po_number);
		sb.append(",company_code="+company_code);
		sb.append(",city="+city);
		sb.append(",district="+district);
		sb.append(",country="+country);
		sb.append(",device_data="+device_data);
		sb.append(",sort_field="+sort_field);
		sb.append(",description_50="+description_50);
		sb.append(",equipment="+equipment);
		sb.append(",created_on="+created_on);
		sb.append(",entered_by="+entered_by);
		sb.append(",billingform="+billingform);
		sb.append(",actual_release="+actual_release);
		sb.append(",actual_finish="+actual_finish);
		sb.append(",actual_finish1="+actual_finish1);
		sb.append(",basic_fin_date="+basic_fin_date);
		sb.append(",sched_finish="+sched_finish);
		sb.append(",basic_fin_time="+basic_fin_time);
		sb.append(",finish_time="+finish_time);
		sb.append(",business_area="+business_area);
		sb.append(",actual_start="+actual_start);
		sb.append(",bas_start_date="+bas_start_date);
		sb.append(",sched_start="+sched_start);
		sb.append(",actual_start1="+actual_start1);
		sb.append(",start_time="+start_time);
		sb.append(",sched_start_time="+sched_start_time);
		sb.append(",hist_fr="+hist_fr);
		sb.append(",planning_plant="+planning_plant);
		sb.append(",costing_sheet="+costing_sheet);
		sb.append(",sales_document="+sales_document);
		sb.append(",item="+item);
		sb.append(",co_Area="+co_Area);
		sb.append(",cost_center="+cost_center);
		sb.append(",resp_cost_cntr="+resp_cost_cntr);
		sb.append(",customer="+customer);
		sb.append(",leading_order="+leading_order);
		sb.append(",deletion_flag="+deletion_flag);
		sb.append(",long_txt_exists="+long_txt_exists);
		sb.append(",description_81="+description_81);
		sb.append(",superior_order="+superior_order);
		sb.append(",base_unit="+base_unit);
		sb.append(",quantity="+quantity);
		sb.append(",room="+room);
		sb.append(",list_name="+list_name);
		sb.append(",object_number="+object_number);
		sb.append(",paging_status="+paging_status);
		sb.append(",pgrp_task_list="+pgrp_task_list);
		sb.append(",order_plan_ind="+order_plan_ind);
		sb.append(",group_counter="+group_counter);
		sb.append(",group="+group);
		sb.append(",postal_code="+postal_code);
		sb.append(",profit_center="+profit_center);
		sb.append(",priority_95="+priority_95);
		sb.append(",wbs_element="+wbs_element);
		sb.append(",wbs_ord_header="+wbs_ord_header);
		sb.append(",notification="+notification);
		sb.append(",region="+region);
		sb.append(",revision="+revision);
		sb.append(",serial_number="+serial_number);
		sb.append(",material="+material);
		sb.append(",service_product="+service_product);
		sb.append(",service_product_104="+service_product_104);
		sb.append(",division="+division);
		sb.append(",division_sales="+division_sales);
		sb.append(",location="+location);
		sb.append(",street="+street);
		sb.append(",maint_plant="+maint_plant);
		sb.append(",telephone="+telephone);
		sb.append(",sales_office="+sales_office);
		sb.append(",sales_group="+sales_group);
		sb.append(",sales_org="+sales_org);
		sb.append(",sales_org_sales="+sales_org_sales);
		sb.append(",superior_act="+superior_act);
		sb.append(",distr_channel="+distr_channel);
		sb.append(",distr_channel_sal="+distr_channel_sal);
		sb.append(",currency="+currency);
		sb.append(",maint_item="+maint_item);
		sb.append(",maintenance_plan="+maintenance_plan);
		sb.append(",plant="+plant);
		sb.append(",comp="+comp);
		sb.append(",overhead_key="+overhead_key);
		sb.append(",earlst_allow_fin_dat="+earlst_allow_fin_dat);
		sb.append(",earl_allow_start_dat="+earl_allow_start_dat);
		sb.append(",latest_allow_fin_dat="+latest_allow_fin_dat);
		sb.append(",original_due_date="+original_due_date);
		sb.append(",object_list="+object_list);
		sb.append(",catalog_type="+catalog_type);
		sb.append(",code_group="+code_group);
		sb.append(",coding="+coding);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(map_eis_map1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_BARRIER_PROJECT_jb_land_work_order_eis_map1 = new byte[0];
    static byte[] commonByteArray_BARRIER_PROJECT_jb_land_work_order_eis_map1 = new byte[0];

	
			    public String Functional_Loc_;

				public String getFunctional_Loc_ () {
					return this.Functional_Loc_;
				}
				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}
				
			    public String Order_Type;

				public String getOrder_Type () {
					return this.Order_Type;
				}
				
			    public String Order;

				public String getOrder () {
					return this.Order;
				}
				
			    public String MaintActivType;

				public String getMaintActivType () {
					return this.MaintActivType;
				}
				
			    public String Description4;

				public String getDescription4 () {
					return this.Description4;
				}
				
			    public String Planner_group;

				public String getPlanner_group () {
					return this.Planner_group;
				}
				
			    public String Main_WorkCtr;

				public String getMain_WorkCtr () {
					return this.Main_WorkCtr;
				}
				
			    public String User_status;

				public String getUser_status () {
					return this.User_status;
				}
				
			    public String System_status;

				public String getSystem_status () {
					return this.System_status;
				}
				
			    public String Priority;

				public String getPriority () {
					return this.Priority;
				}
				
			    public String Estimated_costs;

				public String getEstimated_costs () {
					return this.Estimated_costs;
				}
				
			    public String Total_act_costs;

				public String getTotal_act_costs () {
					return this.Total_act_costs;
				}
				
			    public String Total_settlemt;

				public String getTotal_settlemt () {
					return this.Total_settlemt;
				}
				
			    public String TotalPlnndCosts;

				public String getTotalPlnndCosts () {
					return this.TotalPlnndCosts;
				}
				
			    public String TotSum__plan_;

				public String getTotSum__plan_ () {
					return this.TotSum__plan_;
				}
				
			    public String Total_rev__act_;

				public String getTotal_rev__act_ () {
					return this.Total_rev__act_;
				}
				
			    public String Tot__plan__rev_;

				public String getTot__plan__rev_ () {
					return this.Tot__plan__rev_;
				}
				
			    public String TotSum__actual_;

				public String getTotSum__actual_ () {
					return this.TotSum__actual_;
				}
				
			    public String ABC_indic_;

				public String getABC_indic_ () {
					return this.ABC_indic_;
				}
				
			    public String Reference_Date;

				public String getReference_Date () {
					return this.Reference_Date;
				}
				
			    public String Ref__Element_PM_PS;

				public String getRef__Element_PM_PS () {
					return this.Ref__Element_PM_PS;
				}
				
			    public String Address_number;

				public String getAddress_number () {
					return this.Address_number;
				}
				
			    public String Reference_time;

				public String getReference_time () {
					return this.Reference_time;
				}
				
			    public String Changed_on;

				public String getChanged_on () {
					return this.Changed_on;
				}
				
			    public String Changed_by;

				public String getChanged_by () {
					return this.Changed_by;
				}
				
			    public String Available_to;

				public String getAvailable_to () {
					return this.Available_to;
				}
				
			    public String Avail__to_time;

				public String getAvail__to_time () {
					return this.Avail__to_time;
				}
				
			    public String Asset;

				public String getAsset () {
					return this.Asset;
				}
				
			    public String Subnumber;

				public String getSubnumber () {
					return this.Subnumber;
				}
				
			    public String Available_from;

				public String getAvailable_from () {
					return this.Available_from;
				}
				
			    public String Available_from30;

				public String getAvailable_from30 () {
					return this.Available_from30;
				}
				
			    public String SystemCondition;

				public String getSystemCondition () {
					return this.SystemCondition;
				}
				
			    public String Work_center;

				public String getWork_center () {
					return this.Work_center;
				}
				
			    public String PriorityType;

				public String getPriorityType () {
					return this.PriorityType;
				}
				
			    public String Res__Purc__req_;

				public String getRes__Purc__req_ () {
					return this.Res__Purc__req_;
				}
				
			    public String Subnetwork_of;

				public String getSubnetwork_of () {
					return this.Subnetwork_of;
				}
				
			    public String Order_category;

				public String getOrder_category () {
					return this.Order_category;
				}
				
			    public String Plant_WkCntr;

				public String getPlant_WkCntr () {
					return this.Plant_WkCntr;
				}
				
			    public String Assembly;

				public String getAssembly () {
					return this.Assembly;
				}
				
			    public String Assembly_desc_;

				public String getAssembly_desc_ () {
					return this.Assembly_desc_;
				}
				
			    public String Plant_section;

				public String getPlant_section () {
					return this.Plant_section;
				}
				
			    public String Acctg_Indicator;

				public String getAcctg_Indicator () {
					return this.Acctg_Indicator;
				}
				
			    public String PO_date;

				public String getPO_date () {
					return this.PO_date;
				}
				
			    public String PO_number;

				public String getPO_number () {
					return this.PO_number;
				}
				
			    public String Company_Code;

				public String getCompany_Code () {
					return this.Company_Code;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String District;

				public String getDistrict () {
					return this.District;
				}
				
			    public String Country;

				public String getCountry () {
					return this.Country;
				}
				
			    public String Device_data;

				public String getDevice_data () {
					return this.Device_data;
				}
				
			    public String Sort_field;

				public String getSort_field () {
					return this.Sort_field;
				}
				
			    public String Description50;

				public String getDescription50 () {
					return this.Description50;
				}
				
			    public String Equipment;

				public String getEquipment () {
					return this.Equipment;
				}
				
			    public String Created_on;

				public String getCreated_on () {
					return this.Created_on;
				}
				
			    public String Entered_by;

				public String getEntered_by () {
					return this.Entered_by;
				}
				
			    public String Billing_form;

				public String getBilling_form () {
					return this.Billing_form;
				}
				
			    public String Actual_release;

				public String getActual_release () {
					return this.Actual_release;
				}
				
			    public String Actual_Finish;

				public String getActual_Finish () {
					return this.Actual_Finish;
				}
				
			    public String Actual_finish;

				public String getActual_finish () {
					return this.Actual_finish;
				}
				
			    public String Basic_fin__date;

				public String getBasic_fin__date () {
					return this.Basic_fin__date;
				}
				
			    public String Sched__finish;

				public String getSched__finish () {
					return this.Sched__finish;
				}
				
			    public String Basic_fin__time;

				public String getBasic_fin__time () {
					return this.Basic_fin__time;
				}
				
			    public String Finish_time;

				public String getFinish_time () {
					return this.Finish_time;
				}
				
			    public String Business_Area;

				public String getBusiness_Area () {
					return this.Business_Area;
				}
				
			    public String Actual_start;

				public String getActual_start () {
					return this.Actual_start;
				}
				
			    public String Bas__start_date;

				public String getBas__start_date () {
					return this.Bas__start_date;
				}
				
			    public String Sched__start;

				public String getSched__start () {
					return this.Sched__start;
				}
				
			    public String ActualStart;

				public String getActualStart () {
					return this.ActualStart;
				}
				
			    public String Start_time;

				public String getStart_time () {
					return this.Start_time;
				}
				
			    public String SchedStartTime;

				public String getSchedStartTime () {
					return this.SchedStartTime;
				}
				
			    public String Hist_fr_;

				public String getHist_fr_ () {
					return this.Hist_fr_;
				}
				
			    public String Planning_plant;

				public String getPlanning_plant () {
					return this.Planning_plant;
				}
				
			    public String Costing_Sheet;

				public String getCosting_Sheet () {
					return this.Costing_Sheet;
				}
				
			    public String Sales_Document;

				public String getSales_Document () {
					return this.Sales_Document;
				}
				
			    public String Item;

				public String getItem () {
					return this.Item;
				}
				
			    public String CO_Area;

				public String getCO_Area () {
					return this.CO_Area;
				}
				
			    public String Cost_Center;

				public String getCost_Center () {
					return this.Cost_Center;
				}
				
			    public String Resp__cost_cntr;

				public String getResp__cost_cntr () {
					return this.Resp__cost_cntr;
				}
				
			    public String Customer;

				public String getCustomer () {
					return this.Customer;
				}
				
			    public String Leading_order;

				public String getLeading_order () {
					return this.Leading_order;
				}
				
			    public String Deletion_flag;

				public String getDeletion_flag () {
					return this.Deletion_flag;
				}
				
			    public String Long_txt_exists;

				public String getLong_txt_exists () {
					return this.Long_txt_exists;
				}
				
			    public String Description81;

				public String getDescription81 () {
					return this.Description81;
				}
				
			    public String Superior_order;

				public String getSuperior_order () {
					return this.Superior_order;
				}
				
			    public String Base_Unit;

				public String getBase_Unit () {
					return this.Base_Unit;
				}
				
			    public String Quantity;

				public String getQuantity () {
					return this.Quantity;
				}
				
			    public String Room;

				public String getRoom () {
					return this.Room;
				}
				
			    public String List_name;

				public String getList_name () {
					return this.List_name;
				}
				
			    public String Object_number;

				public String getObject_number () {
					return this.Object_number;
				}
				
			    public String Paging_status;

				public String getPaging_status () {
					return this.Paging_status;
				}
				
			    public String PGrp_Task_List;

				public String getPGrp_Task_List () {
					return this.PGrp_Task_List;
				}
				
			    public String OrderPlanInd_;

				public String getOrderPlanInd_ () {
					return this.OrderPlanInd_;
				}
				
			    public String Group_Counter;

				public String getGroup_Counter () {
					return this.Group_Counter;
				}
				
			    public String Group;

				public String getGroup () {
					return this.Group;
				}
				
			    public String Postal_Code;

				public String getPostal_Code () {
					return this.Postal_Code;
				}
				
			    public String Profit_Center;

				public String getProfit_Center () {
					return this.Profit_Center;
				}
				
			    public String Priority95;

				public String getPriority95 () {
					return this.Priority95;
				}
				
			    public String WBS_element;

				public String getWBS_element () {
					return this.WBS_element;
				}
				
			    public String WBS_ord__header;

				public String getWBS_ord__header () {
					return this.WBS_ord__header;
				}
				
			    public String Notification;

				public String getNotification () {
					return this.Notification;
				}
				
			    public String Region;

				public String getRegion () {
					return this.Region;
				}
				
			    public String Revision;

				public String getRevision () {
					return this.Revision;
				}
				
			    public String Serial_Number;

				public String getSerial_Number () {
					return this.Serial_Number;
				}
				
			    public String Material;

				public String getMaterial () {
					return this.Material;
				}
				
			    public String Service_product;

				public String getService_product () {
					return this.Service_product;
				}
				
			    public String Service_product104;

				public String getService_product104 () {
					return this.Service_product104;
				}
				
			    public String Division;

				public String getDivision () {
					return this.Division;
				}
				
			    public String Division___Sales;

				public String getDivision___Sales () {
					return this.Division___Sales;
				}
				
			    public String Location;

				public String getLocation () {
					return this.Location;
				}
				
			    public String Street;

				public String getStreet () {
					return this.Street;
				}
				
			    public String MaintPlant;

				public String getMaintPlant () {
					return this.MaintPlant;
				}
				
			    public String Telephone;

				public String getTelephone () {
					return this.Telephone;
				}
				
			    public String Sales_Office;

				public String getSales_Office () {
					return this.Sales_Office;
				}
				
			    public String Sales_Group;

				public String getSales_Group () {
					return this.Sales_Group;
				}
				
			    public String Sales_Org_;

				public String getSales_Org_ () {
					return this.Sales_Org_;
				}
				
			    public String Sales_Org____Sales;

				public String getSales_Org____Sales () {
					return this.Sales_Org____Sales;
				}
				
			    public String Superior_act_;

				public String getSuperior_act_ () {
					return this.Superior_act_;
				}
				
			    public String Distr__Channel;

				public String getDistr__Channel () {
					return this.Distr__Channel;
				}
				
			    public String Distr__Channel___Sal;

				public String getDistr__Channel___Sal () {
					return this.Distr__Channel___Sal;
				}
				
			    public String Currency;

				public String getCurrency () {
					return this.Currency;
				}
				
			    public String MaintItem;

				public String getMaintItem () {
					return this.MaintItem;
				}
				
			    public String MaintenancePlan;

				public String getMaintenancePlan () {
					return this.MaintenancePlan;
				}
				
			    public String Plant;

				public String getPlant () {
					return this.Plant;
				}
				
			    public String Comp;

				public String getComp () {
					return this.Comp;
				}
				
			    public String Overhead_key;

				public String getOverhead_key () {
					return this.Overhead_key;
				}
				
			    public String Earlst_Allow_Fin_Dat;

				public String getEarlst_Allow_Fin_Dat () {
					return this.Earlst_Allow_Fin_Dat;
				}
				
			    public String Earl_Allow_Start_Dat;

				public String getEarl_Allow_Start_Dat () {
					return this.Earl_Allow_Start_Dat;
				}
				
			    public String Latest_Allow_Fin_Dat;

				public String getLatest_Allow_Fin_Dat () {
					return this.Latest_Allow_Fin_Dat;
				}
				
			    public String Original_Due_Date;

				public String getOriginal_Due_Date () {
					return this.Original_Due_Date;
				}
				
			    public String Object_list;

				public String getObject_list () {
					return this.Object_list;
				}
				
			    public String Catalog_type;

				public String getCatalog_type () {
					return this.Catalog_type;
				}
				
			    public String Code_group;

				public String getCode_group () {
					return this.Code_group;
				}
				
			    public String Coding;

				public String getCoding () {
					return this.Coding;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BARRIER_PROJECT_jb_land_work_order_eis_map1.length) {
				if(length < 1024 && commonByteArray_BARRIER_PROJECT_jb_land_work_order_eis_map1.length == 0) {
   					commonByteArray_BARRIER_PROJECT_jb_land_work_order_eis_map1 = new byte[1024];
				} else {
   					commonByteArray_BARRIER_PROJECT_jb_land_work_order_eis_map1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BARRIER_PROJECT_jb_land_work_order_eis_map1, 0, length);
			strReturn = new String(commonByteArray_BARRIER_PROJECT_jb_land_work_order_eis_map1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BARRIER_PROJECT_jb_land_work_order_eis_map1) {

        	try {

        		int length = 0;
		
					this.Functional_Loc_ = readString(dis);
					
					this.Description = readString(dis);
					
					this.Order_Type = readString(dis);
					
					this.Order = readString(dis);
					
					this.MaintActivType = readString(dis);
					
					this.Description4 = readString(dis);
					
					this.Planner_group = readString(dis);
					
					this.Main_WorkCtr = readString(dis);
					
					this.User_status = readString(dis);
					
					this.System_status = readString(dis);
					
					this.Priority = readString(dis);
					
					this.Estimated_costs = readString(dis);
					
					this.Total_act_costs = readString(dis);
					
					this.Total_settlemt = readString(dis);
					
					this.TotalPlnndCosts = readString(dis);
					
					this.TotSum__plan_ = readString(dis);
					
					this.Total_rev__act_ = readString(dis);
					
					this.Tot__plan__rev_ = readString(dis);
					
					this.TotSum__actual_ = readString(dis);
					
					this.ABC_indic_ = readString(dis);
					
					this.Reference_Date = readString(dis);
					
					this.Ref__Element_PM_PS = readString(dis);
					
					this.Address_number = readString(dis);
					
					this.Reference_time = readString(dis);
					
					this.Changed_on = readString(dis);
					
					this.Changed_by = readString(dis);
					
					this.Available_to = readString(dis);
					
					this.Avail__to_time = readString(dis);
					
					this.Asset = readString(dis);
					
					this.Subnumber = readString(dis);
					
					this.Available_from = readString(dis);
					
					this.Available_from30 = readString(dis);
					
					this.SystemCondition = readString(dis);
					
					this.Work_center = readString(dis);
					
					this.PriorityType = readString(dis);
					
					this.Res__Purc__req_ = readString(dis);
					
					this.Subnetwork_of = readString(dis);
					
					this.Order_category = readString(dis);
					
					this.Plant_WkCntr = readString(dis);
					
					this.Assembly = readString(dis);
					
					this.Assembly_desc_ = readString(dis);
					
					this.Plant_section = readString(dis);
					
					this.Acctg_Indicator = readString(dis);
					
					this.PO_date = readString(dis);
					
					this.PO_number = readString(dis);
					
					this.Company_Code = readString(dis);
					
					this.City = readString(dis);
					
					this.District = readString(dis);
					
					this.Country = readString(dis);
					
					this.Device_data = readString(dis);
					
					this.Sort_field = readString(dis);
					
					this.Description50 = readString(dis);
					
					this.Equipment = readString(dis);
					
					this.Created_on = readString(dis);
					
					this.Entered_by = readString(dis);
					
					this.Billing_form = readString(dis);
					
					this.Actual_release = readString(dis);
					
					this.Actual_Finish = readString(dis);
					
					this.Actual_finish = readString(dis);
					
					this.Basic_fin__date = readString(dis);
					
					this.Sched__finish = readString(dis);
					
					this.Basic_fin__time = readString(dis);
					
					this.Finish_time = readString(dis);
					
					this.Business_Area = readString(dis);
					
					this.Actual_start = readString(dis);
					
					this.Bas__start_date = readString(dis);
					
					this.Sched__start = readString(dis);
					
					this.ActualStart = readString(dis);
					
					this.Start_time = readString(dis);
					
					this.SchedStartTime = readString(dis);
					
					this.Hist_fr_ = readString(dis);
					
					this.Planning_plant = readString(dis);
					
					this.Costing_Sheet = readString(dis);
					
					this.Sales_Document = readString(dis);
					
					this.Item = readString(dis);
					
					this.CO_Area = readString(dis);
					
					this.Cost_Center = readString(dis);
					
					this.Resp__cost_cntr = readString(dis);
					
					this.Customer = readString(dis);
					
					this.Leading_order = readString(dis);
					
					this.Deletion_flag = readString(dis);
					
					this.Long_txt_exists = readString(dis);
					
					this.Description81 = readString(dis);
					
					this.Superior_order = readString(dis);
					
					this.Base_Unit = readString(dis);
					
					this.Quantity = readString(dis);
					
					this.Room = readString(dis);
					
					this.List_name = readString(dis);
					
					this.Object_number = readString(dis);
					
					this.Paging_status = readString(dis);
					
					this.PGrp_Task_List = readString(dis);
					
					this.OrderPlanInd_ = readString(dis);
					
					this.Group_Counter = readString(dis);
					
					this.Group = readString(dis);
					
					this.Postal_Code = readString(dis);
					
					this.Profit_Center = readString(dis);
					
					this.Priority95 = readString(dis);
					
					this.WBS_element = readString(dis);
					
					this.WBS_ord__header = readString(dis);
					
					this.Notification = readString(dis);
					
					this.Region = readString(dis);
					
					this.Revision = readString(dis);
					
					this.Serial_Number = readString(dis);
					
					this.Material = readString(dis);
					
					this.Service_product = readString(dis);
					
					this.Service_product104 = readString(dis);
					
					this.Division = readString(dis);
					
					this.Division___Sales = readString(dis);
					
					this.Location = readString(dis);
					
					this.Street = readString(dis);
					
					this.MaintPlant = readString(dis);
					
					this.Telephone = readString(dis);
					
					this.Sales_Office = readString(dis);
					
					this.Sales_Group = readString(dis);
					
					this.Sales_Org_ = readString(dis);
					
					this.Sales_Org____Sales = readString(dis);
					
					this.Superior_act_ = readString(dis);
					
					this.Distr__Channel = readString(dis);
					
					this.Distr__Channel___Sal = readString(dis);
					
					this.Currency = readString(dis);
					
					this.MaintItem = readString(dis);
					
					this.MaintenancePlan = readString(dis);
					
					this.Plant = readString(dis);
					
					this.Comp = readString(dis);
					
					this.Overhead_key = readString(dis);
					
					this.Earlst_Allow_Fin_Dat = readString(dis);
					
					this.Earl_Allow_Start_Dat = readString(dis);
					
					this.Latest_Allow_Fin_Dat = readString(dis);
					
					this.Original_Due_Date = readString(dis);
					
					this.Object_list = readString(dis);
					
					this.Catalog_type = readString(dis);
					
					this.Code_group = readString(dis);
					
					this.Coding = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Functional_Loc_,dos);
					
					// String
				
						writeString(this.Description,dos);
					
					// String
				
						writeString(this.Order_Type,dos);
					
					// String
				
						writeString(this.Order,dos);
					
					// String
				
						writeString(this.MaintActivType,dos);
					
					// String
				
						writeString(this.Description4,dos);
					
					// String
				
						writeString(this.Planner_group,dos);
					
					// String
				
						writeString(this.Main_WorkCtr,dos);
					
					// String
				
						writeString(this.User_status,dos);
					
					// String
				
						writeString(this.System_status,dos);
					
					// String
				
						writeString(this.Priority,dos);
					
					// String
				
						writeString(this.Estimated_costs,dos);
					
					// String
				
						writeString(this.Total_act_costs,dos);
					
					// String
				
						writeString(this.Total_settlemt,dos);
					
					// String
				
						writeString(this.TotalPlnndCosts,dos);
					
					// String
				
						writeString(this.TotSum__plan_,dos);
					
					// String
				
						writeString(this.Total_rev__act_,dos);
					
					// String
				
						writeString(this.Tot__plan__rev_,dos);
					
					// String
				
						writeString(this.TotSum__actual_,dos);
					
					// String
				
						writeString(this.ABC_indic_,dos);
					
					// String
				
						writeString(this.Reference_Date,dos);
					
					// String
				
						writeString(this.Ref__Element_PM_PS,dos);
					
					// String
				
						writeString(this.Address_number,dos);
					
					// String
				
						writeString(this.Reference_time,dos);
					
					// String
				
						writeString(this.Changed_on,dos);
					
					// String
				
						writeString(this.Changed_by,dos);
					
					// String
				
						writeString(this.Available_to,dos);
					
					// String
				
						writeString(this.Avail__to_time,dos);
					
					// String
				
						writeString(this.Asset,dos);
					
					// String
				
						writeString(this.Subnumber,dos);
					
					// String
				
						writeString(this.Available_from,dos);
					
					// String
				
						writeString(this.Available_from30,dos);
					
					// String
				
						writeString(this.SystemCondition,dos);
					
					// String
				
						writeString(this.Work_center,dos);
					
					// String
				
						writeString(this.PriorityType,dos);
					
					// String
				
						writeString(this.Res__Purc__req_,dos);
					
					// String
				
						writeString(this.Subnetwork_of,dos);
					
					// String
				
						writeString(this.Order_category,dos);
					
					// String
				
						writeString(this.Plant_WkCntr,dos);
					
					// String
				
						writeString(this.Assembly,dos);
					
					// String
				
						writeString(this.Assembly_desc_,dos);
					
					// String
				
						writeString(this.Plant_section,dos);
					
					// String
				
						writeString(this.Acctg_Indicator,dos);
					
					// String
				
						writeString(this.PO_date,dos);
					
					// String
				
						writeString(this.PO_number,dos);
					
					// String
				
						writeString(this.Company_Code,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.District,dos);
					
					// String
				
						writeString(this.Country,dos);
					
					// String
				
						writeString(this.Device_data,dos);
					
					// String
				
						writeString(this.Sort_field,dos);
					
					// String
				
						writeString(this.Description50,dos);
					
					// String
				
						writeString(this.Equipment,dos);
					
					// String
				
						writeString(this.Created_on,dos);
					
					// String
				
						writeString(this.Entered_by,dos);
					
					// String
				
						writeString(this.Billing_form,dos);
					
					// String
				
						writeString(this.Actual_release,dos);
					
					// String
				
						writeString(this.Actual_Finish,dos);
					
					// String
				
						writeString(this.Actual_finish,dos);
					
					// String
				
						writeString(this.Basic_fin__date,dos);
					
					// String
				
						writeString(this.Sched__finish,dos);
					
					// String
				
						writeString(this.Basic_fin__time,dos);
					
					// String
				
						writeString(this.Finish_time,dos);
					
					// String
				
						writeString(this.Business_Area,dos);
					
					// String
				
						writeString(this.Actual_start,dos);
					
					// String
				
						writeString(this.Bas__start_date,dos);
					
					// String
				
						writeString(this.Sched__start,dos);
					
					// String
				
						writeString(this.ActualStart,dos);
					
					// String
				
						writeString(this.Start_time,dos);
					
					// String
				
						writeString(this.SchedStartTime,dos);
					
					// String
				
						writeString(this.Hist_fr_,dos);
					
					// String
				
						writeString(this.Planning_plant,dos);
					
					// String
				
						writeString(this.Costing_Sheet,dos);
					
					// String
				
						writeString(this.Sales_Document,dos);
					
					// String
				
						writeString(this.Item,dos);
					
					// String
				
						writeString(this.CO_Area,dos);
					
					// String
				
						writeString(this.Cost_Center,dos);
					
					// String
				
						writeString(this.Resp__cost_cntr,dos);
					
					// String
				
						writeString(this.Customer,dos);
					
					// String
				
						writeString(this.Leading_order,dos);
					
					// String
				
						writeString(this.Deletion_flag,dos);
					
					// String
				
						writeString(this.Long_txt_exists,dos);
					
					// String
				
						writeString(this.Description81,dos);
					
					// String
				
						writeString(this.Superior_order,dos);
					
					// String
				
						writeString(this.Base_Unit,dos);
					
					// String
				
						writeString(this.Quantity,dos);
					
					// String
				
						writeString(this.Room,dos);
					
					// String
				
						writeString(this.List_name,dos);
					
					// String
				
						writeString(this.Object_number,dos);
					
					// String
				
						writeString(this.Paging_status,dos);
					
					// String
				
						writeString(this.PGrp_Task_List,dos);
					
					// String
				
						writeString(this.OrderPlanInd_,dos);
					
					// String
				
						writeString(this.Group_Counter,dos);
					
					// String
				
						writeString(this.Group,dos);
					
					// String
				
						writeString(this.Postal_Code,dos);
					
					// String
				
						writeString(this.Profit_Center,dos);
					
					// String
				
						writeString(this.Priority95,dos);
					
					// String
				
						writeString(this.WBS_element,dos);
					
					// String
				
						writeString(this.WBS_ord__header,dos);
					
					// String
				
						writeString(this.Notification,dos);
					
					// String
				
						writeString(this.Region,dos);
					
					// String
				
						writeString(this.Revision,dos);
					
					// String
				
						writeString(this.Serial_Number,dos);
					
					// String
				
						writeString(this.Material,dos);
					
					// String
				
						writeString(this.Service_product,dos);
					
					// String
				
						writeString(this.Service_product104,dos);
					
					// String
				
						writeString(this.Division,dos);
					
					// String
				
						writeString(this.Division___Sales,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// String
				
						writeString(this.Street,dos);
					
					// String
				
						writeString(this.MaintPlant,dos);
					
					// String
				
						writeString(this.Telephone,dos);
					
					// String
				
						writeString(this.Sales_Office,dos);
					
					// String
				
						writeString(this.Sales_Group,dos);
					
					// String
				
						writeString(this.Sales_Org_,dos);
					
					// String
				
						writeString(this.Sales_Org____Sales,dos);
					
					// String
				
						writeString(this.Superior_act_,dos);
					
					// String
				
						writeString(this.Distr__Channel,dos);
					
					// String
				
						writeString(this.Distr__Channel___Sal,dos);
					
					// String
				
						writeString(this.Currency,dos);
					
					// String
				
						writeString(this.MaintItem,dos);
					
					// String
				
						writeString(this.MaintenancePlan,dos);
					
					// String
				
						writeString(this.Plant,dos);
					
					// String
				
						writeString(this.Comp,dos);
					
					// String
				
						writeString(this.Overhead_key,dos);
					
					// String
				
						writeString(this.Earlst_Allow_Fin_Dat,dos);
					
					// String
				
						writeString(this.Earl_Allow_Start_Dat,dos);
					
					// String
				
						writeString(this.Latest_Allow_Fin_Dat,dos);
					
					// String
				
						writeString(this.Original_Due_Date,dos);
					
					// String
				
						writeString(this.Object_list,dos);
					
					// String
				
						writeString(this.Catalog_type,dos);
					
					// String
				
						writeString(this.Code_group,dos);
					
					// String
				
						writeString(this.Coding,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Functional_Loc_="+Functional_Loc_);
		sb.append(",Description="+Description);
		sb.append(",Order_Type="+Order_Type);
		sb.append(",Order="+Order);
		sb.append(",MaintActivType="+MaintActivType);
		sb.append(",Description4="+Description4);
		sb.append(",Planner_group="+Planner_group);
		sb.append(",Main_WorkCtr="+Main_WorkCtr);
		sb.append(",User_status="+User_status);
		sb.append(",System_status="+System_status);
		sb.append(",Priority="+Priority);
		sb.append(",Estimated_costs="+Estimated_costs);
		sb.append(",Total_act_costs="+Total_act_costs);
		sb.append(",Total_settlemt="+Total_settlemt);
		sb.append(",TotalPlnndCosts="+TotalPlnndCosts);
		sb.append(",TotSum__plan_="+TotSum__plan_);
		sb.append(",Total_rev__act_="+Total_rev__act_);
		sb.append(",Tot__plan__rev_="+Tot__plan__rev_);
		sb.append(",TotSum__actual_="+TotSum__actual_);
		sb.append(",ABC_indic_="+ABC_indic_);
		sb.append(",Reference_Date="+Reference_Date);
		sb.append(",Ref__Element_PM_PS="+Ref__Element_PM_PS);
		sb.append(",Address_number="+Address_number);
		sb.append(",Reference_time="+Reference_time);
		sb.append(",Changed_on="+Changed_on);
		sb.append(",Changed_by="+Changed_by);
		sb.append(",Available_to="+Available_to);
		sb.append(",Avail__to_time="+Avail__to_time);
		sb.append(",Asset="+Asset);
		sb.append(",Subnumber="+Subnumber);
		sb.append(",Available_from="+Available_from);
		sb.append(",Available_from30="+Available_from30);
		sb.append(",SystemCondition="+SystemCondition);
		sb.append(",Work_center="+Work_center);
		sb.append(",PriorityType="+PriorityType);
		sb.append(",Res__Purc__req_="+Res__Purc__req_);
		sb.append(",Subnetwork_of="+Subnetwork_of);
		sb.append(",Order_category="+Order_category);
		sb.append(",Plant_WkCntr="+Plant_WkCntr);
		sb.append(",Assembly="+Assembly);
		sb.append(",Assembly_desc_="+Assembly_desc_);
		sb.append(",Plant_section="+Plant_section);
		sb.append(",Acctg_Indicator="+Acctg_Indicator);
		sb.append(",PO_date="+PO_date);
		sb.append(",PO_number="+PO_number);
		sb.append(",Company_Code="+Company_Code);
		sb.append(",City="+City);
		sb.append(",District="+District);
		sb.append(",Country="+Country);
		sb.append(",Device_data="+Device_data);
		sb.append(",Sort_field="+Sort_field);
		sb.append(",Description50="+Description50);
		sb.append(",Equipment="+Equipment);
		sb.append(",Created_on="+Created_on);
		sb.append(",Entered_by="+Entered_by);
		sb.append(",Billing_form="+Billing_form);
		sb.append(",Actual_release="+Actual_release);
		sb.append(",Actual_Finish="+Actual_Finish);
		sb.append(",Actual_finish="+Actual_finish);
		sb.append(",Basic_fin__date="+Basic_fin__date);
		sb.append(",Sched__finish="+Sched__finish);
		sb.append(",Basic_fin__time="+Basic_fin__time);
		sb.append(",Finish_time="+Finish_time);
		sb.append(",Business_Area="+Business_Area);
		sb.append(",Actual_start="+Actual_start);
		sb.append(",Bas__start_date="+Bas__start_date);
		sb.append(",Sched__start="+Sched__start);
		sb.append(",ActualStart="+ActualStart);
		sb.append(",Start_time="+Start_time);
		sb.append(",SchedStartTime="+SchedStartTime);
		sb.append(",Hist_fr_="+Hist_fr_);
		sb.append(",Planning_plant="+Planning_plant);
		sb.append(",Costing_Sheet="+Costing_Sheet);
		sb.append(",Sales_Document="+Sales_Document);
		sb.append(",Item="+Item);
		sb.append(",CO_Area="+CO_Area);
		sb.append(",Cost_Center="+Cost_Center);
		sb.append(",Resp__cost_cntr="+Resp__cost_cntr);
		sb.append(",Customer="+Customer);
		sb.append(",Leading_order="+Leading_order);
		sb.append(",Deletion_flag="+Deletion_flag);
		sb.append(",Long_txt_exists="+Long_txt_exists);
		sb.append(",Description81="+Description81);
		sb.append(",Superior_order="+Superior_order);
		sb.append(",Base_Unit="+Base_Unit);
		sb.append(",Quantity="+Quantity);
		sb.append(",Room="+Room);
		sb.append(",List_name="+List_name);
		sb.append(",Object_number="+Object_number);
		sb.append(",Paging_status="+Paging_status);
		sb.append(",PGrp_Task_List="+PGrp_Task_List);
		sb.append(",OrderPlanInd_="+OrderPlanInd_);
		sb.append(",Group_Counter="+Group_Counter);
		sb.append(",Group="+Group);
		sb.append(",Postal_Code="+Postal_Code);
		sb.append(",Profit_Center="+Profit_Center);
		sb.append(",Priority95="+Priority95);
		sb.append(",WBS_element="+WBS_element);
		sb.append(",WBS_ord__header="+WBS_ord__header);
		sb.append(",Notification="+Notification);
		sb.append(",Region="+Region);
		sb.append(",Revision="+Revision);
		sb.append(",Serial_Number="+Serial_Number);
		sb.append(",Material="+Material);
		sb.append(",Service_product="+Service_product);
		sb.append(",Service_product104="+Service_product104);
		sb.append(",Division="+Division);
		sb.append(",Division___Sales="+Division___Sales);
		sb.append(",Location="+Location);
		sb.append(",Street="+Street);
		sb.append(",MaintPlant="+MaintPlant);
		sb.append(",Telephone="+Telephone);
		sb.append(",Sales_Office="+Sales_Office);
		sb.append(",Sales_Group="+Sales_Group);
		sb.append(",Sales_Org_="+Sales_Org_);
		sb.append(",Sales_Org____Sales="+Sales_Org____Sales);
		sb.append(",Superior_act_="+Superior_act_);
		sb.append(",Distr__Channel="+Distr__Channel);
		sb.append(",Distr__Channel___Sal="+Distr__Channel___Sal);
		sb.append(",Currency="+Currency);
		sb.append(",MaintItem="+MaintItem);
		sb.append(",MaintenancePlan="+MaintenancePlan);
		sb.append(",Plant="+Plant);
		sb.append(",Comp="+Comp);
		sb.append(",Overhead_key="+Overhead_key);
		sb.append(",Earlst_Allow_Fin_Dat="+Earlst_Allow_Fin_Dat);
		sb.append(",Earl_Allow_Start_Dat="+Earl_Allow_Start_Dat);
		sb.append(",Latest_Allow_Fin_Dat="+Latest_Allow_Fin_Dat);
		sb.append(",Original_Due_Date="+Original_Due_Date);
		sb.append(",Object_list="+Object_list);
		sb.append(",Catalog_type="+Catalog_type);
		sb.append(",Code_group="+Code_group);
		sb.append(",Coding="+Coding);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
map_eis_map1Struct map_eis_map1 = new map_eis_map1Struct();





	
	/**
	 * [tMysqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_1", false);
		start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("map_eis_map1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_1 = 0;
		
    	class BytesLimit65535_tMysqlOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_1().limitLog4jByte();






int nb_line_tMysqlOutput_1 = 0;
int nb_line_update_tMysqlOutput_1 = 0;
int nb_line_inserted_tMysqlOutput_1 = 0;
int nb_line_deleted_tMysqlOutput_1 = 0;
int nb_line_rejected_tMysqlOutput_1 = 0;

int deletedCount_tMysqlOutput_1=0;
int updatedCount_tMysqlOutput_1=0;
int insertedCount_tMysqlOutput_1=0;

int rejectedCount_tMysqlOutput_1=0;

String tableName_tMysqlOutput_1 = "work_order_eis_map1";
boolean whetherReject_tMysqlOutput_1 = false;

java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
long date_tMysqlOutput_1;

java.sql.Connection conn_tMysqlOutput_1 = null;
		String dbProperties_tMysqlOutput_1 = context.barrier_landing_conn_AdditionalParams;
		String url_tMysqlOutput_1 = null;
		if(dbProperties_tMysqlOutput_1 == null || dbProperties_tMysqlOutput_1.trim().length() == 0) {
			url_tMysqlOutput_1 = "jdbc:mysql://" + context.barrier_landing_conn_Server + ":" + context.barrier_landing_conn_Port + "/" + context.barrier_landing_conn_Database + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_1 = context.barrier_landing_conn_AdditionalParams;
			if (!properties_tMysqlOutput_1.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_1 = "jdbc:mysql://" + context.barrier_landing_conn_Server + ":" + context.barrier_landing_conn_Port + "/" + context.barrier_landing_conn_Database + "?" + properties_tMysqlOutput_1;
		}
		String driverClass_tMysqlOutput_1 = "org.gjt.mm.mysql.Driver";
		
		String dbUser_tMysqlOutput_1 = context.barrier_landing_conn_Login;
		

		
	final String decryptedPassword_tMysqlOutput_1 = context.barrier_landing_conn_Password; 

		String dbPwd_tMysqlOutput_1 = decryptedPassword_tMysqlOutput_1;
		java.lang.Class.forName(driverClass_tMysqlOutput_1);
		
		conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(url_tMysqlOutput_1, dbUser_tMysqlOutput_1, dbPwd_tMysqlOutput_1);
		
	
	resourceMap.put("conn_tMysqlOutput_1", conn_tMysqlOutput_1);
        conn_tMysqlOutput_1.setAutoCommit(false);
        int commitEvery_tMysqlOutput_1 = 10000;
        int commitCounter_tMysqlOutput_1 = 0;

int count_tMysqlOutput_1=0;
    	
            java.sql.Statement stmtTruncCount_tMysqlOutput_1 = conn_tMysqlOutput_1.createStatement();
            java.sql.ResultSet rsTruncCount_tMysqlOutput_1 = stmtTruncCount_tMysqlOutput_1.executeQuery("SELECT COUNT(1) FROM `" + tableName_tMysqlOutput_1 + "`");
            int rsTruncCountNumber_tMysqlOutput_1 = 0;
            if(rsTruncCount_tMysqlOutput_1.next()) {
                rsTruncCountNumber_tMysqlOutput_1 = rsTruncCount_tMysqlOutput_1.getInt(1);
            }
            rsTruncCount_tMysqlOutput_1.close();
            stmtTruncCount_tMysqlOutput_1.close();
            java.sql.Statement stmtTrunc_tMysqlOutput_1 = conn_tMysqlOutput_1.createStatement();
            stmtTrunc_tMysqlOutput_1.executeUpdate("TRUNCATE TABLE `" + tableName_tMysqlOutput_1 + "`");
            deletedCount_tMysqlOutput_1 += rsTruncCountNumber_tMysqlOutput_1;
            stmtTrunc_tMysqlOutput_1.close();

				String insert_tMysqlOutput_1 = "INSERT INTO `" + "work_order_eis_map1" + "` (`functional_loc`,`description`,`order_type`,`Order`,`maint_activ_type`,`description_4`,`planner_group`,`main_work_ctr`,`user_status`,`system_status`,`Priority`,`estimated_costs`,`total_act_costs`,`total_settlemt`,`total_plnnd_costs`,`tot_sum_plan`,`total_rev_act`,`tot_plan_rev`,`tot_sum_actual`,`abc_indic`,`reference_date`,`ref_element_pm_ps`,`address_number`,`reference_time`,`changed_on`,`changed_by`,`available_to`,`avail_to_time`,`asset`,`sub_number`,`available_from`,`available_from30`,`system_condition`,`work_center`,`priority_type`,`res_purc_req`,`subnet_work_of`,`order_category`,`plant_wk_cntr`,`assembly`,`assembly_desc`,`plant_section`,`acctg_indicator`,`po_date`,`po_number`,`company_code`,`city`,`district`,`country`,`device_data`,`sort_field`,`description_50`,`equipment`,`created_on`,`entered_by`,`billingform`,`actual_release`,`actual_finish`,`actual_finish1`,`basic_fin_date`,`sched_finish`,`basic_fin_time`,`finish_time`,`business_area`,`actual_start`,`bas_start_date`,`sched_start`,`actual_start1`,`start_time`,`sched_start_time`,`hist_fr`,`planning_plant`,`costing_sheet`,`sales_document`,`item`,`co_Area`,`cost_center`,`resp_cost_cntr`,`customer`,`leading_order`,`deletion_flag`,`long_txt_exists`,`description_81`,`superior_order`,`base_unit`,`quantity`,`room`,`list_name`,`object_number`,`paging_status`,`pgrp_task_list`,`order_plan_ind`,`group_counter`,`group`,`postal_code`,`profit_center`,`priority_95`,`wbs_element`,`wbs_ord_header`,`notification`,`region`,`revision`,`serial_number`,`material`,`service_product`,`service_product_104`,`division`,`division_sales`,`location`,`street`,`maint_plant`,`telephone`,`sales_office`,`sales_group`,`sales_org`,`sales_org_sales`,`superior_act`,`distr_channel`,`distr_channel_sal`,`currency`,`maint_item`,`maintenance_plan`,`plant`,`comp`,`overhead_key`,`earlst_allow_fin_dat`,`earl_allow_start_dat`,`latest_allow_fin_dat`,`original_due_date`,`object_list`,`catalog_type`,`code_group`,`coding`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		        int batchSize_tMysqlOutput_1 = 100;
	   			int batchSizeCounter_tMysqlOutput_1=0;
		            
		        java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1.prepareStatement(insert_tMysqlOutput_1);


 



/**
 * [tMysqlOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
map_eis_map1Struct map_eis_map1_tmp = new map_eis_map1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				class RowHelper_tFileInputDelimited_1{
				
					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,row1Struct row1 ) throws java.lang.Exception{
						
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row1.Functional_Loc_ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row1.Description = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
							row1.Order_Type = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
							row1.Order = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
							row1.MaintActivType = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
							row1.Description4 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
							row1.Planner_group = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
							row1.Main_WorkCtr = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
							row1.User_status = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
							row1.System_status = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
							row1.Priority = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
							row1.Estimated_costs = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 12;
					
							row1.Total_act_costs = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 13;
					
							row1.Total_settlemt = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 14;
					
							row1.TotalPlnndCosts = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 15;
					
							row1.TotSum__plan_ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 16;
					
							row1.Total_rev__act_ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 17;
					
							row1.Tot__plan__rev_ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 18;
					
							row1.TotSum__actual_ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 19;
					
							row1.ABC_indic_ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 20;
					
							row1.Reference_Date = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 21;
					
							row1.Ref__Element_PM_PS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 22;
					
							row1.Address_number = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 23;
					
							row1.Reference_time = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 24;
					
							row1.Changed_on = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 25;
					
							row1.Changed_by = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 26;
					
							row1.Available_to = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 27;
					
							row1.Avail__to_time = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 28;
					
							row1.Asset = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 29;
					
							row1.Subnumber = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 30;
					
							row1.Available_from = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 31;
					
							row1.Available_from30 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 32;
					
							row1.SystemCondition = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 33;
					
							row1.Work_center = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 34;
					
							row1.PriorityType = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 35;
					
							row1.Res__Purc__req_ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 36;
					
							row1.Subnetwork_of = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 37;
					
							row1.Order_category = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 38;
					
							row1.Plant_WkCntr = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 39;
					
							row1.Assembly = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 40;
					
							row1.Assembly_desc_ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 41;
					
							row1.Plant_section = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 42;
					
							row1.Acctg_Indicator = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 43;
					
							row1.PO_date = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 44;
					
							row1.PO_number = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 45;
					
							row1.Company_Code = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 46;
					
							row1.City = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 47;
					
							row1.District = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 48;
					
							row1.Country = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 49;
					
							row1.Device_data = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 50;
					
							row1.Sort_field = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 51;
					
							row1.Description50 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 52;
					
							row1.Equipment = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 53;
					
							row1.Created_on = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 54;
					
							row1.Entered_by = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 55;
					
							row1.Billing_form = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 56;
					
							row1.Actual_release = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 57;
					
							row1.Actual_Finish = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 58;
					
							row1.Actual_finish = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 59;
					
							row1.Basic_fin__date = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 60;
					
							row1.Sched__finish = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 61;
					
							row1.Basic_fin__time = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 62;
					
							row1.Finish_time = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 63;
					
							row1.Business_Area = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 64;
					
							row1.Actual_start = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 65;
					
							row1.Bas__start_date = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 66;
					
							row1.Sched__start = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 67;
					
							row1.ActualStart = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 68;
					
							row1.Start_time = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 69;
					
							row1.SchedStartTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 70;
					
							row1.Hist_fr_ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 71;
					
							row1.Planning_plant = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 72;
					
							row1.Costing_Sheet = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 73;
					
							row1.Sales_Document = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 74;
					
							row1.Item = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 75;
					
							row1.CO_Area = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 76;
					
							row1.Cost_Center = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 77;
					
							row1.Resp__cost_cntr = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 78;
					
							row1.Customer = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 79;
					
							row1.Leading_order = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 80;
					
							row1.Deletion_flag = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 81;
					
							row1.Long_txt_exists = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 82;
					
							row1.Description81 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 83;
					
							row1.Superior_order = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 84;
					
							row1.Base_Unit = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 85;
					
							row1.Quantity = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 86;
					
							row1.Room = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 87;
					
							row1.List_name = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 88;
					
							row1.Object_number = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 89;
					
							row1.Paging_status = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 90;
					
							row1.PGrp_Task_List = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 91;
					
							row1.OrderPlanInd_ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 92;
					
							row1.Group_Counter = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 93;
					
							row1.Group = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 94;
					
							row1.Postal_Code = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 95;
					
							row1.Profit_Center = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 96;
					
							row1.Priority95 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 97;
					
							row1.WBS_element = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 98;
					
							row1.WBS_ord__header = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 99;
					
							row1.Notification = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
					}
					
					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,row1Struct row1 ) throws java.lang.Exception{
						
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 100;
					
							row1.Region = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 101;
					
							row1.Revision = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 102;
					
							row1.Serial_Number = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 103;
					
							row1.Material = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 104;
					
							row1.Service_product = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 105;
					
							row1.Service_product104 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 106;
					
							row1.Division = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 107;
					
							row1.Division___Sales = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 108;
					
							row1.Location = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 109;
					
							row1.Street = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 110;
					
							row1.MaintPlant = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 111;
					
							row1.Telephone = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 112;
					
							row1.Sales_Office = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 113;
					
							row1.Sales_Group = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 114;
					
							row1.Sales_Org_ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 115;
					
							row1.Sales_Org____Sales = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 116;
					
							row1.Superior_act_ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 117;
					
							row1.Distr__Channel = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 118;
					
							row1.Distr__Channel___Sal = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 119;
					
							row1.Currency = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 120;
					
							row1.MaintItem = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 121;
					
							row1.MaintenancePlan = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 122;
					
							row1.Plant = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 123;
					
							row1.Comp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 124;
					
							row1.Overhead_key = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 125;
					
							row1.Earlst_Allow_Fin_Dat = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 126;
					
							row1.Earl_Allow_Start_Dat = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 127;
					
							row1.Latest_Allow_Fin_Dat = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 128;
					
							row1.Original_Due_Date = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 129;
					
							row1.Object_list = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 130;
					
							row1.Catalog_type = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 131;
					
							row1.Code_group = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 132;
					
							row1.Coding = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
					}
					
					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,row1Struct row1 ) throws java.lang.Exception{
				
						valueToConn_0(fid_tFileInputDelimited_1,row1 );
					
						valueToConn_1(fid_tFileInputDelimited_1,row1 );
					
					}
				
				}
				RowHelper_tFileInputDelimited_1 rowHelper_tFileInputDelimited_1  = new RowHelper_tFileInputDelimited_1();
			
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try{
					
						Object filename_tFileInputDelimited_1 = context.etl_data_home+"/barrier/database/barrier_landing/data/work_order_eis_map1.txt";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(context.etl_data_home+"/barrier/database/barrier_landing/data/work_order_eis_map1.txt", "US-ASCII","\t","\n",false,1,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row1 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row1 = new row1Struct();
									try {
										
			rowHelper_tFileInputDelimited_1.valueToConn(fid_tFileInputDelimited_1, row1 );
		
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row1 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

map_eis_map1 = null;


// # Output table : 'map_eis_map1'
map_eis_map1_tmp.functional_loc = null;
map_eis_map1_tmp.description = row1.Description;
map_eis_map1_tmp.order_type = row1.Order_Type;
map_eis_map1_tmp.Order = row1.Order;
map_eis_map1_tmp.maint_activ_type = row1.MaintActivType ;
map_eis_map1_tmp.description_4 = row1.Description4 ;
map_eis_map1_tmp.planner_group = row1.Planner_group;
map_eis_map1_tmp.main_work_ctr = row1.Main_WorkCtr ;
map_eis_map1_tmp.user_status = row1.User_status;
map_eis_map1_tmp.system_status = row1.System_status;
map_eis_map1_tmp.Priority = row1.Priority;
map_eis_map1_tmp.estimated_costs = row1.Estimated_costs;
map_eis_map1_tmp.total_act_costs = row1.Total_act_costs;
map_eis_map1_tmp.total_settlemt = row1.Total_settlemt;
map_eis_map1_tmp.total_plnnd_costs = row1.TotalPlnndCosts ;
map_eis_map1_tmp.tot_sum_plan = row1.TotSum__plan_ ;
map_eis_map1_tmp.total_rev_act = row1.Total_rev__act_ ;
map_eis_map1_tmp.tot_plan_rev = row1.Tot__plan__rev_ ;
map_eis_map1_tmp.tot_sum_actual = row1.TotSum__actual_ ;
map_eis_map1_tmp.abc_indic = row1.ABC_indic_ ;
map_eis_map1_tmp.reference_date = row1.Reference_Date;
map_eis_map1_tmp.ref_element_pm_ps = row1.Ref__Element_PM_PS ;
map_eis_map1_tmp.address_number = row1.Address_number;
map_eis_map1_tmp.reference_time = row1.Reference_time;
map_eis_map1_tmp.changed_on = row1.Changed_on;
map_eis_map1_tmp.changed_by = row1.Changed_by;
map_eis_map1_tmp.available_to = row1.Available_to;
map_eis_map1_tmp.avail_to_time = row1.Avail__to_time ;
map_eis_map1_tmp.asset = row1.Asset;
map_eis_map1_tmp.sub_number = row1.Subnumber ;
map_eis_map1_tmp.available_from = row1.Available_from;
map_eis_map1_tmp.available_from30 = row1.Available_from30;
map_eis_map1_tmp.system_condition = row1.SystemCondition ;
map_eis_map1_tmp.work_center = row1.Work_center;
map_eis_map1_tmp.priority_type = row1.PriorityType ;
map_eis_map1_tmp.res_purc_req = row1.Res__Purc__req_ ;
map_eis_map1_tmp.subnet_work_of = row1.Subnetwork_of ;
map_eis_map1_tmp.order_category = row1.Order_category;
map_eis_map1_tmp.plant_wk_cntr = row1.Plant_WkCntr ;
map_eis_map1_tmp.assembly = row1.Assembly;
map_eis_map1_tmp.assembly_desc = row1.Assembly_desc_ ;
map_eis_map1_tmp.plant_section = row1.Plant_section;
map_eis_map1_tmp.acctg_indicator = row1.Acctg_Indicator;
map_eis_map1_tmp.po_date = row1.PO_date;
map_eis_map1_tmp.po_number = row1.PO_number;
map_eis_map1_tmp.company_code = row1.Company_Code;
map_eis_map1_tmp.city = row1.City;
map_eis_map1_tmp.district = row1.District;
map_eis_map1_tmp.country = row1.Country;
map_eis_map1_tmp.device_data = row1.Device_data;
map_eis_map1_tmp.sort_field = row1.Sort_field;
map_eis_map1_tmp.description_50 = row1.Description50 ;
map_eis_map1_tmp.equipment = row1.Equipment;
map_eis_map1_tmp.created_on = row1.Created_on;
map_eis_map1_tmp.entered_by = row1.Entered_by;
map_eis_map1_tmp.billingform = row1.Billing_form ;
map_eis_map1_tmp.actual_release = row1.Actual_release;
map_eis_map1_tmp.actual_finish = row1.Actual_Finish;
map_eis_map1_tmp.actual_finish1 = row1.Actual_finish ;
map_eis_map1_tmp.basic_fin_date = row1.Basic_fin__date ;
map_eis_map1_tmp.sched_finish = row1.Sched__finish ;
map_eis_map1_tmp.basic_fin_time = row1.Basic_fin__time ;
map_eis_map1_tmp.finish_time = row1.Finish_time;
map_eis_map1_tmp.business_area = row1.Business_Area;
map_eis_map1_tmp.actual_start = row1.Actual_start;
map_eis_map1_tmp.bas_start_date = row1.Bas__start_date ;
map_eis_map1_tmp.sched_start = row1.Sched__start ;
map_eis_map1_tmp.actual_start1 = row1.ActualStart ;
map_eis_map1_tmp.start_time = row1.Start_time;
map_eis_map1_tmp.sched_start_time = row1.SchedStartTime ;
map_eis_map1_tmp.hist_fr = row1.Hist_fr_ ;
map_eis_map1_tmp.planning_plant = row1.Planning_plant;
map_eis_map1_tmp.costing_sheet = row1.Costing_Sheet;
map_eis_map1_tmp.sales_document = row1.Sales_Document;
map_eis_map1_tmp.item = row1.Item;
map_eis_map1_tmp.co_Area = row1.CO_Area;
map_eis_map1_tmp.cost_center = row1.Cost_Center;
map_eis_map1_tmp.resp_cost_cntr = row1.Resp__cost_cntr ;
map_eis_map1_tmp.customer = row1.Customer;
map_eis_map1_tmp.leading_order = row1.Leading_order;
map_eis_map1_tmp.deletion_flag = row1.Deletion_flag;
map_eis_map1_tmp.long_txt_exists = row1.Long_txt_exists;
map_eis_map1_tmp.description_81 = row1.Description81 ;
map_eis_map1_tmp.superior_order = row1.Superior_order;
map_eis_map1_tmp.base_unit = row1.Base_Unit;
map_eis_map1_tmp.quantity = row1.Quantity;
map_eis_map1_tmp.room = row1.Room;
map_eis_map1_tmp.list_name = row1.List_name;
map_eis_map1_tmp.object_number = row1.Object_number;
map_eis_map1_tmp.paging_status = row1.Paging_status;
map_eis_map1_tmp.pgrp_task_list = row1.PGrp_Task_List;
map_eis_map1_tmp.order_plan_ind = row1.OrderPlanInd_ ;
map_eis_map1_tmp.group_counter = row1.Group_Counter;
map_eis_map1_tmp.group = row1.Group;
map_eis_map1_tmp.postal_code = row1.Postal_Code;
map_eis_map1_tmp.profit_center = row1.Profit_Center;
map_eis_map1_tmp.priority_95 =  row1.Priority95 ;
map_eis_map1_tmp.wbs_element = row1.WBS_element;
map_eis_map1_tmp.wbs_ord_header = row1.WBS_ord__header ;
map_eis_map1_tmp.notification = row1.Notification;
map_eis_map1_tmp.region = row1.Region;
map_eis_map1_tmp.revision = row1.Revision;
map_eis_map1_tmp.serial_number = row1.Serial_Number;
map_eis_map1_tmp.material = row1.Material;
map_eis_map1_tmp.service_product = row1.Service_product;
map_eis_map1_tmp.service_product_104 = row1.Service_product104 ;
map_eis_map1_tmp.division = row1.Division;
map_eis_map1_tmp.division_sales = row1.Division___Sales ;
map_eis_map1_tmp.location = row1.Location;
map_eis_map1_tmp.street = row1.Street;
map_eis_map1_tmp.maint_plant = row1.MaintPlant ;
map_eis_map1_tmp.telephone = row1.Telephone;
map_eis_map1_tmp.sales_office = row1.Sales_Office;
map_eis_map1_tmp.sales_group = row1.Sales_Group;
map_eis_map1_tmp.sales_org = row1.Sales_Org_ ;
map_eis_map1_tmp.sales_org_sales = row1.Sales_Org____Sales ;
map_eis_map1_tmp.superior_act = row1.Superior_act_ ;
map_eis_map1_tmp.distr_channel = row1.Distr__Channel ;
map_eis_map1_tmp.distr_channel_sal = row1.Distr__Channel___Sal ;
map_eis_map1_tmp.currency = row1.Currency;
map_eis_map1_tmp.maint_item = row1.MaintItem ;
map_eis_map1_tmp.maintenance_plan = row1.MaintenancePlan ;
map_eis_map1_tmp.plant = row1.Plant;
map_eis_map1_tmp.comp = row1.Comp;
map_eis_map1_tmp.overhead_key = row1.Overhead_key;
map_eis_map1_tmp.earlst_allow_fin_dat = row1.Earlst_Allow_Fin_Dat;
map_eis_map1_tmp.earl_allow_start_dat = row1.Earl_Allow_Start_Dat;
map_eis_map1_tmp.latest_allow_fin_dat = row1.Latest_Allow_Fin_Dat;
map_eis_map1_tmp.original_due_date = row1.Original_Due_Date;
map_eis_map1_tmp.object_list = row1.Object_list;
map_eis_map1_tmp.catalog_type = row1.Catalog_type;
map_eis_map1_tmp.code_group = row1.Code_group;
map_eis_map1_tmp.coding = row1.Coding;
map_eis_map1 = map_eis_map1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "map_eis_map1"
if(map_eis_map1 != null) { 



	
	/**
	 * [tMysqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	

			//map_eis_map1
			//map_eis_map1


			
				if(execStat){
					runStat.updateStatOnConnection("map_eis_map1"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_1 = false;
                            if(map_eis_map1.functional_loc == null) {
pstmt_tMysqlOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(1, map_eis_map1.functional_loc);
}

                            if(map_eis_map1.description == null) {
pstmt_tMysqlOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(2, map_eis_map1.description);
}

                            if(map_eis_map1.order_type == null) {
pstmt_tMysqlOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(3, map_eis_map1.order_type);
}

                            if(map_eis_map1.Order == null) {
pstmt_tMysqlOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(4, map_eis_map1.Order);
}

                            if(map_eis_map1.maint_activ_type == null) {
pstmt_tMysqlOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(5, map_eis_map1.maint_activ_type);
}

                            if(map_eis_map1.description_4 == null) {
pstmt_tMysqlOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(6, map_eis_map1.description_4);
}

                            if(map_eis_map1.planner_group == null) {
pstmt_tMysqlOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(7, map_eis_map1.planner_group);
}

                            if(map_eis_map1.main_work_ctr == null) {
pstmt_tMysqlOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(8, map_eis_map1.main_work_ctr);
}

                            if(map_eis_map1.user_status == null) {
pstmt_tMysqlOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(9, map_eis_map1.user_status);
}

                            if(map_eis_map1.system_status == null) {
pstmt_tMysqlOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(10, map_eis_map1.system_status);
}

                            if(map_eis_map1.Priority == null) {
pstmt_tMysqlOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(11, map_eis_map1.Priority);
}

                            if(map_eis_map1.estimated_costs == null) {
pstmt_tMysqlOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(12, map_eis_map1.estimated_costs);
}

                            if(map_eis_map1.total_act_costs == null) {
pstmt_tMysqlOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(13, map_eis_map1.total_act_costs);
}

                            if(map_eis_map1.total_settlemt == null) {
pstmt_tMysqlOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(14, map_eis_map1.total_settlemt);
}

                            if(map_eis_map1.total_plnnd_costs == null) {
pstmt_tMysqlOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(15, map_eis_map1.total_plnnd_costs);
}

                            if(map_eis_map1.tot_sum_plan == null) {
pstmt_tMysqlOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(16, map_eis_map1.tot_sum_plan);
}

                            if(map_eis_map1.total_rev_act == null) {
pstmt_tMysqlOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(17, map_eis_map1.total_rev_act);
}

                            if(map_eis_map1.tot_plan_rev == null) {
pstmt_tMysqlOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(18, map_eis_map1.tot_plan_rev);
}

                            if(map_eis_map1.tot_sum_actual == null) {
pstmt_tMysqlOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(19, map_eis_map1.tot_sum_actual);
}

                            if(map_eis_map1.abc_indic == null) {
pstmt_tMysqlOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(20, map_eis_map1.abc_indic);
}

                            if(map_eis_map1.reference_date == null) {
pstmt_tMysqlOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(21, map_eis_map1.reference_date);
}

                            if(map_eis_map1.ref_element_pm_ps == null) {
pstmt_tMysqlOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(22, map_eis_map1.ref_element_pm_ps);
}

                            if(map_eis_map1.address_number == null) {
pstmt_tMysqlOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(23, map_eis_map1.address_number);
}

                            if(map_eis_map1.reference_time == null) {
pstmt_tMysqlOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(24, map_eis_map1.reference_time);
}

                            if(map_eis_map1.changed_on == null) {
pstmt_tMysqlOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(25, map_eis_map1.changed_on);
}

                            if(map_eis_map1.changed_by == null) {
pstmt_tMysqlOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(26, map_eis_map1.changed_by);
}

                            if(map_eis_map1.available_to == null) {
pstmt_tMysqlOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(27, map_eis_map1.available_to);
}

                            if(map_eis_map1.avail_to_time == null) {
pstmt_tMysqlOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(28, map_eis_map1.avail_to_time);
}

                            if(map_eis_map1.asset == null) {
pstmt_tMysqlOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(29, map_eis_map1.asset);
}

                            if(map_eis_map1.sub_number == null) {
pstmt_tMysqlOutput_1.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(30, map_eis_map1.sub_number);
}

                            if(map_eis_map1.available_from == null) {
pstmt_tMysqlOutput_1.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(31, map_eis_map1.available_from);
}

                            if(map_eis_map1.available_from30 == null) {
pstmt_tMysqlOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(32, map_eis_map1.available_from30);
}

                            if(map_eis_map1.system_condition == null) {
pstmt_tMysqlOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(33, map_eis_map1.system_condition);
}

                            if(map_eis_map1.work_center == null) {
pstmt_tMysqlOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(34, map_eis_map1.work_center);
}

                            if(map_eis_map1.priority_type == null) {
pstmt_tMysqlOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(35, map_eis_map1.priority_type);
}

                            if(map_eis_map1.res_purc_req == null) {
pstmt_tMysqlOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(36, map_eis_map1.res_purc_req);
}

                            if(map_eis_map1.subnet_work_of == null) {
pstmt_tMysqlOutput_1.setNull(37, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(37, map_eis_map1.subnet_work_of);
}

                            if(map_eis_map1.order_category == null) {
pstmt_tMysqlOutput_1.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(38, map_eis_map1.order_category);
}

                            if(map_eis_map1.plant_wk_cntr == null) {
pstmt_tMysqlOutput_1.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(39, map_eis_map1.plant_wk_cntr);
}

                            if(map_eis_map1.assembly == null) {
pstmt_tMysqlOutput_1.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(40, map_eis_map1.assembly);
}

                            if(map_eis_map1.assembly_desc == null) {
pstmt_tMysqlOutput_1.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(41, map_eis_map1.assembly_desc);
}

                            if(map_eis_map1.plant_section == null) {
pstmt_tMysqlOutput_1.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(42, map_eis_map1.plant_section);
}

                            if(map_eis_map1.acctg_indicator == null) {
pstmt_tMysqlOutput_1.setNull(43, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(43, map_eis_map1.acctg_indicator);
}

                            if(map_eis_map1.po_date == null) {
pstmt_tMysqlOutput_1.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(44, map_eis_map1.po_date);
}

                            if(map_eis_map1.po_number == null) {
pstmt_tMysqlOutput_1.setNull(45, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(45, map_eis_map1.po_number);
}

                            if(map_eis_map1.company_code == null) {
pstmt_tMysqlOutput_1.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(46, map_eis_map1.company_code);
}

                            if(map_eis_map1.city == null) {
pstmt_tMysqlOutput_1.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(47, map_eis_map1.city);
}

                            if(map_eis_map1.district == null) {
pstmt_tMysqlOutput_1.setNull(48, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(48, map_eis_map1.district);
}

                            if(map_eis_map1.country == null) {
pstmt_tMysqlOutput_1.setNull(49, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(49, map_eis_map1.country);
}

                            if(map_eis_map1.device_data == null) {
pstmt_tMysqlOutput_1.setNull(50, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(50, map_eis_map1.device_data);
}

                            if(map_eis_map1.sort_field == null) {
pstmt_tMysqlOutput_1.setNull(51, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(51, map_eis_map1.sort_field);
}

                            if(map_eis_map1.description_50 == null) {
pstmt_tMysqlOutput_1.setNull(52, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(52, map_eis_map1.description_50);
}

                            if(map_eis_map1.equipment == null) {
pstmt_tMysqlOutput_1.setNull(53, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(53, map_eis_map1.equipment);
}

                            if(map_eis_map1.created_on == null) {
pstmt_tMysqlOutput_1.setNull(54, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(54, map_eis_map1.created_on);
}

                            if(map_eis_map1.entered_by == null) {
pstmt_tMysqlOutput_1.setNull(55, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(55, map_eis_map1.entered_by);
}

                            if(map_eis_map1.billingform == null) {
pstmt_tMysqlOutput_1.setNull(56, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(56, map_eis_map1.billingform);
}

                            if(map_eis_map1.actual_release == null) {
pstmt_tMysqlOutput_1.setNull(57, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(57, map_eis_map1.actual_release);
}

                            if(map_eis_map1.actual_finish == null) {
pstmt_tMysqlOutput_1.setNull(58, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(58, map_eis_map1.actual_finish);
}

                            if(map_eis_map1.actual_finish1 == null) {
pstmt_tMysqlOutput_1.setNull(59, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(59, map_eis_map1.actual_finish1);
}

                            if(map_eis_map1.basic_fin_date == null) {
pstmt_tMysqlOutput_1.setNull(60, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(60, map_eis_map1.basic_fin_date);
}

                            if(map_eis_map1.sched_finish == null) {
pstmt_tMysqlOutput_1.setNull(61, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(61, map_eis_map1.sched_finish);
}

                            if(map_eis_map1.basic_fin_time == null) {
pstmt_tMysqlOutput_1.setNull(62, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(62, map_eis_map1.basic_fin_time);
}

                            if(map_eis_map1.finish_time == null) {
pstmt_tMysqlOutput_1.setNull(63, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(63, map_eis_map1.finish_time);
}

                            if(map_eis_map1.business_area == null) {
pstmt_tMysqlOutput_1.setNull(64, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(64, map_eis_map1.business_area);
}

                            if(map_eis_map1.actual_start == null) {
pstmt_tMysqlOutput_1.setNull(65, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(65, map_eis_map1.actual_start);
}

                            if(map_eis_map1.bas_start_date == null) {
pstmt_tMysqlOutput_1.setNull(66, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(66, map_eis_map1.bas_start_date);
}

                            if(map_eis_map1.sched_start == null) {
pstmt_tMysqlOutput_1.setNull(67, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(67, map_eis_map1.sched_start);
}

                            if(map_eis_map1.actual_start1 == null) {
pstmt_tMysqlOutput_1.setNull(68, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(68, map_eis_map1.actual_start1);
}

                            if(map_eis_map1.start_time == null) {
pstmt_tMysqlOutput_1.setNull(69, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(69, map_eis_map1.start_time);
}

                            if(map_eis_map1.sched_start_time == null) {
pstmt_tMysqlOutput_1.setNull(70, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(70, map_eis_map1.sched_start_time);
}

                            if(map_eis_map1.hist_fr == null) {
pstmt_tMysqlOutput_1.setNull(71, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(71, map_eis_map1.hist_fr);
}

                            if(map_eis_map1.planning_plant == null) {
pstmt_tMysqlOutput_1.setNull(72, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(72, map_eis_map1.planning_plant);
}

                            if(map_eis_map1.costing_sheet == null) {
pstmt_tMysqlOutput_1.setNull(73, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(73, map_eis_map1.costing_sheet);
}

                            if(map_eis_map1.sales_document == null) {
pstmt_tMysqlOutput_1.setNull(74, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(74, map_eis_map1.sales_document);
}

                            if(map_eis_map1.item == null) {
pstmt_tMysqlOutput_1.setNull(75, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(75, map_eis_map1.item);
}

                            if(map_eis_map1.co_Area == null) {
pstmt_tMysqlOutput_1.setNull(76, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(76, map_eis_map1.co_Area);
}

                            if(map_eis_map1.cost_center == null) {
pstmt_tMysqlOutput_1.setNull(77, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(77, map_eis_map1.cost_center);
}

                            if(map_eis_map1.resp_cost_cntr == null) {
pstmt_tMysqlOutput_1.setNull(78, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(78, map_eis_map1.resp_cost_cntr);
}

                            if(map_eis_map1.customer == null) {
pstmt_tMysqlOutput_1.setNull(79, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(79, map_eis_map1.customer);
}

                            if(map_eis_map1.leading_order == null) {
pstmt_tMysqlOutput_1.setNull(80, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(80, map_eis_map1.leading_order);
}

                            if(map_eis_map1.deletion_flag == null) {
pstmt_tMysqlOutput_1.setNull(81, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(81, map_eis_map1.deletion_flag);
}

                            if(map_eis_map1.long_txt_exists == null) {
pstmt_tMysqlOutput_1.setNull(82, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(82, map_eis_map1.long_txt_exists);
}

                            if(map_eis_map1.description_81 == null) {
pstmt_tMysqlOutput_1.setNull(83, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(83, map_eis_map1.description_81);
}

                            if(map_eis_map1.superior_order == null) {
pstmt_tMysqlOutput_1.setNull(84, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(84, map_eis_map1.superior_order);
}

                            if(map_eis_map1.base_unit == null) {
pstmt_tMysqlOutput_1.setNull(85, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(85, map_eis_map1.base_unit);
}

                            if(map_eis_map1.quantity == null) {
pstmt_tMysqlOutput_1.setNull(86, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(86, map_eis_map1.quantity);
}

                            if(map_eis_map1.room == null) {
pstmt_tMysqlOutput_1.setNull(87, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(87, map_eis_map1.room);
}

                            if(map_eis_map1.list_name == null) {
pstmt_tMysqlOutput_1.setNull(88, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(88, map_eis_map1.list_name);
}

                            if(map_eis_map1.object_number == null) {
pstmt_tMysqlOutput_1.setNull(89, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(89, map_eis_map1.object_number);
}

                            if(map_eis_map1.paging_status == null) {
pstmt_tMysqlOutput_1.setNull(90, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(90, map_eis_map1.paging_status);
}

                            if(map_eis_map1.pgrp_task_list == null) {
pstmt_tMysqlOutput_1.setNull(91, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(91, map_eis_map1.pgrp_task_list);
}

                            if(map_eis_map1.order_plan_ind == null) {
pstmt_tMysqlOutput_1.setNull(92, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(92, map_eis_map1.order_plan_ind);
}

                            if(map_eis_map1.group_counter == null) {
pstmt_tMysqlOutput_1.setNull(93, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(93, map_eis_map1.group_counter);
}

                            if(map_eis_map1.group == null) {
pstmt_tMysqlOutput_1.setNull(94, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(94, map_eis_map1.group);
}

                            if(map_eis_map1.postal_code == null) {
pstmt_tMysqlOutput_1.setNull(95, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(95, map_eis_map1.postal_code);
}

                            if(map_eis_map1.profit_center == null) {
pstmt_tMysqlOutput_1.setNull(96, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(96, map_eis_map1.profit_center);
}

                            if(map_eis_map1.priority_95 == null) {
pstmt_tMysqlOutput_1.setNull(97, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(97, map_eis_map1.priority_95);
}

                            if(map_eis_map1.wbs_element == null) {
pstmt_tMysqlOutput_1.setNull(98, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(98, map_eis_map1.wbs_element);
}

                            if(map_eis_map1.wbs_ord_header == null) {
pstmt_tMysqlOutput_1.setNull(99, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(99, map_eis_map1.wbs_ord_header);
}

                            if(map_eis_map1.notification == null) {
pstmt_tMysqlOutput_1.setNull(100, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(100, map_eis_map1.notification);
}

                            if(map_eis_map1.region == null) {
pstmt_tMysqlOutput_1.setNull(101, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(101, map_eis_map1.region);
}

                            if(map_eis_map1.revision == null) {
pstmt_tMysqlOutput_1.setNull(102, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(102, map_eis_map1.revision);
}

                            if(map_eis_map1.serial_number == null) {
pstmt_tMysqlOutput_1.setNull(103, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(103, map_eis_map1.serial_number);
}

                            if(map_eis_map1.material == null) {
pstmt_tMysqlOutput_1.setNull(104, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(104, map_eis_map1.material);
}

                            if(map_eis_map1.service_product == null) {
pstmt_tMysqlOutput_1.setNull(105, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(105, map_eis_map1.service_product);
}

                            if(map_eis_map1.service_product_104 == null) {
pstmt_tMysqlOutput_1.setNull(106, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(106, map_eis_map1.service_product_104);
}

                            if(map_eis_map1.division == null) {
pstmt_tMysqlOutput_1.setNull(107, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(107, map_eis_map1.division);
}

                            if(map_eis_map1.division_sales == null) {
pstmt_tMysqlOutput_1.setNull(108, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(108, map_eis_map1.division_sales);
}

                            if(map_eis_map1.location == null) {
pstmt_tMysqlOutput_1.setNull(109, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(109, map_eis_map1.location);
}

                            if(map_eis_map1.street == null) {
pstmt_tMysqlOutput_1.setNull(110, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(110, map_eis_map1.street);
}

                            if(map_eis_map1.maint_plant == null) {
pstmt_tMysqlOutput_1.setNull(111, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(111, map_eis_map1.maint_plant);
}

                            if(map_eis_map1.telephone == null) {
pstmt_tMysqlOutput_1.setNull(112, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(112, map_eis_map1.telephone);
}

                            if(map_eis_map1.sales_office == null) {
pstmt_tMysqlOutput_1.setNull(113, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(113, map_eis_map1.sales_office);
}

                            if(map_eis_map1.sales_group == null) {
pstmt_tMysqlOutput_1.setNull(114, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(114, map_eis_map1.sales_group);
}

                            if(map_eis_map1.sales_org == null) {
pstmt_tMysqlOutput_1.setNull(115, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(115, map_eis_map1.sales_org);
}

                            if(map_eis_map1.sales_org_sales == null) {
pstmt_tMysqlOutput_1.setNull(116, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(116, map_eis_map1.sales_org_sales);
}

                            if(map_eis_map1.superior_act == null) {
pstmt_tMysqlOutput_1.setNull(117, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(117, map_eis_map1.superior_act);
}

                            if(map_eis_map1.distr_channel == null) {
pstmt_tMysqlOutput_1.setNull(118, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(118, map_eis_map1.distr_channel);
}

                            if(map_eis_map1.distr_channel_sal == null) {
pstmt_tMysqlOutput_1.setNull(119, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(119, map_eis_map1.distr_channel_sal);
}

                            if(map_eis_map1.currency == null) {
pstmt_tMysqlOutput_1.setNull(120, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(120, map_eis_map1.currency);
}

                            if(map_eis_map1.maint_item == null) {
pstmt_tMysqlOutput_1.setNull(121, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(121, map_eis_map1.maint_item);
}

                            if(map_eis_map1.maintenance_plan == null) {
pstmt_tMysqlOutput_1.setNull(122, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(122, map_eis_map1.maintenance_plan);
}

                            if(map_eis_map1.plant == null) {
pstmt_tMysqlOutput_1.setNull(123, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(123, map_eis_map1.plant);
}

                            if(map_eis_map1.comp == null) {
pstmt_tMysqlOutput_1.setNull(124, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(124, map_eis_map1.comp);
}

                            if(map_eis_map1.overhead_key == null) {
pstmt_tMysqlOutput_1.setNull(125, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(125, map_eis_map1.overhead_key);
}

                            if(map_eis_map1.earlst_allow_fin_dat == null) {
pstmt_tMysqlOutput_1.setNull(126, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(126, map_eis_map1.earlst_allow_fin_dat);
}

                            if(map_eis_map1.earl_allow_start_dat == null) {
pstmt_tMysqlOutput_1.setNull(127, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(127, map_eis_map1.earl_allow_start_dat);
}

                            if(map_eis_map1.latest_allow_fin_dat == null) {
pstmt_tMysqlOutput_1.setNull(128, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(128, map_eis_map1.latest_allow_fin_dat);
}

                            if(map_eis_map1.original_due_date == null) {
pstmt_tMysqlOutput_1.setNull(129, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(129, map_eis_map1.original_due_date);
}

                            if(map_eis_map1.object_list == null) {
pstmt_tMysqlOutput_1.setNull(130, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(130, map_eis_map1.object_list);
}

                            if(map_eis_map1.catalog_type == null) {
pstmt_tMysqlOutput_1.setNull(131, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(131, map_eis_map1.catalog_type);
}

                            if(map_eis_map1.code_group == null) {
pstmt_tMysqlOutput_1.setNull(132, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(132, map_eis_map1.code_group);
}

                            if(map_eis_map1.coding == null) {
pstmt_tMysqlOutput_1.setNull(133, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(133, map_eis_map1.coding);
}

                    pstmt_tMysqlOutput_1.addBatch();
                    nb_line_tMysqlOutput_1++;

                      batchSizeCounter_tMysqlOutput_1++;
                if ( batchSize_tMysqlOutput_1 <= batchSizeCounter_tMysqlOutput_1) {
                try {
                        int countSum_tMysqlOutput_1 = 0;
                        for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
                            countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_1 = 0;
                    for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
                    }
                    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tMysqlOutput_1 = 0;
            }
                commitCounter_tMysqlOutput_1++;

                if(commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

                try {
                        int countSum_tMysqlOutput_1 = 0;
                        for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
                            countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_1 = 0;
                    for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
                    }
                    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                    System.err.println(e.getMessage());

                }
                    conn_tMysqlOutput_1.commit();
                    commitCounter_tMysqlOutput_1=0;

                }


 


	tos_count_tMysqlOutput_1++;

/**
 * [tMysqlOutput_1 main ] stop
 */

} // End of branch "map_eis_map1"





} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)(context.etl_data_home+"/barrier/database/barrier_landing/data/work_order_eis_map1.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMysqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



                try {
                		if (batchSizeCounter_tMysqlOutput_1 != 0) {
							int countSum_tMysqlOutput_1 = 0;
							
							for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
								countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tMysqlOutput_1 = 0;
					for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
						countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
					}
					
            	    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tMysqlOutput_1 = 0;
    		
	

        if(pstmt_tMysqlOutput_1 != null) {
			
				pstmt_tMysqlOutput_1.close();
			
        }

    	if (commitCounter_tMysqlOutput_1 > 0) {
    		
    		conn_tMysqlOutput_1.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_1 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_1", true);
    	

	nb_line_deleted_tMysqlOutput_1=nb_line_deleted_tMysqlOutput_1+ deletedCount_tMysqlOutput_1;
	nb_line_update_tMysqlOutput_1=nb_line_update_tMysqlOutput_1 + updatedCount_tMysqlOutput_1;
	nb_line_inserted_tMysqlOutput_1=nb_line_inserted_tMysqlOutput_1 + insertedCount_tMysqlOutput_1;
	nb_line_rejected_tMysqlOutput_1=nb_line_rejected_tMysqlOutput_1 + rejectedCount_tMysqlOutput_1;
	
        globalMap.put("tMysqlOutput_1_NB_LINE",nb_line_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("map_eis_map1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_1", true);
end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());




/**
 * [tMysqlOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



	
		if(resourceMap.get("finish_tMysqlOutput_1")==null){
			if(resourceMap.get("conn_tMysqlOutput_1")!=null){
				try {
					
					
					java.sql.Connection ctn_tMysqlOutput_1 = (java.sql.Connection)resourceMap.get("conn_tMysqlOutput_1");
					
					
            		
					ctn_tMysqlOutput_1.close();
					
				} catch (java.sql.SQLException sqlEx_tMysqlOutput_1) {
					String errorMessage_tMysqlOutput_1 = "failed to close the connection in tMysqlOutput_1 :" + sqlEx_tMysqlOutput_1.getMessage();
					
					System.err.println(errorMessage_tMysqlOutput_1);
				}
			}
		}
	

 



/**
 * [tMysqlOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_2", false);
		start_Hash.put("tPostjob_2", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_2";

	
		int tos_count_tPostjob_2 = 0;
		
    	class BytesLimit65535_tPostjob_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostjob_2().limitLog4jByte();

 



/**
 * [tPostjob_2 begin ] stop
 */
	
	/**
	 * [tPostjob_2 main ] start
	 */

	

	
	
	currentComponent="tPostjob_2";

	

 


	tos_count_tPostjob_2++;

/**
 * [tPostjob_2 main ] stop
 */
	
	/**
	 * [tPostjob_2 end ] start
	 */

	

	
	
	currentComponent="tPostjob_2";

	

 

ok_Hash.put("tPostjob_2", true);
end_Hash.put("tPostjob_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tRunJob_2Process(globalMap);



/**
 * [tPostjob_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_2 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_2";

	

 



/**
 * [tPostjob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_2_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";

	
		int tos_count_tRunJob_2 = 0;
		
    	class BytesLimit65535_tRunJob_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_2().limitLog4jByte();


 



/**
 * [tRunJob_2 begin ] stop
 */
	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_2.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_2.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_2.add("--father_node=tRunJob_2");
	      			
	        			paraList_tRunJob_2.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_2 = null;

	
		obj_tRunJob_2 = context.this_level_job_name;
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param Job_name=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param Job_name=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("Job_name", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.this_level_job_post;
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param parent_job_post=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param parent_job_post=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("parent_job_post", obj_tRunJob_2);
	
	
		barrier_project.sendemailjobprocessstatus_0_1.SendEmailJobProcessStatus childJob_tRunJob_2 = new barrier_project.sendemailjobprocessstatus_0_1.SendEmailJobProcessStatus();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_2) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
			        .entrySet()) {
	            dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
	                    talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
	    }
		  
			childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
		  
		
		String[][] childReturn_tRunJob_2 = childJob_tRunJob_2.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));
		
	  	
				errorCode = childJob_tRunJob_2.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_2.getErrorCode() == null){
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
		    }
		    if (childJob_tRunJob_2.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_2.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());




/**
 * [tRunJob_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		
    	class BytesLimit65535_tPrejob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPrejob_1().limitLog4jByte();

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		
    	class BytesLimit65535_tRunJob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_1().limitLog4jByte();


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        			paraList_tRunJob_1.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = context.this_level_job_name;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param Job_name=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param Job_name=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("Job_name", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.this_level_job_pre;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param parent_job_pre=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param parent_job_pre=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("parent_job_pre", obj_tRunJob_1);
	
	
		barrier_project.sendemailjobprocessstatus_0_1.SendEmailJobProcessStatus childJob_tRunJob_1 = new barrier_project.sendemailjobprocessstatus_0_1.SendEmailJobProcessStatus();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
	  	
				errorCode = childJob_tRunJob_1.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_1.getErrorCode() == null){
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
		    }
		    if (childJob_tRunJob_1.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_1.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final jb_land_work_order_eis_map1 jb_land_work_order_eis_map1Class = new jb_land_work_order_eis_map1();

        int exitCode = jb_land_work_order_eis_map1Class.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = jb_land_work_order_eis_map1.class.getClassLoader().getResourceAsStream("barrier_project/jb_land_work_order_eis_map1_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("this_level_job_name", "id_String");
				
                context.this_level_job_name=(String) context.getProperty("this_level_job_name");
				    context.setContextType("this_level_job_pre", "id_String");
				
                context.this_level_job_pre=(String) context.getProperty("this_level_job_pre");
				    context.setContextType("this_level_job_post", "id_String");
				
                context.this_level_job_post=(String) context.getProperty("this_level_job_post");
				    context.setContextType("barrier_landing_conn_AdditionalParams", "id_String");
				
                context.barrier_landing_conn_AdditionalParams=(String) context.getProperty("barrier_landing_conn_AdditionalParams");
				    context.setContextType("barrier_landing_conn_Database", "id_String");
				
                context.barrier_landing_conn_Database=(String) context.getProperty("barrier_landing_conn_Database");
				    context.setContextType("barrier_landing_conn_Login", "id_String");
				
                context.barrier_landing_conn_Login=(String) context.getProperty("barrier_landing_conn_Login");
				    context.setContextType("barrier_landing_conn_Password", "id_Password");
				
            		String pwd_barrier_landing_conn_Password_value = context.getProperty("barrier_landing_conn_Password");
            		context.barrier_landing_conn_Password = null;
            		if(pwd_barrier_landing_conn_Password_value!=null) {
            			if(context_param.containsKey("barrier_landing_conn_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.barrier_landing_conn_Password = pwd_barrier_landing_conn_Password_value;
            			} else if (!pwd_barrier_landing_conn_Password_value.isEmpty()) {
            				try {
            					context.barrier_landing_conn_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_barrier_landing_conn_Password_value);
            					context.put("barrier_landing_conn_Password",context.barrier_landing_conn_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("barrier_landing_conn_Port", "id_String");
				
                context.barrier_landing_conn_Port=(String) context.getProperty("barrier_landing_conn_Port");
				    context.setContextType("barrier_landing_conn_Server", "id_String");
				
                context.barrier_landing_conn_Server=(String) context.getProperty("barrier_landing_conn_Server");
				    context.setContextType("etl_data_home", "id_String");
				
                context.etl_data_home=(String) context.getProperty("etl_data_home");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("this_level_job_name")) {
                context.this_level_job_name = (String) parentContextMap.get("this_level_job_name");
            }if (parentContextMap.containsKey("this_level_job_pre")) {
                context.this_level_job_pre = (String) parentContextMap.get("this_level_job_pre");
            }if (parentContextMap.containsKey("this_level_job_post")) {
                context.this_level_job_post = (String) parentContextMap.get("this_level_job_post");
            }if (parentContextMap.containsKey("barrier_landing_conn_AdditionalParams")) {
                context.barrier_landing_conn_AdditionalParams = (String) parentContextMap.get("barrier_landing_conn_AdditionalParams");
            }if (parentContextMap.containsKey("barrier_landing_conn_Database")) {
                context.barrier_landing_conn_Database = (String) parentContextMap.get("barrier_landing_conn_Database");
            }if (parentContextMap.containsKey("barrier_landing_conn_Login")) {
                context.barrier_landing_conn_Login = (String) parentContextMap.get("barrier_landing_conn_Login");
            }if (parentContextMap.containsKey("barrier_landing_conn_Password")) {
                context.barrier_landing_conn_Password = (java.lang.String) parentContextMap.get("barrier_landing_conn_Password");
            }if (parentContextMap.containsKey("barrier_landing_conn_Port")) {
                context.barrier_landing_conn_Port = (String) parentContextMap.get("barrier_landing_conn_Port");
            }if (parentContextMap.containsKey("barrier_landing_conn_Server")) {
                context.barrier_landing_conn_Server = (String) parentContextMap.get("barrier_landing_conn_Server");
            }if (parentContextMap.containsKey("etl_data_home")) {
                context.etl_data_home = (String) parentContextMap.get("etl_data_home");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("barrier_landing_conn_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_2) {
globalMap.put("tPostjob_2_SUBPROCESS_STATE", -1);

e_tPostjob_2.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : jb_land_work_order_eis_map1");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     211600 characters generated by Talend Open Studio for Data Integration 
 *     on the 29 November 2017 08:43:47 GMT
 ************************************************************************************************/